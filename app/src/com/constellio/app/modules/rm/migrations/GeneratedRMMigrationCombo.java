package com.constellio.app.modules.rm.migrations;

import com.constellio.app.entities.calculators.SummaryCalculator;
import com.constellio.app.entities.modules.MigrationResourcesProvider;
import com.constellio.app.entities.schemasDisplay.SchemaTypesDisplayConfig;
import com.constellio.app.entities.schemasDisplay.enums.MetadataInputType;
import com.constellio.app.modules.rm.model.CopyRetentionRuleFactory;
import com.constellio.app.modules.rm.model.CopyRetentionRuleInRuleFactory;
import com.constellio.app.modules.rm.model.calculators.AdministrativeUnitAncestorsCalculator;
import com.constellio.app.modules.rm.model.calculators.CategoryIsLinkableCalculator;
import com.constellio.app.modules.rm.model.calculators.ContainerRecordTreeVisibilityCalculator;
import com.constellio.app.modules.rm.model.calculators.ContainerTitleCalculator;
import com.constellio.app.modules.rm.model.calculators.FolderActiveRetentionTypeCalculator;
import com.constellio.app.modules.rm.model.calculators.FolderApplicableCopyRuleCalculator;
import com.constellio.app.modules.rm.model.calculators.FolderArchivisticStatusCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderClosingDateCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderCopyRulesExpectedDepositDatesCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderCopyRulesExpectedDestructionDatesCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderCopyRulesExpectedTransferDatesCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderCopyStatusCalculator3;
import com.constellio.app.modules.rm.model.calculators.FolderExpectedDepositDateCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderExpectedDestructionDateCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderExpectedTransferDateCalculator2;
import com.constellio.app.modules.rm.model.calculators.FolderInactiveDisposalTypeCalculator;
import com.constellio.app.modules.rm.model.calculators.FolderSemiActiveRetentionTypeCalculator;
import com.constellio.app.modules.rm.model.calculators.FolderTokensOfHierarchyCalculator;
import com.constellio.app.modules.rm.model.calculators.FolderTreeVisibilityCalculator;
import com.constellio.app.modules.rm.model.calculators.UserDocumentContentHashesCalculator;
import com.constellio.app.modules.rm.model.calculators.category.CategoryCopyRetentionRulesOnDocumentTypesCalculator;
import com.constellio.app.modules.rm.model.calculators.category.CategoryLevelCalculator;
import com.constellio.app.modules.rm.model.calculators.container.ContainerRecordAvailableSizeCalculator;
import com.constellio.app.modules.rm.model.calculators.container.ContainerRecordLinearSizeCalculator;
import com.constellio.app.modules.rm.model.calculators.container.ContainerRecordLocalizationCalculator;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListContainersCalculator;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListFoldersCalculator;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListHasAnalogicalMediumTypesCalculator;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListHasElectronicMediumTypesCalculator;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListIsUniform;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListStatusCalculator2;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListUniformCategoryCalculator2;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListUniformCopyRuleCalculator2;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListUniformCopyTypeCalculator2;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.DecomListUniformRuleCalculator2;
import com.constellio.app.modules.rm.model.calculators.decommissioningList.PendingValidationCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentActualDepositDateCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentActualDestructionDateCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentActualTransferDateCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentApplicableCopyRulesCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentArchivisticStatusCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentAutocompleteFieldCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentCaptionCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentCheckedOutUserCalculator2;
import com.constellio.app.modules.rm.model.calculators.document.DocumentConfidentialCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentContentHashesCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentEssentialCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentExpectedDepositDateCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentExpectedDestructionDateCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentExpectedTransferDateCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentHasContentCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentIsSameInactiveFateAsFolderCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentIsSameSemiActiveFateAsFolderCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentMainCopyRuleCalculator2;
import com.constellio.app.modules.rm.model.calculators.document.DocumentMimeTypeCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentRetentionRuleCalculator;
import com.constellio.app.modules.rm.model.calculators.document.DocumentVersionCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderApplicableCategoryCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderAppliedAdministrativeUnitCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderAppliedFilingSpaceCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderAppliedRetentionRuleCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderAppliedUniformSubdivisionCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderAutocompleteFieldCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderCaptionCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderConfidentialCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderEssentialCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderMainCopyRuleCalculator2;
import com.constellio.app.modules.rm.model.calculators.folder.FolderMainCopyRuleCodeCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderMediaTypesCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderRetentionPeriodCodeCalculator;
import com.constellio.app.modules.rm.model.calculators.folder.FolderUniqueKeyCalculator;
import com.constellio.app.modules.rm.model.calculators.rule.RuleDocumentTypesCalculator2;
import com.constellio.app.modules.rm.model.calculators.rule.RuleFolderTypesCalculator;
import com.constellio.app.modules.rm.model.calculators.rule.RuleYearTypesCalculator;
import com.constellio.app.modules.rm.model.calculators.storageSpace.StorageSpaceAvailableSizeCalculator;
import com.constellio.app.modules.rm.model.calculators.storageSpace.StorageSpaceLinearSizeCalculator;
import com.constellio.app.modules.rm.model.enums.CopyType;
import com.constellio.app.modules.rm.model.enums.DecomListStatus;
import com.constellio.app.modules.rm.model.enums.DecommissioningListType;
import com.constellio.app.modules.rm.model.enums.DecommissioningMonth;
import com.constellio.app.modules.rm.model.enums.DecommissioningType;
import com.constellio.app.modules.rm.model.enums.DisposalType;
import com.constellio.app.modules.rm.model.enums.FolderMediaType;
import com.constellio.app.modules.rm.model.enums.FolderStatus;
import com.constellio.app.modules.rm.model.enums.OriginStatus;
import com.constellio.app.modules.rm.model.enums.RetentionRuleScope;
import com.constellio.app.modules.rm.model.enums.RetentionType;
import com.constellio.app.modules.rm.model.validators.ContainerRecordValidator;
import com.constellio.app.modules.rm.model.validators.FolderValidator;
import com.constellio.app.modules.rm.model.validators.MediumTypeValidator;
import com.constellio.app.modules.rm.model.validators.RetentionRuleValidator;
import com.constellio.app.modules.rm.model.validators.StorageSpaceValidator;
import com.constellio.app.modules.rm.services.borrowingServices.BorrowingType;
import com.constellio.app.modules.rm.wrappers.structures.CommentFactory;
import com.constellio.app.modules.rm.wrappers.structures.DecomListContainerDetailFactory;
import com.constellio.app.modules.rm.wrappers.structures.DecomListFolderDetailFactory;
import com.constellio.app.modules.rm.wrappers.structures.DecomListValidationFactory;
import com.constellio.app.modules.rm.wrappers.structures.RetentionRuleDocumentTypeFactory;
import com.constellio.app.modules.tasks.model.validators.TaskValidator;
import com.constellio.app.services.factories.AppLayerFactory;
import com.constellio.app.services.schemasDisplay.SchemaTypesDisplayTransactionBuilder;
import com.constellio.app.services.schemasDisplay.SchemasDisplayManager;
import com.constellio.model.entities.schemas.MetadataValueType;
import com.constellio.model.entities.security.Role;
import com.constellio.model.services.contents.ContentFactory;
import com.constellio.model.services.schemas.builders.MetadataBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypeBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypesBuilder;
import com.constellio.model.services.schemas.calculators.AllReferencesCalculator;
import com.constellio.model.services.schemas.calculators.AllRemovedAuthsCalculator;
import com.constellio.model.services.schemas.calculators.AttachedAncestorsCalculator;
import com.constellio.model.services.schemas.calculators.AutocompleteFieldCalculator;
import com.constellio.model.services.schemas.calculators.DefaultTokensOfHierarchyCalculator;
import com.constellio.model.services.schemas.calculators.PathCalculator;
import com.constellio.model.services.schemas.calculators.PathPartsCalculator;
import com.constellio.model.services.schemas.calculators.PrincipalPathCalculator;
import com.constellio.model.services.schemas.calculators.TokensCalculator4;
import com.constellio.model.services.schemas.validators.ManualTokenValidator;
import com.constellio.model.services.schemas.validators.metadatas.IntegerStringValidator;
import com.constellio.model.services.security.roles.RolesManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.util.Arrays.asList;

public final class GeneratedRMMigrationCombo {
  String collection;

  AppLayerFactory appLayerFactory;

  MigrationResourcesProvider resourcesProvider;

  GeneratedRMMigrationCombo(String collection, AppLayerFactory appLayerFactory, MigrationResourcesProvider resourcesProvider) {
    this.collection = collection;
    this.appLayerFactory = appLayerFactory;
    this.resourcesProvider = resourcesProvider;
  }

  public void applyGeneratedSchemaAlteration(MetadataSchemaTypesBuilder typesBuilder) {
    MetadataSchemaTypeBuilder collectionSchemaType = typesBuilder.getSchemaType("collection");
    MetadataSchemaBuilder collectionSchema = collectionSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder groupSchemaType = typesBuilder.getSchemaType("group");
    MetadataSchemaBuilder groupSchema = groupSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userSchemaType = typesBuilder.getSchemaType("user");
    MetadataSchemaBuilder userSchema = userSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder authorizationDetailsSchemaType = typesBuilder.getSchemaType("authorizationDetails");
    MetadataSchemaBuilder authorizationDetailsSchema = authorizationDetailsSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder capsuleSchemaType = typesBuilder.getSchemaType("capsule");
    MetadataSchemaBuilder capsuleSchema = capsuleSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvCapsuleLanguageSchemaType = typesBuilder.getSchemaType("ddvCapsuleLanguage");
    MetadataSchemaBuilder ddvCapsuleLanguageSchema = ddvCapsuleLanguageSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvTaskStatusSchemaType = typesBuilder.getSchemaType("ddvTaskStatus");
    MetadataSchemaBuilder ddvTaskStatusSchema = ddvTaskStatusSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvTaskTypeSchemaType = typesBuilder.getSchemaType("ddvTaskType");
    MetadataSchemaBuilder ddvTaskTypeSchema = ddvTaskTypeSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder emailToSendSchemaType = typesBuilder.getSchemaType("emailToSend");
    MetadataSchemaBuilder emailToSendSchema = emailToSendSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder eventSchemaType = typesBuilder.getSchemaType("event");
    MetadataSchemaBuilder eventSchema = eventSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder facetSchemaType = typesBuilder.getSchemaType("facet");
    MetadataSchemaBuilder facet_fieldSchema = facetSchemaType.getCustomSchema("field");
    MetadataSchemaBuilder facet_querySchema = facetSchemaType.getCustomSchema("query");
    MetadataSchemaBuilder facetSchema = facetSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder printableSchemaType = typesBuilder.getSchemaType("printable");
    MetadataSchemaBuilder printable_labelSchema = printableSchemaType.createCustomSchema("label");
    MetadataSchemaBuilder printable_reportSchema = printableSchemaType.createCustomSchema("report");
    MetadataSchemaBuilder printableSchema = printableSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder reportSchemaType = typesBuilder.getSchemaType("report");
    MetadataSchemaBuilder reportSchema = reportSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder savedSearchSchemaType = typesBuilder.getSchemaType("savedSearch");
    MetadataSchemaBuilder savedSearchSchema = savedSearchSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder searchEventSchemaType = typesBuilder.getSchemaType("searchEvent");
    MetadataSchemaBuilder searchEventSchema = searchEventSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder taskSchemaType = typesBuilder.getSchemaType("task");
    MetadataSchemaBuilder task_approvalSchema = taskSchemaType.getCustomSchema("approval");
    MetadataSchemaBuilder taskSchema = taskSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder temporaryRecordSchemaType = typesBuilder.getSchemaType("temporaryRecord");
    MetadataSchemaBuilder temporaryRecord_ConsolidatedPdfSchema = temporaryRecordSchemaType.createCustomSchema("ConsolidatedPdf");
    MetadataSchemaBuilder temporaryRecord_batchProcessReportSchema = temporaryRecordSchemaType.getCustomSchema("batchProcessReport");
    MetadataSchemaBuilder temporaryRecord_exportAuditSchema = temporaryRecordSchemaType.getCustomSchema("exportAudit");
    MetadataSchemaBuilder temporaryRecord_importAuditSchema = temporaryRecordSchemaType.getCustomSchema("importAudit");
    MetadataSchemaBuilder temporaryRecord_scriptReportSchema = temporaryRecordSchemaType.getCustomSchema("scriptReport");
    MetadataSchemaBuilder temporaryRecord_sipArchiveSchema = temporaryRecordSchemaType.createCustomSchema("sipArchive");
    MetadataSchemaBuilder temporaryRecord_vaultScanReportSchema = temporaryRecordSchemaType.getCustomSchema("vaultScanReport");
    MetadataSchemaBuilder temporaryRecordSchema = temporaryRecordSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder thesaurusConfigSchemaType = typesBuilder.getSchemaType("thesaurusConfig");
    MetadataSchemaBuilder thesaurusConfigSchema = thesaurusConfigSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userDocumentSchemaType = typesBuilder.getSchemaType("userDocument");
    MetadataSchemaBuilder userDocumentSchema = userDocumentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userFolderSchemaType = typesBuilder.getSchemaType("userFolder");
    MetadataSchemaBuilder userFolderSchema = userFolderSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userTaskSchemaType = typesBuilder.getSchemaType("userTask");
    MetadataSchemaBuilder userTask_borrowExtensionRequestSchema = userTaskSchemaType.createCustomSchema("borrowExtensionRequest");
    userTask_borrowExtensionRequestSchema.defineValidators().add(TaskValidator.class);
    MetadataSchemaBuilder userTask_borrowRequestSchema = userTaskSchemaType.createCustomSchema("borrowRequest");
    userTask_borrowRequestSchema.defineValidators().add(TaskValidator.class);
    MetadataSchemaBuilder userTask_reactivationRequestSchema = userTaskSchemaType.createCustomSchema("reactivationRequest");
    userTask_reactivationRequestSchema.defineValidators().add(TaskValidator.class);
    MetadataSchemaBuilder userTask_returnRequestSchema = userTaskSchemaType.createCustomSchema("returnRequest");
    userTask_returnRequestSchema.defineValidators().add(TaskValidator.class);
    MetadataSchemaBuilder userTaskSchema = userTaskSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder workflowSchemaType = typesBuilder.getSchemaType("workflow");
    MetadataSchemaBuilder workflowSchema = workflowSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder workflowInstanceSchemaType = typesBuilder.getSchemaType("workflowInstance");
    MetadataSchemaBuilder workflowInstanceSchema = workflowInstanceSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder administrativeUnitSchemaType = typesBuilder.createNewSchemaType("administrativeUnit",false);
    MetadataSchemaBuilder administrativeUnitSchema = administrativeUnitSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder bagInfoSchemaType = typesBuilder.createNewSchemaType("bagInfo",false).setSecurity(false);
    MetadataSchemaBuilder bagInfoSchema = bagInfoSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder cartSchemaType = typesBuilder.createNewSchemaType("cart",false).setSecurity(false);
    MetadataSchemaBuilder cartSchema = cartSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder categorySchemaType = typesBuilder.createNewSchemaType("category",false).setSecurity(false);
    MetadataSchemaBuilder categorySchema = categorySchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder containerRecordSchemaType = typesBuilder.createNewSchemaType("containerRecord",false).setSecurity(false).setSmallCode("c");
    MetadataSchemaBuilder containerRecordSchema = containerRecordSchemaType.getDefaultSchema();
    containerRecordSchema.defineValidators().add(ContainerRecordValidator.class);
    MetadataSchemaTypeBuilder ddvContainerRecordTypeSchemaType = typesBuilder.createNewSchemaType("ddvContainerRecordType",false).setSecurity(false);
    MetadataSchemaBuilder ddvContainerRecordTypeSchema = ddvContainerRecordTypeSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvDocumentTypeSchemaType = typesBuilder.createNewSchemaType("ddvDocumentType",false).setSecurity(false);
    MetadataSchemaBuilder ddvDocumentTypeSchema = ddvDocumentTypeSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvFolderTypeSchemaType = typesBuilder.createNewSchemaType("ddvFolderType",false).setSecurity(false);
    MetadataSchemaBuilder ddvFolderTypeSchema = ddvFolderTypeSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvMediumTypeSchemaType = typesBuilder.createNewSchemaType("ddvMediumType",false).setSecurity(false);
    MetadataSchemaBuilder ddvMediumTypeSchema = ddvMediumTypeSchemaType.getDefaultSchema();
    ddvMediumTypeSchema.defineValidators().add(MediumTypeValidator.class);
    MetadataSchemaTypeBuilder ddvStorageSpaceTypeSchemaType = typesBuilder.createNewSchemaType("ddvStorageSpaceType",false).setSecurity(false);
    MetadataSchemaBuilder ddvStorageSpaceTypeSchema = ddvStorageSpaceTypeSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvVariablePeriodSchemaType = typesBuilder.createNewSchemaType("ddvVariablePeriod",false).setSecurity(false);
    MetadataSchemaBuilder ddvVariablePeriodSchema = ddvVariablePeriodSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvYearTypeSchemaType = typesBuilder.createNewSchemaType("ddvYearType",false).setSecurity(false);
    MetadataSchemaBuilder ddvYearTypeSchema = ddvYearTypeSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder decommissioningListSchemaType = typesBuilder.createNewSchemaType("decommissioningList",false).setSecurity(false);
    MetadataSchemaBuilder decommissioningListSchema = decommissioningListSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder documentSchemaType = typesBuilder.createNewSchemaType("document",false).setSmallCode("d");
    MetadataSchemaBuilder document_emailSchema = documentSchemaType.createCustomSchema("email");
    MetadataSchemaBuilder documentSchema = documentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder filingSpaceSchemaType = typesBuilder.createNewSchemaType("filingSpace",false).setSecurity(false);
    MetadataSchemaBuilder filingSpaceSchema = filingSpaceSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder folderSchemaType = typesBuilder.createNewSchemaType("folder",false).setSmallCode("f");
    MetadataSchemaBuilder folderSchema = folderSchemaType.getDefaultSchema();
    folderSchema.defineValidators().add(FolderValidator.class);
    MetadataSchemaTypeBuilder retentionRuleSchemaType = typesBuilder.createNewSchemaType("retentionRule",false).setSecurity(false);
    MetadataSchemaBuilder retentionRuleSchema = retentionRuleSchemaType.getDefaultSchema();
    retentionRuleSchema.defineValidators().add(RetentionRuleValidator.class);
    MetadataSchemaTypeBuilder storageSpaceSchemaType = typesBuilder.createNewSchemaType("storageSpace",false).setSecurity(false);
    MetadataSchemaBuilder storageSpaceSchema = storageSpaceSchemaType.getDefaultSchema();
    storageSpaceSchema.defineValidators().add(StorageSpaceValidator.class);
    MetadataSchemaTypeBuilder uniformSubdivisionSchemaType = typesBuilder.createNewSchemaType("uniformSubdivision",false).setSecurity(false);
    MetadataSchemaBuilder uniformSubdivisionSchema = uniformSubdivisionSchemaType.getDefaultSchema();
    createCollectionSchemaTypeMetadatas(typesBuilder,collectionSchemaType, collectionSchema);
    createGroupSchemaTypeMetadatas(typesBuilder,groupSchemaType, groupSchema);
    createUserSchemaTypeMetadatas(typesBuilder,userSchemaType, userSchema);
    createAdministrativeUnitSchemaTypeMetadatas(typesBuilder,administrativeUnitSchemaType, administrativeUnitSchema);
    createAuthorizationDetailsSchemaTypeMetadatas(typesBuilder,authorizationDetailsSchemaType, authorizationDetailsSchema);
    createBagInfoSchemaTypeMetadatas(typesBuilder,bagInfoSchemaType, bagInfoSchema);
    createCapsuleSchemaTypeMetadatas(typesBuilder,capsuleSchemaType, capsuleSchema);
    createCartSchemaTypeMetadatas(typesBuilder,cartSchemaType, cartSchema);
    createCategorySchemaTypeMetadatas(typesBuilder,categorySchemaType, categorySchema);
    createContainerRecordSchemaTypeMetadatas(typesBuilder,containerRecordSchemaType, containerRecordSchema);
    createDdvCapsuleLanguageSchemaTypeMetadatas(typesBuilder,ddvCapsuleLanguageSchemaType, ddvCapsuleLanguageSchema);
    createDdvContainerRecordTypeSchemaTypeMetadatas(typesBuilder,ddvContainerRecordTypeSchemaType, ddvContainerRecordTypeSchema);
    createDdvDocumentTypeSchemaTypeMetadatas(typesBuilder,ddvDocumentTypeSchemaType, ddvDocumentTypeSchema);
    createDdvFolderTypeSchemaTypeMetadatas(typesBuilder,ddvFolderTypeSchemaType, ddvFolderTypeSchema);
    createDdvMediumTypeSchemaTypeMetadatas(typesBuilder,ddvMediumTypeSchemaType, ddvMediumTypeSchema);
    createDdvStorageSpaceTypeSchemaTypeMetadatas(typesBuilder,ddvStorageSpaceTypeSchemaType, ddvStorageSpaceTypeSchema);
    createDdvTaskStatusSchemaTypeMetadatas(typesBuilder,ddvTaskStatusSchemaType, ddvTaskStatusSchema);
    createDdvTaskTypeSchemaTypeMetadatas(typesBuilder,ddvTaskTypeSchemaType, ddvTaskTypeSchema);
    createDdvVariablePeriodSchemaTypeMetadatas(typesBuilder,ddvVariablePeriodSchemaType, ddvVariablePeriodSchema);
    createDdvYearTypeSchemaTypeMetadatas(typesBuilder,ddvYearTypeSchemaType, ddvYearTypeSchema);
    createDecommissioningListSchemaTypeMetadatas(typesBuilder,decommissioningListSchemaType, decommissioningListSchema);
    createDocumentSchemaTypeMetadatas(typesBuilder,documentSchemaType, document_emailSchema, documentSchema);
    createEmailToSendSchemaTypeMetadatas(typesBuilder,emailToSendSchemaType, emailToSendSchema);
    createEventSchemaTypeMetadatas(typesBuilder,eventSchemaType, eventSchema);
    createFacetSchemaTypeMetadatas(typesBuilder,facetSchemaType, facet_fieldSchema, facet_querySchema, facetSchema);
    createFilingSpaceSchemaTypeMetadatas(typesBuilder,filingSpaceSchemaType, filingSpaceSchema);
    createFolderSchemaTypeMetadatas(typesBuilder,folderSchemaType, folderSchema);
    createPrintableSchemaTypeMetadatas(typesBuilder,printableSchemaType, printable_labelSchema, printable_reportSchema, printableSchema);
    createReportSchemaTypeMetadatas(typesBuilder,reportSchemaType, reportSchema);
    createRetentionRuleSchemaTypeMetadatas(typesBuilder,retentionRuleSchemaType, retentionRuleSchema);
    createSavedSearchSchemaTypeMetadatas(typesBuilder,savedSearchSchemaType, savedSearchSchema);
    createSearchEventSchemaTypeMetadatas(typesBuilder,searchEventSchemaType, searchEventSchema);
    createStorageSpaceSchemaTypeMetadatas(typesBuilder,storageSpaceSchemaType, storageSpaceSchema);
    createTaskSchemaTypeMetadatas(typesBuilder,taskSchemaType, task_approvalSchema, taskSchema);
    createTemporaryRecordSchemaTypeMetadatas(typesBuilder,temporaryRecordSchemaType, temporaryRecord_ConsolidatedPdfSchema, temporaryRecord_batchProcessReportSchema, temporaryRecord_exportAuditSchema, temporaryRecord_importAuditSchema, temporaryRecord_scriptReportSchema, temporaryRecord_sipArchiveSchema, temporaryRecord_vaultScanReportSchema, temporaryRecordSchema);
    createThesaurusConfigSchemaTypeMetadatas(typesBuilder,thesaurusConfigSchemaType, thesaurusConfigSchema);
    createUniformSubdivisionSchemaTypeMetadatas(typesBuilder,uniformSubdivisionSchemaType, uniformSubdivisionSchema);
    createUserDocumentSchemaTypeMetadatas(typesBuilder,userDocumentSchemaType, userDocumentSchema);
    createUserFolderSchemaTypeMetadatas(typesBuilder,userFolderSchemaType, userFolderSchema);
    createUserTaskSchemaTypeMetadatas(typesBuilder,userTaskSchemaType, userTask_borrowExtensionRequestSchema, userTask_borrowRequestSchema, userTask_reactivationRequestSchema, userTask_returnRequestSchema, userTaskSchema);
    createWorkflowSchemaTypeMetadatas(typesBuilder,workflowSchemaType, workflowSchema);
    createWorkflowInstanceSchemaTypeMetadatas(typesBuilder,workflowInstanceSchemaType, workflowInstanceSchema);
    administrativeUnitSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    administrativeUnitSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    administrativeUnitSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    administrativeUnitSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    administrativeUnitSchema.get("filingSpacesAdmins").defineDataEntry().asCopied(administrativeUnitSchema.get("filingSpaces"), typesBuilder.getMetadata("filingSpace_default_administrators"));
    administrativeUnitSchema.get("filingSpacesUsers").defineDataEntry().asCopied(administrativeUnitSchema.get("filingSpaces"), typesBuilder.getMetadata("filingSpace_default_users"));
    administrativeUnitSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    administrativeUnitSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    administrativeUnitSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    administrativeUnitSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    administrativeUnitSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    administrativeUnitSchema.get("unitAncestors").defineDataEntry().asCalculated(AdministrativeUnitAncestorsCalculator.class);
    bagInfoSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    bagInfoSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    bagInfoSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    bagInfoSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    bagInfoSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    bagInfoSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    bagInfoSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    bagInfoSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    bagInfoSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    cartSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    cartSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    cartSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    cartSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    cartSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    cartSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    cartSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    cartSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    cartSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    categorySchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    categorySchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    categorySchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    categorySchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    categorySchema.get("copyRetentionRulesOnDocumentTypes").defineDataEntry().asCalculated(CategoryCopyRetentionRulesOnDocumentTypesCalculator.class);
    categorySchema.get("level").defineDataEntry().asCalculated(CategoryLevelCalculator.class);
    categorySchema.get("linkable").defineDataEntry().asCalculated(CategoryIsLinkableCalculator.class);
    categorySchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    categorySchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    categorySchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    categorySchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    categorySchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    containerRecordSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    containerRecordSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    containerRecordSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    containerRecordSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    containerRecordSchema.get("availableSize").defineDataEntry().asCalculated(ContainerRecordAvailableSizeCalculator.class);
    containerRecordSchema.get("linearSize").defineDataEntry().asCalculated(ContainerRecordLinearSizeCalculator.class);
    containerRecordSchema.get("linearSizeSum").defineDataEntry().asSum(typesBuilder.getMetadata("folder_default_container"), typesBuilder.getMetadata("folder_default_linearSize"));
    containerRecordSchema.get("localization").defineDataEntry().asCalculated(ContainerRecordLocalizationCalculator.class);
    containerRecordSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    containerRecordSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    containerRecordSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    containerRecordSchema.get("title").defineDataEntry().asCalculated(ContainerTitleCalculator.class);
    containerRecordSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    containerRecordSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    containerRecordSchema.get("visibleInTrees").defineDataEntry().asCalculated(ContainerRecordTreeVisibilityCalculator.class);
    ddvContainerRecordTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvContainerRecordTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvContainerRecordTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    ddvContainerRecordTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvContainerRecordTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvContainerRecordTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvContainerRecordTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvContainerRecordTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    ddvContainerRecordTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    ddvDocumentTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvDocumentTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvDocumentTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    ddvDocumentTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvDocumentTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvDocumentTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvDocumentTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvDocumentTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    ddvDocumentTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    ddvFolderTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvFolderTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvFolderTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    ddvFolderTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvFolderTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvFolderTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvFolderTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvFolderTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    ddvFolderTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    ddvMediumTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvMediumTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvMediumTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    ddvMediumTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvMediumTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvMediumTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvMediumTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvMediumTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    ddvMediumTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    ddvStorageSpaceTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvStorageSpaceTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvStorageSpaceTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    ddvStorageSpaceTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvStorageSpaceTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvStorageSpaceTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvStorageSpaceTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvStorageSpaceTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    ddvStorageSpaceTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    ddvVariablePeriodSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvVariablePeriodSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvVariablePeriodSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    ddvVariablePeriodSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvVariablePeriodSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvVariablePeriodSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvVariablePeriodSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvVariablePeriodSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    ddvVariablePeriodSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    ddvYearTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvYearTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvYearTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    ddvYearTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvYearTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvYearTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvYearTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvYearTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    ddvYearTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    decommissioningListSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    decommissioningListSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    decommissioningListSchema.get("analogicalMedium").defineDataEntry().asCalculated(DecomListHasAnalogicalMediumTypesCalculator.class);
    decommissioningListSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    decommissioningListSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    decommissioningListSchema.get("containers").defineDataEntry().asCalculated(DecomListContainersCalculator.class);
    decommissioningListSchema.get("electronicMedium").defineDataEntry().asCalculated(DecomListHasElectronicMediumTypesCalculator.class);
    decommissioningListSchema.get("folders").defineDataEntry().asCalculated(DecomListFoldersCalculator.class);
    decommissioningListSchema.get("foldersMediaTypes").defineDataEntry().asCopied(decommissioningListSchema.get("folders"), typesBuilder.getMetadata("folder_default_mediaType"));
    decommissioningListSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    decommissioningListSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    decommissioningListSchema.get("pendingValidations").defineDataEntry().asCalculated(PendingValidationCalculator.class);
    decommissioningListSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    decommissioningListSchema.get("status").defineDataEntry().asCalculated(DecomListStatusCalculator2.class);
    decommissioningListSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    decommissioningListSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    decommissioningListSchema.get("uniform").defineDataEntry().asCalculated(DecomListIsUniform.class);
    decommissioningListSchema.get("uniformCategory").defineDataEntry().asCalculated(DecomListUniformCategoryCalculator2.class);
    decommissioningListSchema.get("uniformCopyRule").defineDataEntry().asCalculated(DecomListUniformCopyRuleCalculator2.class);
    decommissioningListSchema.get("uniformCopyType").defineDataEntry().asCalculated(DecomListUniformCopyTypeCalculator2.class);
    decommissioningListSchema.get("uniformRule").defineDataEntry().asCalculated(DecomListUniformRuleCalculator2.class);
    documentSchema.get("actualDepositDate").defineDataEntry().asCalculated(DocumentActualDepositDateCalculator.class);
    documentSchema.get("actualDestructionDate").defineDataEntry().asCalculated(DocumentActualDestructionDateCalculator.class);
    documentSchema.get("actualTransferDate").defineDataEntry().asCalculated(DocumentActualTransferDateCalculator.class);
    documentSchema.get("administrativeUnit").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_administrativeUnit"));
    documentSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    documentSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    documentSchema.get("applicableCopyRule").defineDataEntry().asCalculated(DocumentApplicableCopyRulesCalculator.class);
    documentSchema.get("archivisticStatus").defineDataEntry().asCalculated(DocumentArchivisticStatusCalculator.class);
    documentSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    documentSchema.get("autocomplete").defineDataEntry().asCalculated(DocumentAutocompleteFieldCalculator.class);
    documentSchema.get("caption").defineDataEntry().asCalculated(DocumentCaptionCalculator.class);
    documentSchema.get("category").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_category"));
    documentSchema.get("categoryCode").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_categoryCode"));
    documentSchema.get("closingDate").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_closingDate"));
    documentSchema.get("confidential").defineDataEntry().asCalculated(DocumentConfidentialCalculator.class);
    documentSchema.get("contentCheckedOutBy").defineDataEntry().asCalculated(DocumentCheckedOutUserCalculator2.class);
    documentSchema.get("contentHashes").defineDataEntry().asCalculated(DocumentContentHashesCalculator.class);
    documentSchema.get("copyStatus").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_copyStatus"));
    documentSchema.get("documentType").defineDataEntry().asCopied(documentSchema.get("type"), typesBuilder.getMetadata("ddvDocumentType_default_title"));
    documentSchema.get("essential").defineDataEntry().asCalculated(DocumentEssentialCalculator.class);
    documentSchema.get("expectedDepositDate").defineDataEntry().asCalculated(DocumentExpectedDepositDateCalculator.class);
    documentSchema.get("expectedDestructionDate").defineDataEntry().asCalculated(DocumentExpectedDestructionDateCalculator.class);
    documentSchema.get("expectedTransferDate").defineDataEntry().asCalculated(DocumentExpectedTransferDateCalculator.class);
    documentSchema.get("filingSpace").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_filingSpace"));
    documentSchema.get("hasContent").defineDataEntry().asCalculated(DocumentHasContentCalculator.class);
    documentSchema.get("inheritedRetentionRule").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_retentionRule"));
    documentSchema.get("mainCopyRule").defineDataEntry().asCalculated(DocumentMainCopyRuleCalculator2.class);
    documentSchema.get("mimetype").defineDataEntry().asCalculated(DocumentMimeTypeCalculator.class);
    documentSchema.get("openingDate").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_openingDate"));
    documentSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    documentSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    documentSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    documentSchema.get("retentionRule").defineDataEntry().asCalculated(DocumentRetentionRuleCalculator.class);
    documentSchema.get("sameInactiveFateAsFolder").defineDataEntry().asCalculated(DocumentIsSameInactiveFateAsFolderCalculator.class);
    documentSchema.get("sameSemiActiveFateAsFolder").defineDataEntry().asCalculated(DocumentIsSameSemiActiveFateAsFolderCalculator.class);
    documentSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    documentSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    documentSchema.get("version").defineDataEntry().asCalculated(DocumentVersionCalculator.class);
    documentSchema.get("visibleInTrees").defineDataEntry().asCopied(documentSchema.get("folder"), typesBuilder.getMetadata("folder_default_visibleInTrees"));
    filingSpaceSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    filingSpaceSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    filingSpaceSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    filingSpaceSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    filingSpaceSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    filingSpaceSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    filingSpaceSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    filingSpaceSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    filingSpaceSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    folderSchema.get("activeRetentionPeriodCode").defineDataEntry().asCalculated(FolderRetentionPeriodCodeCalculator.FolderActiveRetentionPeriodCodeCalculator.class);
    folderSchema.get("activeRetentionType").defineDataEntry().asCalculated(FolderActiveRetentionTypeCalculator.class);
    folderSchema.get("administrativeUnit").defineDataEntry().asCalculated(FolderAppliedAdministrativeUnitCalculator.class);
    folderSchema.get("administrativeUnitAncestors").defineDataEntry().asCopied(folderSchema.get("administrativeUnit"), typesBuilder.getMetadata("administrativeUnit_default_unitAncestors"));
    folderSchema.get("administrativeUnitCode").defineDataEntry().asCopied(folderSchema.get("administrativeUnit"), typesBuilder.getMetadata("administrativeUnit_default_code"));
    folderSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    folderSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    folderSchema.get("applicableCopyRule").defineDataEntry().asCalculated(FolderApplicableCopyRuleCalculator.class);
    folderSchema.get("archivisticStatus").defineDataEntry().asCalculated(FolderArchivisticStatusCalculator2.class);
    folderSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    folderSchema.get("autocomplete").defineDataEntry().asCalculated(FolderAutocompleteFieldCalculator.class);
    folderSchema.get("caption").defineDataEntry().asCalculated(FolderCaptionCalculator.class);
    folderSchema.get("category").defineDataEntry().asCalculated(FolderApplicableCategoryCalculator.class);
    folderSchema.get("categoryCode").defineDataEntry().asCopied(folderSchema.get("category"), typesBuilder.getMetadata("category_default_code"));
    folderSchema.get("closingDate").defineDataEntry().asCalculated(FolderClosingDateCalculator2.class);
    folderSchema.get("confidential").defineDataEntry().asCalculated(FolderConfidentialCalculator.class);
    folderSchema.get("copyRulesExpectedDepositDates").defineDataEntry().asCalculated(FolderCopyRulesExpectedDepositDatesCalculator2.class);
    folderSchema.get("copyRulesExpectedDestructionDates").defineDataEntry().asCalculated(FolderCopyRulesExpectedDestructionDatesCalculator2.class);
    folderSchema.get("copyRulesExpectedTransferDates").defineDataEntry().asCalculated(FolderCopyRulesExpectedTransferDatesCalculator2.class);
    folderSchema.get("copyStatus").defineDataEntry().asCalculated(FolderCopyStatusCalculator3.class);
    folderSchema.get("documentsTokens").defineDataEntry().asUnion(typesBuilder.getMetadata("document_default_folder"), typesBuilder.getMetadata("document_default_tokensHierarchy"));
    folderSchema.get("essential").defineDataEntry().asCalculated(FolderEssentialCalculator.class);
    folderSchema.get("expectedDepositDate").defineDataEntry().asCalculated(FolderExpectedDepositDateCalculator2.class);
    folderSchema.get("expectedDestructionDate").defineDataEntry().asCalculated(FolderExpectedDestructionDateCalculator2.class);
    folderSchema.get("expectedTransferDate").defineDataEntry().asCalculated(FolderExpectedTransferDateCalculator2.class);
    folderSchema.get("filingSpace").defineDataEntry().asCalculated(FolderAppliedFilingSpaceCalculator.class);
    folderSchema.get("filingSpaceCode").defineDataEntry().asCopied(folderSchema.get("filingSpace"), typesBuilder.getMetadata("filingSpace_default_code"));
    folderSchema.get("folderType").defineDataEntry().asCopied(folderSchema.get("type"), typesBuilder.getMetadata("ddvFolderType_default_title"));
    Map<MetadataBuilder, List<MetadataBuilder>> folder_default_hasContentRefs = new HashMap<>();;
    folder_default_hasContentRefs.put(folderSchema.get("parentFolder"), asList(folderSchema.get("hasContent")));;
    folder_default_hasContentRefs.put(documentSchema.get("folder"), asList(documentSchema.get("hasContent")));;
    folderSchema.get("hasContent").defineDataEntry().asAggregatedOr(folder_default_hasContentRefs);
    folderSchema.get("inactiveDisposalType").defineDataEntry().asCalculated(FolderInactiveDisposalTypeCalculator.class);
    folderSchema.get("mainCopyRule").defineDataEntry().asCalculated(FolderMainCopyRuleCalculator2.class);
    folderSchema.get("mainCopyRuleCode").defineDataEntry().asCalculated(FolderMainCopyRuleCodeCalculator.class);
    folderSchema.get("mediaType").defineDataEntry().asCalculated(FolderMediaTypesCalculator.class);
    folderSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    folderSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    folderSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    folderSchema.get("retentionRule").defineDataEntry().asCalculated(FolderAppliedRetentionRuleCalculator.class);
    folderSchema.get("ruleAdminUnit").defineDataEntry().asCopied(folderSchema.get("retentionRule"), typesBuilder.getMetadata("retentionRule_default_administrativeUnits"));
    folderSchema.get("semiactiveRetentionPeriodCode").defineDataEntry().asCalculated(FolderRetentionPeriodCodeCalculator.FolderSemiActiveRetentionPeriodCodeCalculator.class);
    folderSchema.get("semiactiveRetentionType").defineDataEntry().asCalculated(FolderSemiActiveRetentionTypeCalculator.class);
    folderSchema.get("subFoldersTokens").defineDataEntry().asUnion(typesBuilder.getMetadata("folder_default_parentFolder"), typesBuilder.getMetadata("folder_default_tokensHierarchy"));
    folderSchema.get("summary").defineDataEntry().asCalculated(SummaryCalculator.class);
    folderSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    folderSchema.get("tokensHierarchy").defineDataEntry().asCalculated(FolderTokensOfHierarchyCalculator.class);
    folderSchema.get("uniformSubdivision").defineDataEntry().asCalculated(FolderAppliedUniformSubdivisionCalculator.class);
    folderSchema.get("uniqueKey").defineDataEntry().asCalculated(FolderUniqueKeyCalculator.class);
    folderSchema.get("visibleInTrees").defineDataEntry().asCalculated(FolderTreeVisibilityCalculator.class);
    retentionRuleSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    retentionRuleSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    retentionRuleSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    retentionRuleSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    retentionRuleSchema.get("documentTypes").defineDataEntry().asCalculated(RuleDocumentTypesCalculator2.class);
    retentionRuleSchema.get("folderTypes").defineDataEntry().asCalculated(RuleFolderTypesCalculator.class);
    retentionRuleSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    retentionRuleSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    retentionRuleSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    retentionRuleSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    retentionRuleSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    retentionRuleSchema.get("yearTypes").defineDataEntry().asCalculated(RuleYearTypesCalculator.class);
    retentionRuleSchema.get("yearTypesYearEnd").defineDataEntry().asCopied(retentionRuleSchema.get("yearTypes"), typesBuilder.getMetadata("ddvYearType_default_yearEnd"));
    storageSpaceSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    storageSpaceSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    storageSpaceSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    storageSpaceSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    storageSpaceSchema.get("availableSize").defineDataEntry().asCalculated(StorageSpaceAvailableSizeCalculator.class);
    storageSpaceSchema.get("childLinearSizeSum").defineDataEntry().asSum(typesBuilder.getMetadata("storageSpace_default_parentStorageSpace"), typesBuilder.getMetadata("storageSpace_default_capacity"));
    storageSpaceSchema.get("linearSize").defineDataEntry().asCalculated(StorageSpaceLinearSizeCalculator.class);
    storageSpaceSchema.get("linearSizeSum").defineDataEntry().asSum(typesBuilder.getMetadata("containerRecord_default_storageSpace"), typesBuilder.getMetadata("containerRecord_default_capacity"));
    storageSpaceSchema.get("numberOfChild").defineDataEntry().asReferenceCount(typesBuilder.getMetadata("storageSpace_default_parentStorageSpace"));
    storageSpaceSchema.get("numberOfContainers").defineDataEntry().asReferenceCount(typesBuilder.getMetadata("containerRecord_default_storageSpace"));
    storageSpaceSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    storageSpaceSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    storageSpaceSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    storageSpaceSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    storageSpaceSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    uniformSubdivisionSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    uniformSubdivisionSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    uniformSubdivisionSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    uniformSubdivisionSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    uniformSubdivisionSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    uniformSubdivisionSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    uniformSubdivisionSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    uniformSubdivisionSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    uniformSubdivisionSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    userDocumentSchema.get("contentHashes").defineDataEntry().asCalculated(UserDocumentContentHashesCalculator.class);
  }

  private void createCapsuleSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder capsuleSchemaType, MetadataSchemaBuilder capsuleSchema) {
  }

  private void createDocumentSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder documentSchemaType, MetadataSchemaBuilder document_emailSchema, MetadataSchemaBuilder documentSchema) {
    MetadataBuilder document_email_emailAttachmentsList = document_emailSchema.create("emailAttachmentsList").setType(MetadataValueType.STRING);
    document_email_emailAttachmentsList.setMultivalue(true);
    document_email_emailAttachmentsList.setUndeletable(true);
    document_email_emailAttachmentsList.setEssential(true);
    document_email_emailAttachmentsList.setDuplicable(true);
    MetadataBuilder document_email_emailBCCTo = document_emailSchema.create("emailBCCTo").setType(MetadataValueType.STRING);
    document_email_emailBCCTo.setMultivalue(true);
    document_email_emailBCCTo.setUndeletable(true);
    document_email_emailBCCTo.setDuplicable(true);
    document_email_emailBCCTo.getPopulateConfigsBuilder().setProperties(asList("bcc"));
    MetadataBuilder document_email_emailCCTo = document_emailSchema.create("emailCCTo").setType(MetadataValueType.STRING);
    document_email_emailCCTo.setMultivalue(true);
    document_email_emailCCTo.setUndeletable(true);
    document_email_emailCCTo.setDuplicable(true);
    document_email_emailCCTo.getPopulateConfigsBuilder().setProperties(asList("cc"));
    MetadataBuilder document_email_emailCompany = document_emailSchema.create("emailCompany").setType(MetadataValueType.STRING);
    document_email_emailCompany.setUndeletable(true);
    document_email_emailCompany.setDuplicable(true);
    MetadataBuilder document_email_emailFrom = document_emailSchema.create("emailFrom").setType(MetadataValueType.STRING);
    document_email_emailFrom.setUndeletable(true);
    document_email_emailFrom.setDuplicable(true);
    document_email_emailFrom.getPopulateConfigsBuilder().setProperties(asList("from"));
    MetadataBuilder document_email_emailInNameOf = document_emailSchema.create("emailInNameOf").setType(MetadataValueType.STRING);
    document_email_emailInNameOf.setUndeletable(true);
    document_email_emailInNameOf.setDuplicable(true);
    MetadataBuilder document_email_emailObject = document_emailSchema.create("emailObject").setType(MetadataValueType.STRING);
    document_email_emailObject.setUndeletable(true);
    document_email_emailObject.setEssential(true);
    document_email_emailObject.setDuplicable(true);
    document_email_emailObject.getPopulateConfigsBuilder().setProperties(asList("subject"));
    MetadataBuilder document_email_emailReceivedOn = document_emailSchema.create("emailReceivedOn").setType(MetadataValueType.DATE_TIME);
    document_email_emailReceivedOn.setUndeletable(true);
    document_email_emailReceivedOn.setDuplicable(true);
    MetadataBuilder document_email_emailSentOn = document_emailSchema.create("emailSentOn").setType(MetadataValueType.DATE_TIME);
    document_email_emailSentOn.setUndeletable(true);
    document_email_emailSentOn.setDuplicable(true);
    MetadataBuilder document_email_emailTo = document_emailSchema.create("emailTo").setType(MetadataValueType.STRING);
    document_email_emailTo.setMultivalue(true);
    document_email_emailTo.setUndeletable(true);
    document_email_emailTo.setDuplicable(true);
    document_email_emailTo.getPopulateConfigsBuilder().setProperties(asList("to"));
    MetadataBuilder document_email_subjectToBroadcastRule = document_emailSchema.create("subjectToBroadcastRule").setType(MetadataValueType.BOOLEAN);
    document_email_subjectToBroadcastRule.setUndeletable(true);
    document_email_subjectToBroadcastRule.setDuplicable(true);
    MetadataBuilder document_actualDepositDate = documentSchema.create("actualDepositDate").setType(MetadataValueType.DATE);
    document_actualDepositDate.setUndeletable(true);
    document_actualDepositDate.setEssential(true);
    MetadataBuilder document_actualDepositDateEntered = documentSchema.create("actualDepositDateEntered").setType(MetadataValueType.DATE);
    document_actualDepositDateEntered.setUndeletable(true);
    document_actualDepositDateEntered.setDuplicable(true);
    MetadataBuilder document_actualDestructionDate = documentSchema.create("actualDestructionDate").setType(MetadataValueType.DATE);
    document_actualDestructionDate.setUndeletable(true);
    document_actualDestructionDate.setEssential(true);
    MetadataBuilder document_actualDestructionDateEntered = documentSchema.create("actualDestructionDateEntered").setType(MetadataValueType.DATE);
    document_actualDestructionDateEntered.setUndeletable(true);
    document_actualDestructionDateEntered.setDuplicable(true);
    MetadataBuilder document_actualTransferDate = documentSchema.create("actualTransferDate").setType(MetadataValueType.DATE);
    document_actualTransferDate.setUndeletable(true);
    document_actualTransferDate.setEssential(true);
    MetadataBuilder document_actualTransferDateEntered = documentSchema.create("actualTransferDateEntered").setType(MetadataValueType.DATE);
    document_actualTransferDateEntered.setUndeletable(true);
    document_actualTransferDateEntered.setDuplicable(true);
    MetadataBuilder document_administrativeUnit = documentSchema.create("administrativeUnit").setType(MetadataValueType.REFERENCE);
    document_administrativeUnit.setUndeletable(true);
    document_administrativeUnit.setEssential(true);
    document_administrativeUnit.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder document_alertUsersWhenAvailable = documentSchema.create("alertUsersWhenAvailable").setType(MetadataValueType.REFERENCE);
    document_alertUsersWhenAvailable.setMultivalue(true);
    document_alertUsersWhenAvailable.setUndeletable(true);
    document_alertUsersWhenAvailable.setDuplicable(true);
    document_alertUsersWhenAvailable.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder document_allReferences = documentSchema.create("allReferences").setType(MetadataValueType.STRING);
    document_allReferences.setMultivalue(true);
    document_allReferences.setSystemReserved(true);
    document_allReferences.setUndeletable(true);
    document_allReferences.setEssential(true);
    document_allReferences.setMultiLingual(false);
    MetadataBuilder document_allRemovedAuths = documentSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    document_allRemovedAuths.setMultivalue(true);
    document_allRemovedAuths.setSystemReserved(true);
    document_allRemovedAuths.setUndeletable(true);
    document_allRemovedAuths.setEssential(true);
    document_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder document_applicableCopyRule = documentSchema.create("applicableCopyRule").setType(MetadataValueType.STRUCTURE);
    document_applicableCopyRule.setMultivalue(true);
    document_applicableCopyRule.setUndeletable(true);
    document_applicableCopyRule.defineStructureFactory(CopyRetentionRuleInRuleFactory.class);
    MetadataBuilder document_archivisticStatus = documentSchema.create("archivisticStatus").setType(MetadataValueType.ENUM);
    document_archivisticStatus.setUndeletable(true);
    document_archivisticStatus.setEssential(true);
    document_archivisticStatus.setEssentialInSummary(true);
    document_archivisticStatus.defineAsEnum(FolderStatus.class);
    MetadataBuilder document_attachedAncestors = documentSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    document_attachedAncestors.setMultivalue(true);
    document_attachedAncestors.setSystemReserved(true);
    document_attachedAncestors.setUndeletable(true);
    document_attachedAncestors.setEssential(true);
    document_attachedAncestors.setMultiLingual(false);
    MetadataBuilder document_author = documentSchema.create("author").setType(MetadataValueType.STRING);
    document_author.setUndeletable(true);
    document_author.setEssential(true);
    document_author.setDuplicable(true);
    document_author.getPopulateConfigsBuilder().setProperties(asList("author"));
    MetadataBuilder document_autocomplete = documentSchema.create("autocomplete").setType(MetadataValueType.STRING);
    document_autocomplete.setMultivalue(true);
    document_autocomplete.setSystemReserved(true);
    document_autocomplete.setUndeletable(true);
    document_autocomplete.setEssential(true);
    document_autocomplete.setMultiLingual(true);
    MetadataBuilder document_borrowed = documentSchema.create("borrowed").setType(MetadataValueType.BOOLEAN);
    document_borrowed.setUndeletable(true);
    document_borrowed.setDuplicable(true);
    MetadataBuilder document_caption = documentSchema.create("caption").setType(MetadataValueType.STRING);
    document_caption.setSystemReserved(true);
    document_caption.setUndeletable(true);
    document_caption.setEssential(true);
    document_caption.setMultiLingual(false);
    document_caption.setSortable(true);
    MetadataBuilder document_category = documentSchema.create("category").setType(MetadataValueType.REFERENCE);
    document_category.setUndeletable(true);
    document_category.setEssential(true);
    document_category.defineReferencesTo(types.getSchemaType("category"));
    MetadataBuilder document_categoryCode = documentSchema.create("categoryCode").setType(MetadataValueType.STRING);
    document_categoryCode.setUndeletable(true);
    MetadataBuilder document_closingDate = documentSchema.create("closingDate").setType(MetadataValueType.DATE);
    document_closingDate.setUndeletable(true);
    document_closingDate.setEssential(true);
    MetadataBuilder document_comments = documentSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    document_comments.setMultivalue(true);
    document_comments.setUndeletable(true);
    document_comments.setDuplicable(true);
    document_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder document_company = documentSchema.create("company").setType(MetadataValueType.STRING);
    document_company.setUndeletable(true);
    document_company.setDuplicable(true);
    document_company.getPopulateConfigsBuilder().setProperties(asList("company"));
    MetadataBuilder document_confidential = documentSchema.create("confidential").setType(MetadataValueType.BOOLEAN);
    MetadataBuilder document_content = documentSchema.create("content").setType(MetadataValueType.CONTENT);
    document_content.setUndeletable(true);
    document_content.setEssential(true);
    document_content.setEssentialInSummary(true);
    document_content.setSearchable(true);
    document_content.setDuplicable(true);
    document_content.defineStructureFactory(ContentFactory.class);
    MetadataBuilder document_contentCheckedOutBy = documentSchema.create("contentCheckedOutBy").setType(MetadataValueType.REFERENCE);
    document_contentCheckedOutBy.setUndeletable(true);
    document_contentCheckedOutBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder document_contentHashes = documentSchema.create("contentHashes").setType(MetadataValueType.STRING);
    document_contentHashes.setMultivalue(true);
    document_contentHashes.setUndeletable(true);
    MetadataBuilder document_copyStatus = documentSchema.create("copyStatus").setType(MetadataValueType.ENUM);
    document_copyStatus.defineAsEnum(CopyType.class);
    MetadataBuilder document_createdBy = documentSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    document_createdBy.setSystemReserved(true);
    document_createdBy.setUndeletable(true);
    document_createdBy.setEssential(true);
    document_createdBy.setMultiLingual(false);
    document_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder document_createdOn = documentSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    document_createdOn.setSystemReserved(true);
    document_createdOn.setUndeletable(true);
    document_createdOn.setEssential(true);
    document_createdOn.setMultiLingual(false);
    document_createdOn.setSortable(true);
    MetadataBuilder document_deleted = documentSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    document_deleted.setSystemReserved(true);
    document_deleted.setUndeletable(true);
    document_deleted.setEssential(true);
    document_deleted.setMultiLingual(false);
    document_deleted.setEssentialInSummary(true);
    MetadataBuilder document_denyTokens = documentSchema.create("denyTokens").setType(MetadataValueType.STRING);
    document_denyTokens.setMultivalue(true);
    document_denyTokens.setSystemReserved(true);
    document_denyTokens.setUndeletable(true);
    document_denyTokens.setEssential(true);
    document_denyTokens.setMultiLingual(false);
    document_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder document_description = documentSchema.create("description").setType(MetadataValueType.TEXT);
    document_description.setUndeletable(true);
    document_description.setEssentialInSummary(true);
    document_description.setSearchable(true);
    document_description.setDuplicable(true);
    MetadataBuilder document_detachedauthorizations = documentSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    document_detachedauthorizations.setSystemReserved(true);
    document_detachedauthorizations.setUndeletable(true);
    document_detachedauthorizations.setEssential(true);
    document_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder document_documentType = documentSchema.create("documentType").setType(MetadataValueType.STRING);
    document_documentType.setSystemReserved(true);
    document_documentType.setUndeletable(true);
    MetadataBuilder document_errorOnPhysicalDeletion = documentSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    document_errorOnPhysicalDeletion.setSystemReserved(true);
    document_errorOnPhysicalDeletion.setUndeletable(true);
    document_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder document_essential = documentSchema.create("essential").setType(MetadataValueType.BOOLEAN);
	  MetadataBuilder document_estimatedSize = documentSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  document_estimatedSize.setSystemReserved(true);
	  document_estimatedSize.setUndeletable(true);
	  document_estimatedSize.setEssential(true);
	  document_estimatedSize.setMultiLingual(false);
    MetadataBuilder document_expectedDepositDate = documentSchema.create("expectedDepositDate").setType(MetadataValueType.DATE);
    document_expectedDepositDate.setUndeletable(true);
    document_expectedDepositDate.setEssential(true);
    MetadataBuilder document_expectedDestructionDate = documentSchema.create("expectedDestructionDate").setType(MetadataValueType.DATE);
    document_expectedDestructionDate.setUndeletable(true);
    document_expectedDestructionDate.setEssential(true);
    MetadataBuilder document_expectedTransferDate = documentSchema.create("expectedTransferDate").setType(MetadataValueType.DATE);
    document_expectedTransferDate.setUndeletable(true);
    document_expectedTransferDate.setEssential(true);
    MetadataBuilder document_favorites = documentSchema.create("favorites").setType(MetadataValueType.STRING);
    document_favorites.setMultivalue(true);
    document_favorites.setDefaultRequirement(true);
    document_favorites.setSystemReserved(true);
    document_favorites.setUndeletable(true);
    MetadataBuilder document_filingSpace = documentSchema.create("filingSpace").setType(MetadataValueType.REFERENCE);
    document_filingSpace.setUndeletable(true);
    document_filingSpace.setEssential(true);
    document_filingSpace.defineReferencesTo(types.getSchemaType("filingSpace"));
    MetadataBuilder document_folder = documentSchema.create("folder").setType(MetadataValueType.REFERENCE);
    document_folder.setDefaultRequirement(true);
    document_folder.setUndeletable(true);
    document_folder.setEssential(true);
    document_folder.setDuplicable(true);
    document_folder.defineChildOfRelationshipToType(types.getSchemaType("folder"));
    MetadataBuilder document_formCreatedBy = documentSchema.create("formCreatedBy").setType(MetadataValueType.REFERENCE);
    document_formCreatedBy.setSystemReserved(true);
    document_formCreatedBy.setUndeletable(true);
    document_formCreatedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder document_formCreatedOn = documentSchema.create("formCreatedOn").setType(MetadataValueType.DATE_TIME);
    document_formCreatedOn.setSystemReserved(true);
    document_formCreatedOn.setUndeletable(true);
    MetadataBuilder document_formModifiedBy = documentSchema.create("formModifiedBy").setType(MetadataValueType.REFERENCE);
    document_formModifiedBy.setSystemReserved(true);
    document_formModifiedBy.setUndeletable(true);
    document_formModifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder document_formModifiedOn = documentSchema.create("formModifiedOn").setType(MetadataValueType.DATE_TIME);
    document_formModifiedOn.setSystemReserved(true);
    document_formModifiedOn.setUndeletable(true);
    MetadataBuilder document_hasContent = documentSchema.create("hasContent").setType(MetadataValueType.BOOLEAN);
    document_hasContent.setUndeletable(true);
    MetadataBuilder document_id = documentSchema.create("id").setType(MetadataValueType.STRING);
    document_id.setDefaultRequirement(true);
    document_id.setSystemReserved(true);
    document_id.setUndeletable(true);
    document_id.setEssential(true);
    document_id.setMultiLingual(false);
    document_id.setSearchable(true);
    document_id.setSortable(true);
    document_id.setUniqueValue(true);
    document_id.setUnmodifiable(true);
    MetadataBuilder document_inheritedRetentionRule = documentSchema.create("inheritedRetentionRule").setType(MetadataValueType.REFERENCE);
    document_inheritedRetentionRule.defineReferencesTo(types.getSchemaType("retentionRule"));
    MetadataBuilder document_keywords = documentSchema.create("keywords").setType(MetadataValueType.STRING);
    document_keywords.setMultivalue(true);
    document_keywords.setUndeletable(true);
    document_keywords.setSearchable(true);
    document_keywords.setDuplicable(true);
    document_keywords.getPopulateConfigsBuilder().setProperties(asList("keywords"));
    MetadataBuilder document_legacyIdentifier = documentSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    document_legacyIdentifier.setDefaultRequirement(true);
    document_legacyIdentifier.setSystemReserved(true);
    document_legacyIdentifier.setUndeletable(true);
    document_legacyIdentifier.setEssential(true);
    document_legacyIdentifier.setMultiLingual(false);
    document_legacyIdentifier.setSearchable(true);
    document_legacyIdentifier.setUniqueValue(true);
    document_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder document_logicallyDeletedOn = documentSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    document_logicallyDeletedOn.setSystemReserved(true);
    document_logicallyDeletedOn.setUndeletable(true);
    document_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder document_mainCopyRule = documentSchema.create("mainCopyRule").setType(MetadataValueType.STRUCTURE);
    document_mainCopyRule.setDefaultRequirement(true);
    document_mainCopyRule.setUndeletable(true);
    document_mainCopyRule.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder document_mainCopyRuleIdEntered = documentSchema.create("mainCopyRuleIdEntered").setType(MetadataValueType.STRING);
    document_mainCopyRuleIdEntered.setUndeletable(true);
    document_mainCopyRuleIdEntered.setDuplicable(true);
    MetadataBuilder document_manualTokens = documentSchema.create("manualTokens").setType(MetadataValueType.STRING);
    document_manualTokens.setMultivalue(true);
    document_manualTokens.setSystemReserved(true);
    document_manualTokens.setUndeletable(true);
    document_manualTokens.setEssential(true);
    document_manualTokens.setMultiLingual(false);
    document_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder document_markedForParsing = documentSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    document_markedForParsing.setSystemReserved(true);
    document_markedForParsing.setUndeletable(true);
    document_markedForParsing.setEssential(true);
    document_markedForParsing.setMultiLingual(false);
    MetadataBuilder document_markedForPreviewConversion = documentSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    document_markedForPreviewConversion.setSystemReserved(true);
    document_markedForPreviewConversion.setUndeletable(true);
    document_markedForPreviewConversion.setEssential(true);
    document_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder document_markedForReindexing = documentSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    document_markedForReindexing.setSystemReserved(true);
    document_markedForReindexing.setUndeletable(true);
    document_markedForReindexing.setEssential(true);
    document_markedForReindexing.setMultiLingual(false);
    MetadataBuilder document_migrationDataVersion = documentSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    document_migrationDataVersion.setSystemReserved(true);
    document_migrationDataVersion.setUndeletable(true);
    document_migrationDataVersion.setEssential(true);
    document_migrationDataVersion.setMultiLingual(false);
    document_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder document_mimetype = documentSchema.create("mimetype").setType(MetadataValueType.STRING);
    document_mimetype.setEssentialInSummary(true);
    MetadataBuilder document_modifiedBy = documentSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    document_modifiedBy.setSystemReserved(true);
    document_modifiedBy.setUndeletable(true);
    document_modifiedBy.setEssential(true);
    document_modifiedBy.setMultiLingual(false);
    document_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder document_modifiedOn = documentSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    document_modifiedOn.setSystemReserved(true);
    document_modifiedOn.setUndeletable(true);
    document_modifiedOn.setEssential(true);
    document_modifiedOn.setMultiLingual(false);
    document_modifiedOn.setSortable(true);
    MetadataBuilder document_openingDate = documentSchema.create("openingDate").setType(MetadataValueType.DATE);
    document_openingDate.setUndeletable(true);
    document_openingDate.setEssential(true);
    MetadataBuilder document_path = documentSchema.create("path").setType(MetadataValueType.STRING);
    document_path.setMultivalue(true);
    document_path.setSystemReserved(true);
    document_path.setUndeletable(true);
    document_path.setEssential(true);
    document_path.setMultiLingual(false);
    MetadataBuilder document_pathParts = documentSchema.create("pathParts").setType(MetadataValueType.STRING);
    document_pathParts.setMultivalue(true);
    document_pathParts.setSystemReserved(true);
    document_pathParts.setUndeletable(true);
    document_pathParts.setEssential(true);
    document_pathParts.setMultiLingual(false);
    MetadataBuilder document_principalpath = documentSchema.create("principalpath").setType(MetadataValueType.STRING);
    document_principalpath.setSystemReserved(true);
    document_principalpath.setUndeletable(true);
    document_principalpath.setEssential(true);
    document_principalpath.setMultiLingual(false);
    MetadataBuilder document_published = documentSchema.create("published").setType(MetadataValueType.BOOLEAN);
    document_published.setUndeletable(true);
    document_published.setDuplicable(true);
    document_published.setDefaultValue(false);
    MetadataBuilder document_removedauthorizations = documentSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    document_removedauthorizations.setMultivalue(true);
    document_removedauthorizations.setSystemReserved(true);
    document_removedauthorizations.setUndeletable(true);
    document_removedauthorizations.setEssential(true);
    document_removedauthorizations.setMultiLingual(false);
    MetadataBuilder document_retentionRule = documentSchema.create("retentionRule").setType(MetadataValueType.REFERENCE);
    document_retentionRule.setUndeletable(true);
    document_retentionRule.setEssential(true);
    document_retentionRule.defineReferencesTo(types.getSchemaType("retentionRule"));
    MetadataBuilder document_sameInactiveFateAsFolder = documentSchema.create("sameInactiveFateAsFolder").setType(MetadataValueType.BOOLEAN);
    document_sameInactiveFateAsFolder.setUndeletable(true);
    MetadataBuilder document_sameSemiActiveFateAsFolder = documentSchema.create("sameSemiActiveFateAsFolder").setType(MetadataValueType.BOOLEAN);
    document_sameSemiActiveFateAsFolder.setUndeletable(true);
    MetadataBuilder document_schema = documentSchema.create("schema").setType(MetadataValueType.STRING);
    document_schema.setDefaultRequirement(true);
    document_schema.setSystemReserved(true);
    document_schema.setUndeletable(true);
    document_schema.setEssential(true);
    document_schema.setMultiLingual(false);
    MetadataBuilder document_shareDenyTokens = documentSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    document_shareDenyTokens.setMultivalue(true);
    document_shareDenyTokens.setSystemReserved(true);
    document_shareDenyTokens.setUndeletable(true);
    document_shareDenyTokens.setEssential(true);
    document_shareDenyTokens.setMultiLingual(false);
    document_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder document_shareTokens = documentSchema.create("shareTokens").setType(MetadataValueType.STRING);
    document_shareTokens.setMultivalue(true);
    document_shareTokens.setSystemReserved(true);
    document_shareTokens.setUndeletable(true);
    document_shareTokens.setEssential(true);
    document_shareTokens.setMultiLingual(false);
    document_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder document_subject = documentSchema.create("subject").setType(MetadataValueType.STRING);
    document_subject.setUndeletable(true);
    document_subject.setDuplicable(true);
    document_subject.getPopulateConfigsBuilder().setProperties(asList("subject"));
    MetadataBuilder document_title = documentSchema.create("title").setType(MetadataValueType.STRING);
    document_title.setDefaultRequirement(true);
    document_title.setUndeletable(true);
    document_title.setEssential(true);
    document_title.setMultiLingual(false);
    document_title.setSchemaAutocomplete(true);
    document_title.setSearchable(true);
    document_title.setDuplicable(true);
    document_title.getPopulateConfigsBuilder().setProperties(asList("title"));
    MetadataBuilder document_tokens = documentSchema.create("tokens").setType(MetadataValueType.STRING);
    document_tokens.setMultivalue(true);
    document_tokens.setSystemReserved(true);
    document_tokens.setUndeletable(true);
    document_tokens.setEssential(true);
    document_tokens.setMultiLingual(false);
    MetadataBuilder document_tokensHierarchy = documentSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    document_tokensHierarchy.setMultivalue(true);
    document_tokensHierarchy.setSystemReserved(true);
    document_tokensHierarchy.setUndeletable(true);
    document_tokensHierarchy.setEssential(true);
    document_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder document_type = documentSchema.create("type").setType(MetadataValueType.REFERENCE);
    document_type.setUndeletable(true);
    document_type.setEssential(true);
    document_type.setDuplicable(true);
    document_type.defineReferencesTo(types.getSchemaType("ddvDocumentType"));
    MetadataBuilder document_version = documentSchema.create("version").setType(MetadataValueType.STRING);
    document_version.setUndeletable(true);
    MetadataBuilder document_visibleInTrees = documentSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    document_visibleInTrees.setSystemReserved(true);
    document_visibleInTrees.setUndeletable(true);
    document_visibleInTrees.setEssential(true);
    document_visibleInTrees.setMultiLingual(false);
    MetadataBuilder document_email_actualDepositDate = document_emailSchema.get("actualDepositDate");
    MetadataBuilder document_email_actualDepositDateEntered = document_emailSchema.get("actualDepositDateEntered");
    MetadataBuilder document_email_actualDestructionDate = document_emailSchema.get("actualDestructionDate");
    MetadataBuilder document_email_actualDestructionDateEntered = document_emailSchema.get("actualDestructionDateEntered");
    MetadataBuilder document_email_actualTransferDate = document_emailSchema.get("actualTransferDate");
    MetadataBuilder document_email_actualTransferDateEntered = document_emailSchema.get("actualTransferDateEntered");
    MetadataBuilder document_email_administrativeUnit = document_emailSchema.get("administrativeUnit");
    MetadataBuilder document_email_alertUsersWhenAvailable = document_emailSchema.get("alertUsersWhenAvailable");
    MetadataBuilder document_email_allReferences = document_emailSchema.get("allReferences");
    MetadataBuilder document_email_allRemovedAuths = document_emailSchema.get("allRemovedAuths");
    MetadataBuilder document_email_applicableCopyRule = document_emailSchema.get("applicableCopyRule");
    MetadataBuilder document_email_archivisticStatus = document_emailSchema.get("archivisticStatus");
    MetadataBuilder document_email_attachedAncestors = document_emailSchema.get("attachedAncestors");
    MetadataBuilder document_email_author = document_emailSchema.get("author");
    MetadataBuilder document_email_autocomplete = document_emailSchema.get("autocomplete");
    MetadataBuilder document_email_borrowed = document_emailSchema.get("borrowed");
    MetadataBuilder document_email_caption = document_emailSchema.get("caption");
    MetadataBuilder document_email_category = document_emailSchema.get("category");
    MetadataBuilder document_email_categoryCode = document_emailSchema.get("categoryCode");
    MetadataBuilder document_email_closingDate = document_emailSchema.get("closingDate");
    MetadataBuilder document_email_comments = document_emailSchema.get("comments");
    MetadataBuilder document_email_company = document_emailSchema.get("company");
    MetadataBuilder document_email_confidential = document_emailSchema.get("confidential");
    MetadataBuilder document_email_content = document_emailSchema.get("content");
    MetadataBuilder document_email_contentCheckedOutBy = document_emailSchema.get("contentCheckedOutBy");
    MetadataBuilder document_email_contentHashes = document_emailSchema.get("contentHashes");
    MetadataBuilder document_email_copyStatus = document_emailSchema.get("copyStatus");
    MetadataBuilder document_email_createdBy = document_emailSchema.get("createdBy");
    MetadataBuilder document_email_createdOn = document_emailSchema.get("createdOn");
    MetadataBuilder document_email_deleted = document_emailSchema.get("deleted");
    MetadataBuilder document_email_denyTokens = document_emailSchema.get("denyTokens");
    MetadataBuilder document_email_description = document_emailSchema.get("description");
    MetadataBuilder document_email_detachedauthorizations = document_emailSchema.get("detachedauthorizations");
    MetadataBuilder document_email_documentType = document_emailSchema.get("documentType");
    MetadataBuilder document_email_errorOnPhysicalDeletion = document_emailSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder document_email_essential = document_emailSchema.get("essential");
	  MetadataBuilder document_email_estimatedSize = document_emailSchema.get("estimatedSize");
    MetadataBuilder document_email_expectedDepositDate = document_emailSchema.get("expectedDepositDate");
    MetadataBuilder document_email_expectedDestructionDate = document_emailSchema.get("expectedDestructionDate");
    MetadataBuilder document_email_expectedTransferDate = document_emailSchema.get("expectedTransferDate");
    MetadataBuilder document_email_favorites = document_emailSchema.get("favorites");
    MetadataBuilder document_email_filingSpace = document_emailSchema.get("filingSpace");
    MetadataBuilder document_email_folder = document_emailSchema.get("folder");
    MetadataBuilder document_email_formCreatedBy = document_emailSchema.get("formCreatedBy");
    MetadataBuilder document_email_formCreatedOn = document_emailSchema.get("formCreatedOn");
    MetadataBuilder document_email_formModifiedBy = document_emailSchema.get("formModifiedBy");
    MetadataBuilder document_email_formModifiedOn = document_emailSchema.get("formModifiedOn");
    MetadataBuilder document_email_hasContent = document_emailSchema.get("hasContent");
    MetadataBuilder document_email_id = document_emailSchema.get("id");
    MetadataBuilder document_email_inheritedRetentionRule = document_emailSchema.get("inheritedRetentionRule");
    MetadataBuilder document_email_keywords = document_emailSchema.get("keywords");
    MetadataBuilder document_email_legacyIdentifier = document_emailSchema.get("legacyIdentifier");
    MetadataBuilder document_email_logicallyDeletedOn = document_emailSchema.get("logicallyDeletedOn");
    MetadataBuilder document_email_mainCopyRule = document_emailSchema.get("mainCopyRule");
    MetadataBuilder document_email_mainCopyRuleIdEntered = document_emailSchema.get("mainCopyRuleIdEntered");
    MetadataBuilder document_email_manualTokens = document_emailSchema.get("manualTokens");
    MetadataBuilder document_email_markedForParsing = document_emailSchema.get("markedForParsing");
    MetadataBuilder document_email_markedForPreviewConversion = document_emailSchema.get("markedForPreviewConversion");
    MetadataBuilder document_email_markedForReindexing = document_emailSchema.get("markedForReindexing");
    MetadataBuilder document_email_migrationDataVersion = document_emailSchema.get("migrationDataVersion");
    MetadataBuilder document_email_mimetype = document_emailSchema.get("mimetype");
    MetadataBuilder document_email_modifiedBy = document_emailSchema.get("modifiedBy");
    MetadataBuilder document_email_modifiedOn = document_emailSchema.get("modifiedOn");
    MetadataBuilder document_email_openingDate = document_emailSchema.get("openingDate");
    MetadataBuilder document_email_path = document_emailSchema.get("path");
    MetadataBuilder document_email_pathParts = document_emailSchema.get("pathParts");
    MetadataBuilder document_email_principalpath = document_emailSchema.get("principalpath");
    MetadataBuilder document_email_published = document_emailSchema.get("published");
    MetadataBuilder document_email_removedauthorizations = document_emailSchema.get("removedauthorizations");
    MetadataBuilder document_email_retentionRule = document_emailSchema.get("retentionRule");
    MetadataBuilder document_email_sameInactiveFateAsFolder = document_emailSchema.get("sameInactiveFateAsFolder");
    MetadataBuilder document_email_sameSemiActiveFateAsFolder = document_emailSchema.get("sameSemiActiveFateAsFolder");
    MetadataBuilder document_email_schema = document_emailSchema.get("schema");
    MetadataBuilder document_email_shareDenyTokens = document_emailSchema.get("shareDenyTokens");
    MetadataBuilder document_email_shareTokens = document_emailSchema.get("shareTokens");
    MetadataBuilder document_email_subject = document_emailSchema.get("subject");
    MetadataBuilder document_email_title = document_emailSchema.get("title");
    MetadataBuilder document_email_tokens = document_emailSchema.get("tokens");
    MetadataBuilder document_email_tokensHierarchy = document_emailSchema.get("tokensHierarchy");
    MetadataBuilder document_email_type = document_emailSchema.get("type");
    MetadataBuilder document_email_version = document_emailSchema.get("version");
    MetadataBuilder document_email_visibleInTrees = document_emailSchema.get("visibleInTrees");
  }

  private void createDdvTaskTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvTaskTypeSchemaType, MetadataSchemaBuilder ddvTaskTypeSchema) {
  }

  private void createCartSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder cartSchemaType, MetadataSchemaBuilder cartSchema) {
    MetadataBuilder cart_allReferences = cartSchema.create("allReferences").setType(MetadataValueType.STRING);
    cart_allReferences.setMultivalue(true);
    cart_allReferences.setSystemReserved(true);
    cart_allReferences.setUndeletable(true);
    cart_allReferences.setMultiLingual(false);
    MetadataBuilder cart_allRemovedAuths = cartSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    cart_allRemovedAuths.setMultivalue(true);
    cart_allRemovedAuths.setSystemReserved(true);
    cart_allRemovedAuths.setUndeletable(true);
    cart_allRemovedAuths.setEssential(true);
    cart_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder cart_attachedAncestors = cartSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    cart_attachedAncestors.setMultivalue(true);
    cart_attachedAncestors.setSystemReserved(true);
    cart_attachedAncestors.setUndeletable(true);
    cart_attachedAncestors.setEssential(true);
    cart_attachedAncestors.setMultiLingual(false);
    MetadataBuilder cart_autocomplete = cartSchema.create("autocomplete").setType(MetadataValueType.STRING);
    cart_autocomplete.setMultivalue(true);
    cart_autocomplete.setSystemReserved(true);
    cart_autocomplete.setUndeletable(true);
    cart_autocomplete.setEssential(true);
    cart_autocomplete.setMultiLingual(true);
    MetadataBuilder cart_caption = cartSchema.create("caption").setType(MetadataValueType.STRING);
    cart_caption.setSystemReserved(true);
    cart_caption.setUndeletable(true);
    cart_caption.setMultiLingual(false);
    cart_caption.setSortable(true);
    MetadataBuilder cart_createdBy = cartSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    cart_createdBy.setSystemReserved(true);
    cart_createdBy.setUndeletable(true);
    cart_createdBy.setMultiLingual(false);
    cart_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder cart_createdOn = cartSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    cart_createdOn.setSystemReserved(true);
    cart_createdOn.setUndeletable(true);
    cart_createdOn.setMultiLingual(false);
    cart_createdOn.setSortable(true);
    MetadataBuilder cart_deleted = cartSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    cart_deleted.setSystemReserved(true);
    cart_deleted.setUndeletable(true);
    cart_deleted.setMultiLingual(false);
    MetadataBuilder cart_denyTokens = cartSchema.create("denyTokens").setType(MetadataValueType.STRING);
    cart_denyTokens.setMultivalue(true);
    cart_denyTokens.setSystemReserved(true);
    cart_denyTokens.setUndeletable(true);
    cart_denyTokens.setMultiLingual(false);
    cart_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder cart_detachedauthorizations = cartSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    cart_detachedauthorizations.setSystemReserved(true);
    cart_detachedauthorizations.setUndeletable(true);
    cart_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder cart_errorOnPhysicalDeletion = cartSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    cart_errorOnPhysicalDeletion.setSystemReserved(true);
    cart_errorOnPhysicalDeletion.setUndeletable(true);
    cart_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder cart_estimatedSize = cartSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  cart_estimatedSize.setSystemReserved(true);
	  cart_estimatedSize.setUndeletable(true);
	  cart_estimatedSize.setMultiLingual(false);
    MetadataBuilder cart_id = cartSchema.create("id").setType(MetadataValueType.STRING);
    cart_id.setDefaultRequirement(true);
    cart_id.setSystemReserved(true);
    cart_id.setUndeletable(true);
    cart_id.setMultiLingual(false);
    cart_id.setSearchable(true);
    cart_id.setSortable(true);
    cart_id.setUniqueValue(true);
    cart_id.setUnmodifiable(true);
    MetadataBuilder cart_legacyIdentifier = cartSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    cart_legacyIdentifier.setDefaultRequirement(true);
    cart_legacyIdentifier.setSystemReserved(true);
    cart_legacyIdentifier.setUndeletable(true);
    cart_legacyIdentifier.setMultiLingual(false);
    cart_legacyIdentifier.setSearchable(true);
    cart_legacyIdentifier.setUniqueValue(true);
    cart_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder cart_logicallyDeletedOn = cartSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    cart_logicallyDeletedOn.setSystemReserved(true);
    cart_logicallyDeletedOn.setUndeletable(true);
    cart_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder cart_manualTokens = cartSchema.create("manualTokens").setType(MetadataValueType.STRING);
    cart_manualTokens.setMultivalue(true);
    cart_manualTokens.setSystemReserved(true);
    cart_manualTokens.setUndeletable(true);
    cart_manualTokens.setMultiLingual(false);
    cart_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder cart_markedForParsing = cartSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    cart_markedForParsing.setSystemReserved(true);
    cart_markedForParsing.setUndeletable(true);
    cart_markedForParsing.setMultiLingual(false);
    MetadataBuilder cart_markedForPreviewConversion = cartSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    cart_markedForPreviewConversion.setSystemReserved(true);
    cart_markedForPreviewConversion.setUndeletable(true);
    cart_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder cart_markedForReindexing = cartSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    cart_markedForReindexing.setSystemReserved(true);
    cart_markedForReindexing.setUndeletable(true);
    cart_markedForReindexing.setMultiLingual(false);
    MetadataBuilder cart_migrationDataVersion = cartSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    cart_migrationDataVersion.setSystemReserved(true);
    cart_migrationDataVersion.setUndeletable(true);
    cart_migrationDataVersion.setMultiLingual(false);
    cart_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder cart_modifiedBy = cartSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    cart_modifiedBy.setSystemReserved(true);
    cart_modifiedBy.setUndeletable(true);
    cart_modifiedBy.setMultiLingual(false);
    cart_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder cart_modifiedOn = cartSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    cart_modifiedOn.setSystemReserved(true);
    cart_modifiedOn.setUndeletable(true);
    cart_modifiedOn.setMultiLingual(false);
    cart_modifiedOn.setSortable(true);
    MetadataBuilder cart_owner = cartSchema.create("owner").setType(MetadataValueType.REFERENCE);
    cart_owner.setDefaultRequirement(true);
    cart_owner.setUndeletable(true);
    cart_owner.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder cart_path = cartSchema.create("path").setType(MetadataValueType.STRING);
    cart_path.setMultivalue(true);
    cart_path.setSystemReserved(true);
    cart_path.setUndeletable(true);
    cart_path.setMultiLingual(false);
    MetadataBuilder cart_pathParts = cartSchema.create("pathParts").setType(MetadataValueType.STRING);
    cart_pathParts.setMultivalue(true);
    cart_pathParts.setSystemReserved(true);
    cart_pathParts.setUndeletable(true);
    cart_pathParts.setMultiLingual(false);
    MetadataBuilder cart_principalpath = cartSchema.create("principalpath").setType(MetadataValueType.STRING);
    cart_principalpath.setSystemReserved(true);
    cart_principalpath.setUndeletable(true);
    cart_principalpath.setMultiLingual(false);
    MetadataBuilder cart_removedauthorizations = cartSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    cart_removedauthorizations.setMultivalue(true);
    cart_removedauthorizations.setSystemReserved(true);
    cart_removedauthorizations.setUndeletable(true);
    cart_removedauthorizations.setMultiLingual(false);
    MetadataBuilder cart_schema = cartSchema.create("schema").setType(MetadataValueType.STRING);
    cart_schema.setDefaultRequirement(true);
    cart_schema.setSystemReserved(true);
    cart_schema.setUndeletable(true);
    cart_schema.setMultiLingual(false);
    MetadataBuilder cart_shareDenyTokens = cartSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    cart_shareDenyTokens.setMultivalue(true);
    cart_shareDenyTokens.setSystemReserved(true);
    cart_shareDenyTokens.setUndeletable(true);
    cart_shareDenyTokens.setMultiLingual(false);
    cart_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder cart_shareTokens = cartSchema.create("shareTokens").setType(MetadataValueType.STRING);
    cart_shareTokens.setMultivalue(true);
    cart_shareTokens.setSystemReserved(true);
    cart_shareTokens.setUndeletable(true);
    cart_shareTokens.setMultiLingual(false);
    cart_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder cart_sharedWithUsers = cartSchema.create("sharedWithUsers").setType(MetadataValueType.REFERENCE);
    cart_sharedWithUsers.setMultivalue(true);
    cart_sharedWithUsers.setUndeletable(true);
    cart_sharedWithUsers.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder cart_title = cartSchema.create("title").setType(MetadataValueType.STRING);
    cart_title.setUndeletable(true);
    cart_title.setMultiLingual(false);
    cart_title.setSchemaAutocomplete(true);
    cart_title.setSearchable(true);
    MetadataBuilder cart_tokens = cartSchema.create("tokens").setType(MetadataValueType.STRING);
    cart_tokens.setMultivalue(true);
    cart_tokens.setSystemReserved(true);
    cart_tokens.setUndeletable(true);
    cart_tokens.setMultiLingual(false);
    MetadataBuilder cart_tokensHierarchy = cartSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    cart_tokensHierarchy.setMultivalue(true);
    cart_tokensHierarchy.setSystemReserved(true);
    cart_tokensHierarchy.setUndeletable(true);
    cart_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder cart_visibleInTrees = cartSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    cart_visibleInTrees.setSystemReserved(true);
    cart_visibleInTrees.setUndeletable(true);
    cart_visibleInTrees.setMultiLingual(false);
  }

  private void createDdvStorageSpaceTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvStorageSpaceTypeSchemaType, MetadataSchemaBuilder ddvStorageSpaceTypeSchema) {
    MetadataBuilder ddvStorageSpaceType_allReferences = ddvStorageSpaceTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_allReferences.setMultivalue(true);
    ddvStorageSpaceType_allReferences.setSystemReserved(true);
    ddvStorageSpaceType_allReferences.setUndeletable(true);
    ddvStorageSpaceType_allReferences.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_allRemovedAuths = ddvStorageSpaceTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_allRemovedAuths.setMultivalue(true);
    ddvStorageSpaceType_allRemovedAuths.setSystemReserved(true);
    ddvStorageSpaceType_allRemovedAuths.setUndeletable(true);
    ddvStorageSpaceType_allRemovedAuths.setEssential(true);
    ddvStorageSpaceType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_attachedAncestors = ddvStorageSpaceTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_attachedAncestors.setMultivalue(true);
    ddvStorageSpaceType_attachedAncestors.setSystemReserved(true);
    ddvStorageSpaceType_attachedAncestors.setUndeletable(true);
    ddvStorageSpaceType_attachedAncestors.setEssential(true);
    ddvStorageSpaceType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_autocomplete = ddvStorageSpaceTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_autocomplete.setMultivalue(true);
    ddvStorageSpaceType_autocomplete.setSystemReserved(true);
    ddvStorageSpaceType_autocomplete.setUndeletable(true);
    ddvStorageSpaceType_autocomplete.setEssential(true);
    ddvStorageSpaceType_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvStorageSpaceType_caption = ddvStorageSpaceTypeSchema.create("caption").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_caption.setSystemReserved(true);
    ddvStorageSpaceType_caption.setUndeletable(true);
    ddvStorageSpaceType_caption.setMultiLingual(false);
    ddvStorageSpaceType_caption.setSortable(true);
    MetadataBuilder ddvStorageSpaceType_code = ddvStorageSpaceTypeSchema.create("code").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_code.setDefaultRequirement(true);
    ddvStorageSpaceType_code.setUndeletable(true);
    ddvStorageSpaceType_code.setSchemaAutocomplete(true);
    ddvStorageSpaceType_code.setSearchable(true);
    ddvStorageSpaceType_code.setUniqueValue(true);
    MetadataBuilder ddvStorageSpaceType_comments = ddvStorageSpaceTypeSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvStorageSpaceType_comments.setMultivalue(true);
    ddvStorageSpaceType_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvStorageSpaceType_createdBy = ddvStorageSpaceTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvStorageSpaceType_createdBy.setSystemReserved(true);
    ddvStorageSpaceType_createdBy.setUndeletable(true);
    ddvStorageSpaceType_createdBy.setMultiLingual(false);
    ddvStorageSpaceType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvStorageSpaceType_createdOn = ddvStorageSpaceTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvStorageSpaceType_createdOn.setSystemReserved(true);
    ddvStorageSpaceType_createdOn.setUndeletable(true);
    ddvStorageSpaceType_createdOn.setMultiLingual(false);
    ddvStorageSpaceType_createdOn.setSortable(true);
    MetadataBuilder ddvStorageSpaceType_deleted = ddvStorageSpaceTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvStorageSpaceType_deleted.setSystemReserved(true);
    ddvStorageSpaceType_deleted.setUndeletable(true);
    ddvStorageSpaceType_deleted.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_denyTokens = ddvStorageSpaceTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_denyTokens.setMultivalue(true);
    ddvStorageSpaceType_denyTokens.setSystemReserved(true);
    ddvStorageSpaceType_denyTokens.setUndeletable(true);
    ddvStorageSpaceType_denyTokens.setMultiLingual(false);
    ddvStorageSpaceType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvStorageSpaceType_description = ddvStorageSpaceTypeSchema.create("description").setType(MetadataValueType.TEXT);
    ddvStorageSpaceType_description.setUndeletable(true);
    ddvStorageSpaceType_description.setMultiLingual(true);
    ddvStorageSpaceType_description.setEssentialInSummary(true);
    ddvStorageSpaceType_description.setSearchable(true);
    MetadataBuilder ddvStorageSpaceType_detachedauthorizations = ddvStorageSpaceTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvStorageSpaceType_detachedauthorizations.setSystemReserved(true);
    ddvStorageSpaceType_detachedauthorizations.setUndeletable(true);
    ddvStorageSpaceType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_errorOnPhysicalDeletion = ddvStorageSpaceTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvStorageSpaceType_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvStorageSpaceType_errorOnPhysicalDeletion.setUndeletable(true);
    ddvStorageSpaceType_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder ddvStorageSpaceType_estimatedSize = ddvStorageSpaceTypeSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  ddvStorageSpaceType_estimatedSize.setSystemReserved(true);
	  ddvStorageSpaceType_estimatedSize.setUndeletable(true);
	  ddvStorageSpaceType_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_id = ddvStorageSpaceTypeSchema.create("id").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_id.setDefaultRequirement(true);
    ddvStorageSpaceType_id.setSystemReserved(true);
    ddvStorageSpaceType_id.setUndeletable(true);
    ddvStorageSpaceType_id.setMultiLingual(false);
    ddvStorageSpaceType_id.setSearchable(true);
    ddvStorageSpaceType_id.setSortable(true);
    ddvStorageSpaceType_id.setUniqueValue(true);
    ddvStorageSpaceType_id.setUnmodifiable(true);
    MetadataBuilder ddvStorageSpaceType_legacyIdentifier = ddvStorageSpaceTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_legacyIdentifier.setDefaultRequirement(true);
    ddvStorageSpaceType_legacyIdentifier.setSystemReserved(true);
    ddvStorageSpaceType_legacyIdentifier.setUndeletable(true);
    ddvStorageSpaceType_legacyIdentifier.setMultiLingual(false);
    ddvStorageSpaceType_legacyIdentifier.setSearchable(true);
    ddvStorageSpaceType_legacyIdentifier.setUniqueValue(true);
    ddvStorageSpaceType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvStorageSpaceType_linkedSchema = ddvStorageSpaceTypeSchema.create("linkedSchema").setType(MetadataValueType.STRING);
    MetadataBuilder ddvStorageSpaceType_logicallyDeletedOn = ddvStorageSpaceTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvStorageSpaceType_logicallyDeletedOn.setSystemReserved(true);
    ddvStorageSpaceType_logicallyDeletedOn.setUndeletable(true);
    ddvStorageSpaceType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_manualTokens = ddvStorageSpaceTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_manualTokens.setMultivalue(true);
    ddvStorageSpaceType_manualTokens.setSystemReserved(true);
    ddvStorageSpaceType_manualTokens.setUndeletable(true);
    ddvStorageSpaceType_manualTokens.setMultiLingual(false);
    ddvStorageSpaceType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvStorageSpaceType_markedForParsing = ddvStorageSpaceTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvStorageSpaceType_markedForParsing.setSystemReserved(true);
    ddvStorageSpaceType_markedForParsing.setUndeletable(true);
    ddvStorageSpaceType_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_markedForPreviewConversion = ddvStorageSpaceTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvStorageSpaceType_markedForPreviewConversion.setSystemReserved(true);
    ddvStorageSpaceType_markedForPreviewConversion.setUndeletable(true);
    ddvStorageSpaceType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_markedForReindexing = ddvStorageSpaceTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvStorageSpaceType_markedForReindexing.setSystemReserved(true);
    ddvStorageSpaceType_markedForReindexing.setUndeletable(true);
    ddvStorageSpaceType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_migrationDataVersion = ddvStorageSpaceTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvStorageSpaceType_migrationDataVersion.setSystemReserved(true);
    ddvStorageSpaceType_migrationDataVersion.setUndeletable(true);
    ddvStorageSpaceType_migrationDataVersion.setMultiLingual(false);
    ddvStorageSpaceType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvStorageSpaceType_modifiedBy = ddvStorageSpaceTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvStorageSpaceType_modifiedBy.setSystemReserved(true);
    ddvStorageSpaceType_modifiedBy.setUndeletable(true);
    ddvStorageSpaceType_modifiedBy.setMultiLingual(false);
    ddvStorageSpaceType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvStorageSpaceType_modifiedOn = ddvStorageSpaceTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvStorageSpaceType_modifiedOn.setSystemReserved(true);
    ddvStorageSpaceType_modifiedOn.setUndeletable(true);
    ddvStorageSpaceType_modifiedOn.setMultiLingual(false);
    ddvStorageSpaceType_modifiedOn.setSortable(true);
    MetadataBuilder ddvStorageSpaceType_path = ddvStorageSpaceTypeSchema.create("path").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_path.setMultivalue(true);
    ddvStorageSpaceType_path.setSystemReserved(true);
    ddvStorageSpaceType_path.setUndeletable(true);
    ddvStorageSpaceType_path.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_pathParts = ddvStorageSpaceTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_pathParts.setMultivalue(true);
    ddvStorageSpaceType_pathParts.setSystemReserved(true);
    ddvStorageSpaceType_pathParts.setUndeletable(true);
    ddvStorageSpaceType_pathParts.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_principalpath = ddvStorageSpaceTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_principalpath.setSystemReserved(true);
    ddvStorageSpaceType_principalpath.setUndeletable(true);
    ddvStorageSpaceType_principalpath.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_removedauthorizations = ddvStorageSpaceTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_removedauthorizations.setMultivalue(true);
    ddvStorageSpaceType_removedauthorizations.setSystemReserved(true);
    ddvStorageSpaceType_removedauthorizations.setUndeletable(true);
    ddvStorageSpaceType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_schema = ddvStorageSpaceTypeSchema.create("schema").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_schema.setDefaultRequirement(true);
    ddvStorageSpaceType_schema.setSystemReserved(true);
    ddvStorageSpaceType_schema.setUndeletable(true);
    ddvStorageSpaceType_schema.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_shareDenyTokens = ddvStorageSpaceTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_shareDenyTokens.setMultivalue(true);
    ddvStorageSpaceType_shareDenyTokens.setSystemReserved(true);
    ddvStorageSpaceType_shareDenyTokens.setUndeletable(true);
    ddvStorageSpaceType_shareDenyTokens.setMultiLingual(false);
    ddvStorageSpaceType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvStorageSpaceType_shareTokens = ddvStorageSpaceTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_shareTokens.setMultivalue(true);
    ddvStorageSpaceType_shareTokens.setSystemReserved(true);
    ddvStorageSpaceType_shareTokens.setUndeletable(true);
    ddvStorageSpaceType_shareTokens.setMultiLingual(false);
    ddvStorageSpaceType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvStorageSpaceType_title = ddvStorageSpaceTypeSchema.create("title").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_title.setDefaultRequirement(true);
    ddvStorageSpaceType_title.setUndeletable(true);
    ddvStorageSpaceType_title.setMultiLingual(true);
    ddvStorageSpaceType_title.setSchemaAutocomplete(true);
    ddvStorageSpaceType_title.setSearchable(true);
    ddvStorageSpaceType_title.setUniqueValue(true);
    MetadataBuilder ddvStorageSpaceType_tokens = ddvStorageSpaceTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_tokens.setMultivalue(true);
    ddvStorageSpaceType_tokens.setSystemReserved(true);
    ddvStorageSpaceType_tokens.setUndeletable(true);
    ddvStorageSpaceType_tokens.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_tokensHierarchy = ddvStorageSpaceTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvStorageSpaceType_tokensHierarchy.setMultivalue(true);
    ddvStorageSpaceType_tokensHierarchy.setSystemReserved(true);
    ddvStorageSpaceType_tokensHierarchy.setUndeletable(true);
    ddvStorageSpaceType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvStorageSpaceType_visibleInTrees = ddvStorageSpaceTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvStorageSpaceType_visibleInTrees.setSystemReserved(true);
    ddvStorageSpaceType_visibleInTrees.setUndeletable(true);
    ddvStorageSpaceType_visibleInTrees.setMultiLingual(false);
  }

  private void createDdvYearTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvYearTypeSchemaType, MetadataSchemaBuilder ddvYearTypeSchema) {
    MetadataBuilder ddvYearType_allReferences = ddvYearTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvYearType_allReferences.setMultivalue(true);
    ddvYearType_allReferences.setSystemReserved(true);
    ddvYearType_allReferences.setUndeletable(true);
    ddvYearType_allReferences.setMultiLingual(false);
    MetadataBuilder ddvYearType_allRemovedAuths = ddvYearTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvYearType_allRemovedAuths.setMultivalue(true);
    ddvYearType_allRemovedAuths.setSystemReserved(true);
    ddvYearType_allRemovedAuths.setUndeletable(true);
    ddvYearType_allRemovedAuths.setEssential(true);
    ddvYearType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvYearType_attachedAncestors = ddvYearTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvYearType_attachedAncestors.setMultivalue(true);
    ddvYearType_attachedAncestors.setSystemReserved(true);
    ddvYearType_attachedAncestors.setUndeletable(true);
    ddvYearType_attachedAncestors.setEssential(true);
    ddvYearType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvYearType_autocomplete = ddvYearTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvYearType_autocomplete.setMultivalue(true);
    ddvYearType_autocomplete.setSystemReserved(true);
    ddvYearType_autocomplete.setUndeletable(true);
    ddvYearType_autocomplete.setEssential(true);
    ddvYearType_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvYearType_caption = ddvYearTypeSchema.create("caption").setType(MetadataValueType.STRING);
    ddvYearType_caption.setSystemReserved(true);
    ddvYearType_caption.setUndeletable(true);
    ddvYearType_caption.setMultiLingual(false);
    ddvYearType_caption.setSortable(true);
    MetadataBuilder ddvYearType_code = ddvYearTypeSchema.create("code").setType(MetadataValueType.STRING);
    ddvYearType_code.setUndeletable(true);
    ddvYearType_code.setEnabled(false);
    ddvYearType_code.setSchemaAutocomplete(true);
    ddvYearType_code.setSearchable(true);
    MetadataBuilder ddvYearType_comments = ddvYearTypeSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvYearType_comments.setMultivalue(true);
    ddvYearType_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvYearType_createdBy = ddvYearTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvYearType_createdBy.setSystemReserved(true);
    ddvYearType_createdBy.setUndeletable(true);
    ddvYearType_createdBy.setMultiLingual(false);
    ddvYearType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvYearType_createdOn = ddvYearTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvYearType_createdOn.setSystemReserved(true);
    ddvYearType_createdOn.setUndeletable(true);
    ddvYearType_createdOn.setMultiLingual(false);
    ddvYearType_createdOn.setSortable(true);
    MetadataBuilder ddvYearType_deleted = ddvYearTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvYearType_deleted.setSystemReserved(true);
    ddvYearType_deleted.setUndeletable(true);
    ddvYearType_deleted.setMultiLingual(false);
    MetadataBuilder ddvYearType_denyTokens = ddvYearTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvYearType_denyTokens.setMultivalue(true);
    ddvYearType_denyTokens.setSystemReserved(true);
    ddvYearType_denyTokens.setUndeletable(true);
    ddvYearType_denyTokens.setMultiLingual(false);
    ddvYearType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvYearType_description = ddvYearTypeSchema.create("description").setType(MetadataValueType.TEXT);
    ddvYearType_description.setUndeletable(true);
    ddvYearType_description.setMultiLingual(true);
    ddvYearType_description.setSearchable(true);
    MetadataBuilder ddvYearType_detachedauthorizations = ddvYearTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvYearType_detachedauthorizations.setSystemReserved(true);
    ddvYearType_detachedauthorizations.setUndeletable(true);
    ddvYearType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvYearType_errorOnPhysicalDeletion = ddvYearTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvYearType_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvYearType_errorOnPhysicalDeletion.setUndeletable(true);
    ddvYearType_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder ddvYearType_estimatedSize = ddvYearTypeSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  ddvYearType_estimatedSize.setSystemReserved(true);
	  ddvYearType_estimatedSize.setUndeletable(true);
	  ddvYearType_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvYearType_id = ddvYearTypeSchema.create("id").setType(MetadataValueType.STRING);
    ddvYearType_id.setDefaultRequirement(true);
    ddvYearType_id.setSystemReserved(true);
    ddvYearType_id.setUndeletable(true);
    ddvYearType_id.setMultiLingual(false);
    ddvYearType_id.setSearchable(true);
    ddvYearType_id.setSortable(true);
    ddvYearType_id.setUniqueValue(true);
    ddvYearType_id.setUnmodifiable(true);
    MetadataBuilder ddvYearType_legacyIdentifier = ddvYearTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvYearType_legacyIdentifier.setDefaultRequirement(true);
    ddvYearType_legacyIdentifier.setSystemReserved(true);
    ddvYearType_legacyIdentifier.setUndeletable(true);
    ddvYearType_legacyIdentifier.setMultiLingual(false);
    ddvYearType_legacyIdentifier.setSearchable(true);
    ddvYearType_legacyIdentifier.setUniqueValue(true);
    ddvYearType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvYearType_logicallyDeletedOn = ddvYearTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvYearType_logicallyDeletedOn.setSystemReserved(true);
    ddvYearType_logicallyDeletedOn.setUndeletable(true);
    ddvYearType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvYearType_manualTokens = ddvYearTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvYearType_manualTokens.setMultivalue(true);
    ddvYearType_manualTokens.setSystemReserved(true);
    ddvYearType_manualTokens.setUndeletable(true);
    ddvYearType_manualTokens.setMultiLingual(false);
    ddvYearType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvYearType_markedForParsing = ddvYearTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvYearType_markedForParsing.setSystemReserved(true);
    ddvYearType_markedForParsing.setUndeletable(true);
    ddvYearType_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvYearType_markedForPreviewConversion = ddvYearTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvYearType_markedForPreviewConversion.setSystemReserved(true);
    ddvYearType_markedForPreviewConversion.setUndeletable(true);
    ddvYearType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvYearType_markedForReindexing = ddvYearTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvYearType_markedForReindexing.setSystemReserved(true);
    ddvYearType_markedForReindexing.setUndeletable(true);
    ddvYearType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvYearType_migrationDataVersion = ddvYearTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvYearType_migrationDataVersion.setSystemReserved(true);
    ddvYearType_migrationDataVersion.setUndeletable(true);
    ddvYearType_migrationDataVersion.setMultiLingual(false);
    ddvYearType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvYearType_modifiedBy = ddvYearTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvYearType_modifiedBy.setSystemReserved(true);
    ddvYearType_modifiedBy.setUndeletable(true);
    ddvYearType_modifiedBy.setMultiLingual(false);
    ddvYearType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvYearType_modifiedOn = ddvYearTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvYearType_modifiedOn.setSystemReserved(true);
    ddvYearType_modifiedOn.setUndeletable(true);
    ddvYearType_modifiedOn.setMultiLingual(false);
    ddvYearType_modifiedOn.setSortable(true);
    MetadataBuilder ddvYearType_path = ddvYearTypeSchema.create("path").setType(MetadataValueType.STRING);
    ddvYearType_path.setMultivalue(true);
    ddvYearType_path.setSystemReserved(true);
    ddvYearType_path.setUndeletable(true);
    ddvYearType_path.setMultiLingual(false);
    MetadataBuilder ddvYearType_pathParts = ddvYearTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvYearType_pathParts.setMultivalue(true);
    ddvYearType_pathParts.setSystemReserved(true);
    ddvYearType_pathParts.setUndeletable(true);
    ddvYearType_pathParts.setMultiLingual(false);
    MetadataBuilder ddvYearType_principalpath = ddvYearTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvYearType_principalpath.setSystemReserved(true);
    ddvYearType_principalpath.setUndeletable(true);
    ddvYearType_principalpath.setMultiLingual(false);
    MetadataBuilder ddvYearType_removedauthorizations = ddvYearTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvYearType_removedauthorizations.setMultivalue(true);
    ddvYearType_removedauthorizations.setSystemReserved(true);
    ddvYearType_removedauthorizations.setUndeletable(true);
    ddvYearType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvYearType_schema = ddvYearTypeSchema.create("schema").setType(MetadataValueType.STRING);
    ddvYearType_schema.setDefaultRequirement(true);
    ddvYearType_schema.setSystemReserved(true);
    ddvYearType_schema.setUndeletable(true);
    ddvYearType_schema.setMultiLingual(false);
    MetadataBuilder ddvYearType_shareDenyTokens = ddvYearTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvYearType_shareDenyTokens.setMultivalue(true);
    ddvYearType_shareDenyTokens.setSystemReserved(true);
    ddvYearType_shareDenyTokens.setUndeletable(true);
    ddvYearType_shareDenyTokens.setMultiLingual(false);
    ddvYearType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvYearType_shareTokens = ddvYearTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvYearType_shareTokens.setMultivalue(true);
    ddvYearType_shareTokens.setSystemReserved(true);
    ddvYearType_shareTokens.setUndeletable(true);
    ddvYearType_shareTokens.setMultiLingual(false);
    ddvYearType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvYearType_title = ddvYearTypeSchema.create("title").setType(MetadataValueType.STRING);
    ddvYearType_title.setDefaultRequirement(true);
    ddvYearType_title.setUndeletable(true);
    ddvYearType_title.setMultiLingual(true);
    ddvYearType_title.setSchemaAutocomplete(true);
    ddvYearType_title.setSearchable(true);
    ddvYearType_title.setUniqueValue(true);
    MetadataBuilder ddvYearType_tokens = ddvYearTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvYearType_tokens.setMultivalue(true);
    ddvYearType_tokens.setSystemReserved(true);
    ddvYearType_tokens.setUndeletable(true);
    ddvYearType_tokens.setMultiLingual(false);
    MetadataBuilder ddvYearType_tokensHierarchy = ddvYearTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvYearType_tokensHierarchy.setMultivalue(true);
    ddvYearType_tokensHierarchy.setSystemReserved(true);
    ddvYearType_tokensHierarchy.setUndeletable(true);
    ddvYearType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvYearType_visibleInTrees = ddvYearTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvYearType_visibleInTrees.setSystemReserved(true);
    ddvYearType_visibleInTrees.setUndeletable(true);
    ddvYearType_visibleInTrees.setMultiLingual(false);
    MetadataBuilder ddvYearType_yearEnd = ddvYearTypeSchema.create("yearEnd").setType(MetadataValueType.STRING);
    ddvYearType_yearEnd.setInputMask("^((0[1-9]|1[0-2])\\/([01][1-9]|10|2[0-8]))|((0[13-9]|1[0-2])\\/(29|30))|((0[13578]|1[0-2])\\/31)|02\\/29$");
    ddvYearType_yearEnd.setDefaultRequirement(true);
  }

  private void createDdvContainerRecordTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvContainerRecordTypeSchemaType, MetadataSchemaBuilder ddvContainerRecordTypeSchema) {
    MetadataBuilder ddvContainerRecordType_allReferences = ddvContainerRecordTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvContainerRecordType_allReferences.setMultivalue(true);
    ddvContainerRecordType_allReferences.setSystemReserved(true);
    ddvContainerRecordType_allReferences.setUndeletable(true);
    ddvContainerRecordType_allReferences.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_allRemovedAuths = ddvContainerRecordTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvContainerRecordType_allRemovedAuths.setMultivalue(true);
    ddvContainerRecordType_allRemovedAuths.setSystemReserved(true);
    ddvContainerRecordType_allRemovedAuths.setUndeletable(true);
    ddvContainerRecordType_allRemovedAuths.setEssential(true);
    ddvContainerRecordType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_attachedAncestors = ddvContainerRecordTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvContainerRecordType_attachedAncestors.setMultivalue(true);
    ddvContainerRecordType_attachedAncestors.setSystemReserved(true);
    ddvContainerRecordType_attachedAncestors.setUndeletable(true);
    ddvContainerRecordType_attachedAncestors.setEssential(true);
    ddvContainerRecordType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_autocomplete = ddvContainerRecordTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvContainerRecordType_autocomplete.setMultivalue(true);
    ddvContainerRecordType_autocomplete.setSystemReserved(true);
    ddvContainerRecordType_autocomplete.setUndeletable(true);
    ddvContainerRecordType_autocomplete.setEssential(true);
    ddvContainerRecordType_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvContainerRecordType_caption = ddvContainerRecordTypeSchema.create("caption").setType(MetadataValueType.STRING);
    ddvContainerRecordType_caption.setSystemReserved(true);
    ddvContainerRecordType_caption.setUndeletable(true);
    ddvContainerRecordType_caption.setMultiLingual(false);
    ddvContainerRecordType_caption.setSortable(true);
    MetadataBuilder ddvContainerRecordType_code = ddvContainerRecordTypeSchema.create("code").setType(MetadataValueType.STRING);
    ddvContainerRecordType_code.setDefaultRequirement(true);
    ddvContainerRecordType_code.setUndeletable(true);
    ddvContainerRecordType_code.setSchemaAutocomplete(true);
    ddvContainerRecordType_code.setSearchable(true);
    ddvContainerRecordType_code.setUniqueValue(true);
    MetadataBuilder ddvContainerRecordType_comments = ddvContainerRecordTypeSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvContainerRecordType_comments.setMultivalue(true);
    ddvContainerRecordType_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvContainerRecordType_createdBy = ddvContainerRecordTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvContainerRecordType_createdBy.setSystemReserved(true);
    ddvContainerRecordType_createdBy.setUndeletable(true);
    ddvContainerRecordType_createdBy.setMultiLingual(false);
    ddvContainerRecordType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvContainerRecordType_createdOn = ddvContainerRecordTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvContainerRecordType_createdOn.setSystemReserved(true);
    ddvContainerRecordType_createdOn.setUndeletable(true);
    ddvContainerRecordType_createdOn.setMultiLingual(false);
    ddvContainerRecordType_createdOn.setSortable(true);
    MetadataBuilder ddvContainerRecordType_deleted = ddvContainerRecordTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvContainerRecordType_deleted.setSystemReserved(true);
    ddvContainerRecordType_deleted.setUndeletable(true);
    ddvContainerRecordType_deleted.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_denyTokens = ddvContainerRecordTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvContainerRecordType_denyTokens.setMultivalue(true);
    ddvContainerRecordType_denyTokens.setSystemReserved(true);
    ddvContainerRecordType_denyTokens.setUndeletable(true);
    ddvContainerRecordType_denyTokens.setMultiLingual(false);
    ddvContainerRecordType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvContainerRecordType_description = ddvContainerRecordTypeSchema.create("description").setType(MetadataValueType.TEXT);
    ddvContainerRecordType_description.setUndeletable(true);
    ddvContainerRecordType_description.setMultiLingual(true);
    ddvContainerRecordType_description.setEssentialInSummary(true);
    ddvContainerRecordType_description.setSearchable(true);
    MetadataBuilder ddvContainerRecordType_detachedauthorizations = ddvContainerRecordTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvContainerRecordType_detachedauthorizations.setSystemReserved(true);
    ddvContainerRecordType_detachedauthorizations.setUndeletable(true);
    ddvContainerRecordType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_errorOnPhysicalDeletion = ddvContainerRecordTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvContainerRecordType_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvContainerRecordType_errorOnPhysicalDeletion.setUndeletable(true);
    ddvContainerRecordType_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder ddvContainerRecordType_estimatedSize = ddvContainerRecordTypeSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  ddvContainerRecordType_estimatedSize.setSystemReserved(true);
	  ddvContainerRecordType_estimatedSize.setUndeletable(true);
	  ddvContainerRecordType_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_id = ddvContainerRecordTypeSchema.create("id").setType(MetadataValueType.STRING);
    ddvContainerRecordType_id.setDefaultRequirement(true);
    ddvContainerRecordType_id.setSystemReserved(true);
    ddvContainerRecordType_id.setUndeletable(true);
    ddvContainerRecordType_id.setMultiLingual(false);
    ddvContainerRecordType_id.setSearchable(true);
    ddvContainerRecordType_id.setSortable(true);
    ddvContainerRecordType_id.setUniqueValue(true);
    ddvContainerRecordType_id.setUnmodifiable(true);
    MetadataBuilder ddvContainerRecordType_legacyIdentifier = ddvContainerRecordTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvContainerRecordType_legacyIdentifier.setDefaultRequirement(true);
    ddvContainerRecordType_legacyIdentifier.setSystemReserved(true);
    ddvContainerRecordType_legacyIdentifier.setUndeletable(true);
    ddvContainerRecordType_legacyIdentifier.setMultiLingual(false);
    ddvContainerRecordType_legacyIdentifier.setSearchable(true);
    ddvContainerRecordType_legacyIdentifier.setUniqueValue(true);
    ddvContainerRecordType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvContainerRecordType_linkedSchema = ddvContainerRecordTypeSchema.create("linkedSchema").setType(MetadataValueType.STRING);
    MetadataBuilder ddvContainerRecordType_logicallyDeletedOn = ddvContainerRecordTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvContainerRecordType_logicallyDeletedOn.setSystemReserved(true);
    ddvContainerRecordType_logicallyDeletedOn.setUndeletable(true);
    ddvContainerRecordType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_manualTokens = ddvContainerRecordTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvContainerRecordType_manualTokens.setMultivalue(true);
    ddvContainerRecordType_manualTokens.setSystemReserved(true);
    ddvContainerRecordType_manualTokens.setUndeletable(true);
    ddvContainerRecordType_manualTokens.setMultiLingual(false);
    ddvContainerRecordType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvContainerRecordType_markedForParsing = ddvContainerRecordTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvContainerRecordType_markedForParsing.setSystemReserved(true);
    ddvContainerRecordType_markedForParsing.setUndeletable(true);
    ddvContainerRecordType_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_markedForPreviewConversion = ddvContainerRecordTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvContainerRecordType_markedForPreviewConversion.setSystemReserved(true);
    ddvContainerRecordType_markedForPreviewConversion.setUndeletable(true);
    ddvContainerRecordType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_markedForReindexing = ddvContainerRecordTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvContainerRecordType_markedForReindexing.setSystemReserved(true);
    ddvContainerRecordType_markedForReindexing.setUndeletable(true);
    ddvContainerRecordType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_migrationDataVersion = ddvContainerRecordTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvContainerRecordType_migrationDataVersion.setSystemReserved(true);
    ddvContainerRecordType_migrationDataVersion.setUndeletable(true);
    ddvContainerRecordType_migrationDataVersion.setMultiLingual(false);
    ddvContainerRecordType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvContainerRecordType_modifiedBy = ddvContainerRecordTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvContainerRecordType_modifiedBy.setSystemReserved(true);
    ddvContainerRecordType_modifiedBy.setUndeletable(true);
    ddvContainerRecordType_modifiedBy.setMultiLingual(false);
    ddvContainerRecordType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvContainerRecordType_modifiedOn = ddvContainerRecordTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvContainerRecordType_modifiedOn.setSystemReserved(true);
    ddvContainerRecordType_modifiedOn.setUndeletable(true);
    ddvContainerRecordType_modifiedOn.setMultiLingual(false);
    ddvContainerRecordType_modifiedOn.setSortable(true);
    MetadataBuilder ddvContainerRecordType_path = ddvContainerRecordTypeSchema.create("path").setType(MetadataValueType.STRING);
    ddvContainerRecordType_path.setMultivalue(true);
    ddvContainerRecordType_path.setSystemReserved(true);
    ddvContainerRecordType_path.setUndeletable(true);
    ddvContainerRecordType_path.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_pathParts = ddvContainerRecordTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvContainerRecordType_pathParts.setMultivalue(true);
    ddvContainerRecordType_pathParts.setSystemReserved(true);
    ddvContainerRecordType_pathParts.setUndeletable(true);
    ddvContainerRecordType_pathParts.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_principalpath = ddvContainerRecordTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvContainerRecordType_principalpath.setSystemReserved(true);
    ddvContainerRecordType_principalpath.setUndeletable(true);
    ddvContainerRecordType_principalpath.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_removedauthorizations = ddvContainerRecordTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvContainerRecordType_removedauthorizations.setMultivalue(true);
    ddvContainerRecordType_removedauthorizations.setSystemReserved(true);
    ddvContainerRecordType_removedauthorizations.setUndeletable(true);
    ddvContainerRecordType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_schema = ddvContainerRecordTypeSchema.create("schema").setType(MetadataValueType.STRING);
    ddvContainerRecordType_schema.setDefaultRequirement(true);
    ddvContainerRecordType_schema.setSystemReserved(true);
    ddvContainerRecordType_schema.setUndeletable(true);
    ddvContainerRecordType_schema.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_shareDenyTokens = ddvContainerRecordTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvContainerRecordType_shareDenyTokens.setMultivalue(true);
    ddvContainerRecordType_shareDenyTokens.setSystemReserved(true);
    ddvContainerRecordType_shareDenyTokens.setUndeletable(true);
    ddvContainerRecordType_shareDenyTokens.setMultiLingual(false);
    ddvContainerRecordType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvContainerRecordType_shareTokens = ddvContainerRecordTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvContainerRecordType_shareTokens.setMultivalue(true);
    ddvContainerRecordType_shareTokens.setSystemReserved(true);
    ddvContainerRecordType_shareTokens.setUndeletable(true);
    ddvContainerRecordType_shareTokens.setMultiLingual(false);
    ddvContainerRecordType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvContainerRecordType_title = ddvContainerRecordTypeSchema.create("title").setType(MetadataValueType.STRING);
    ddvContainerRecordType_title.setDefaultRequirement(true);
    ddvContainerRecordType_title.setUndeletable(true);
    ddvContainerRecordType_title.setMultiLingual(true);
    ddvContainerRecordType_title.setSchemaAutocomplete(true);
    ddvContainerRecordType_title.setSearchable(true);
    ddvContainerRecordType_title.setUniqueValue(true);
    MetadataBuilder ddvContainerRecordType_tokens = ddvContainerRecordTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvContainerRecordType_tokens.setMultivalue(true);
    ddvContainerRecordType_tokens.setSystemReserved(true);
    ddvContainerRecordType_tokens.setUndeletable(true);
    ddvContainerRecordType_tokens.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_tokensHierarchy = ddvContainerRecordTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvContainerRecordType_tokensHierarchy.setMultivalue(true);
    ddvContainerRecordType_tokensHierarchy.setSystemReserved(true);
    ddvContainerRecordType_tokensHierarchy.setUndeletable(true);
    ddvContainerRecordType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvContainerRecordType_visibleInTrees = ddvContainerRecordTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvContainerRecordType_visibleInTrees.setSystemReserved(true);
    ddvContainerRecordType_visibleInTrees.setUndeletable(true);
    ddvContainerRecordType_visibleInTrees.setMultiLingual(false);
  }

  private void createSavedSearchSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder savedSearchSchemaType, MetadataSchemaBuilder savedSearchSchema) {
  }

  private void createUserDocumentSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userDocumentSchemaType, MetadataSchemaBuilder userDocumentSchema) {
    MetadataBuilder userDocument_contentHashes = userDocumentSchema.create("contentHashes").setType(MetadataValueType.STRING);
    userDocument_contentHashes.setMultivalue(true);
    userDocument_contentHashes.setUndeletable(true);
    MetadataBuilder userDocument_folder = userDocumentSchema.create("folder").setType(MetadataValueType.REFERENCE);
    userDocument_folder.defineReferencesTo(types.getSchemaType("folder"));
  }

  private void createDdvCapsuleLanguageSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvCapsuleLanguageSchemaType, MetadataSchemaBuilder ddvCapsuleLanguageSchema) {
  }

  private void createDdvVariablePeriodSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvVariablePeriodSchemaType, MetadataSchemaBuilder ddvVariablePeriodSchema) {
    MetadataBuilder ddvVariablePeriod_allReferences = ddvVariablePeriodSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvVariablePeriod_allReferences.setMultivalue(true);
    ddvVariablePeriod_allReferences.setSystemReserved(true);
    ddvVariablePeriod_allReferences.setUndeletable(true);
    ddvVariablePeriod_allReferences.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_allRemovedAuths = ddvVariablePeriodSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvVariablePeriod_allRemovedAuths.setMultivalue(true);
    ddvVariablePeriod_allRemovedAuths.setSystemReserved(true);
    ddvVariablePeriod_allRemovedAuths.setUndeletable(true);
    ddvVariablePeriod_allRemovedAuths.setEssential(true);
    ddvVariablePeriod_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_attachedAncestors = ddvVariablePeriodSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvVariablePeriod_attachedAncestors.setMultivalue(true);
    ddvVariablePeriod_attachedAncestors.setSystemReserved(true);
    ddvVariablePeriod_attachedAncestors.setUndeletable(true);
    ddvVariablePeriod_attachedAncestors.setEssential(true);
    ddvVariablePeriod_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_autocomplete = ddvVariablePeriodSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvVariablePeriod_autocomplete.setMultivalue(true);
    ddvVariablePeriod_autocomplete.setSystemReserved(true);
    ddvVariablePeriod_autocomplete.setUndeletable(true);
    ddvVariablePeriod_autocomplete.setEssential(true);
    ddvVariablePeriod_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvVariablePeriod_caption = ddvVariablePeriodSchema.create("caption").setType(MetadataValueType.STRING);
    ddvVariablePeriod_caption.setSystemReserved(true);
    ddvVariablePeriod_caption.setUndeletable(true);
    ddvVariablePeriod_caption.setMultiLingual(false);
    ddvVariablePeriod_caption.setSortable(true);
    MetadataBuilder ddvVariablePeriod_code = ddvVariablePeriodSchema.create("code").setType(MetadataValueType.STRING);
    ddvVariablePeriod_code.setDefaultRequirement(true);
    ddvVariablePeriod_code.setUndeletable(true);
    ddvVariablePeriod_code.setSchemaAutocomplete(true);
    ddvVariablePeriod_code.setSearchable(true);
    ddvVariablePeriod_code.setUniqueValue(true);
    ddvVariablePeriod_code.setUnmodifiable(true);
    ddvVariablePeriod_code.defineValidators().add(IntegerStringValidator.class);
    MetadataBuilder ddvVariablePeriod_comments = ddvVariablePeriodSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvVariablePeriod_comments.setMultivalue(true);
    ddvVariablePeriod_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvVariablePeriod_createdBy = ddvVariablePeriodSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvVariablePeriod_createdBy.setSystemReserved(true);
    ddvVariablePeriod_createdBy.setUndeletable(true);
    ddvVariablePeriod_createdBy.setMultiLingual(false);
    ddvVariablePeriod_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvVariablePeriod_createdOn = ddvVariablePeriodSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvVariablePeriod_createdOn.setSystemReserved(true);
    ddvVariablePeriod_createdOn.setUndeletable(true);
    ddvVariablePeriod_createdOn.setMultiLingual(false);
    ddvVariablePeriod_createdOn.setSortable(true);
    MetadataBuilder ddvVariablePeriod_deleted = ddvVariablePeriodSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvVariablePeriod_deleted.setSystemReserved(true);
    ddvVariablePeriod_deleted.setUndeletable(true);
    ddvVariablePeriod_deleted.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_denyTokens = ddvVariablePeriodSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvVariablePeriod_denyTokens.setMultivalue(true);
    ddvVariablePeriod_denyTokens.setSystemReserved(true);
    ddvVariablePeriod_denyTokens.setUndeletable(true);
    ddvVariablePeriod_denyTokens.setMultiLingual(false);
    ddvVariablePeriod_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvVariablePeriod_description = ddvVariablePeriodSchema.create("description").setType(MetadataValueType.TEXT);
    ddvVariablePeriod_description.setUndeletable(true);
    ddvVariablePeriod_description.setMultiLingual(true);
    ddvVariablePeriod_description.setEssentialInSummary(true);
    ddvVariablePeriod_description.setSearchable(true);
    MetadataBuilder ddvVariablePeriod_detachedauthorizations = ddvVariablePeriodSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvVariablePeriod_detachedauthorizations.setSystemReserved(true);
    ddvVariablePeriod_detachedauthorizations.setUndeletable(true);
    ddvVariablePeriod_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_errorOnPhysicalDeletion = ddvVariablePeriodSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvVariablePeriod_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvVariablePeriod_errorOnPhysicalDeletion.setUndeletable(true);
    ddvVariablePeriod_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder ddvVariablePeriod_estimatedSize = ddvVariablePeriodSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  ddvVariablePeriod_estimatedSize.setSystemReserved(true);
	  ddvVariablePeriod_estimatedSize.setUndeletable(true);
	  ddvVariablePeriod_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_id = ddvVariablePeriodSchema.create("id").setType(MetadataValueType.STRING);
    ddvVariablePeriod_id.setDefaultRequirement(true);
    ddvVariablePeriod_id.setSystemReserved(true);
    ddvVariablePeriod_id.setUndeletable(true);
    ddvVariablePeriod_id.setMultiLingual(false);
    ddvVariablePeriod_id.setSearchable(true);
    ddvVariablePeriod_id.setSortable(true);
    ddvVariablePeriod_id.setUniqueValue(true);
    ddvVariablePeriod_id.setUnmodifiable(true);
    MetadataBuilder ddvVariablePeriod_legacyIdentifier = ddvVariablePeriodSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvVariablePeriod_legacyIdentifier.setDefaultRequirement(true);
    ddvVariablePeriod_legacyIdentifier.setSystemReserved(true);
    ddvVariablePeriod_legacyIdentifier.setUndeletable(true);
    ddvVariablePeriod_legacyIdentifier.setMultiLingual(false);
    ddvVariablePeriod_legacyIdentifier.setSearchable(true);
    ddvVariablePeriod_legacyIdentifier.setUniqueValue(true);
    ddvVariablePeriod_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvVariablePeriod_logicallyDeletedOn = ddvVariablePeriodSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvVariablePeriod_logicallyDeletedOn.setSystemReserved(true);
    ddvVariablePeriod_logicallyDeletedOn.setUndeletable(true);
    ddvVariablePeriod_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_manualTokens = ddvVariablePeriodSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvVariablePeriod_manualTokens.setMultivalue(true);
    ddvVariablePeriod_manualTokens.setSystemReserved(true);
    ddvVariablePeriod_manualTokens.setUndeletable(true);
    ddvVariablePeriod_manualTokens.setMultiLingual(false);
    ddvVariablePeriod_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvVariablePeriod_markedForParsing = ddvVariablePeriodSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvVariablePeriod_markedForParsing.setSystemReserved(true);
    ddvVariablePeriod_markedForParsing.setUndeletable(true);
    ddvVariablePeriod_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_markedForPreviewConversion = ddvVariablePeriodSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvVariablePeriod_markedForPreviewConversion.setSystemReserved(true);
    ddvVariablePeriod_markedForPreviewConversion.setUndeletable(true);
    ddvVariablePeriod_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_markedForReindexing = ddvVariablePeriodSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvVariablePeriod_markedForReindexing.setSystemReserved(true);
    ddvVariablePeriod_markedForReindexing.setUndeletable(true);
    ddvVariablePeriod_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_migrationDataVersion = ddvVariablePeriodSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvVariablePeriod_migrationDataVersion.setSystemReserved(true);
    ddvVariablePeriod_migrationDataVersion.setUndeletable(true);
    ddvVariablePeriod_migrationDataVersion.setMultiLingual(false);
    ddvVariablePeriod_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvVariablePeriod_modifiedBy = ddvVariablePeriodSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvVariablePeriod_modifiedBy.setSystemReserved(true);
    ddvVariablePeriod_modifiedBy.setUndeletable(true);
    ddvVariablePeriod_modifiedBy.setMultiLingual(false);
    ddvVariablePeriod_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvVariablePeriod_modifiedOn = ddvVariablePeriodSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvVariablePeriod_modifiedOn.setSystemReserved(true);
    ddvVariablePeriod_modifiedOn.setUndeletable(true);
    ddvVariablePeriod_modifiedOn.setMultiLingual(false);
    ddvVariablePeriod_modifiedOn.setSortable(true);
    MetadataBuilder ddvVariablePeriod_path = ddvVariablePeriodSchema.create("path").setType(MetadataValueType.STRING);
    ddvVariablePeriod_path.setMultivalue(true);
    ddvVariablePeriod_path.setSystemReserved(true);
    ddvVariablePeriod_path.setUndeletable(true);
    ddvVariablePeriod_path.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_pathParts = ddvVariablePeriodSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvVariablePeriod_pathParts.setMultivalue(true);
    ddvVariablePeriod_pathParts.setSystemReserved(true);
    ddvVariablePeriod_pathParts.setUndeletable(true);
    ddvVariablePeriod_pathParts.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_principalpath = ddvVariablePeriodSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvVariablePeriod_principalpath.setSystemReserved(true);
    ddvVariablePeriod_principalpath.setUndeletable(true);
    ddvVariablePeriod_principalpath.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_removedauthorizations = ddvVariablePeriodSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvVariablePeriod_removedauthorizations.setMultivalue(true);
    ddvVariablePeriod_removedauthorizations.setSystemReserved(true);
    ddvVariablePeriod_removedauthorizations.setUndeletable(true);
    ddvVariablePeriod_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_schema = ddvVariablePeriodSchema.create("schema").setType(MetadataValueType.STRING);
    ddvVariablePeriod_schema.setDefaultRequirement(true);
    ddvVariablePeriod_schema.setSystemReserved(true);
    ddvVariablePeriod_schema.setUndeletable(true);
    ddvVariablePeriod_schema.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_shareDenyTokens = ddvVariablePeriodSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvVariablePeriod_shareDenyTokens.setMultivalue(true);
    ddvVariablePeriod_shareDenyTokens.setSystemReserved(true);
    ddvVariablePeriod_shareDenyTokens.setUndeletable(true);
    ddvVariablePeriod_shareDenyTokens.setMultiLingual(false);
    ddvVariablePeriod_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvVariablePeriod_shareTokens = ddvVariablePeriodSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvVariablePeriod_shareTokens.setMultivalue(true);
    ddvVariablePeriod_shareTokens.setSystemReserved(true);
    ddvVariablePeriod_shareTokens.setUndeletable(true);
    ddvVariablePeriod_shareTokens.setMultiLingual(false);
    ddvVariablePeriod_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvVariablePeriod_title = ddvVariablePeriodSchema.create("title").setType(MetadataValueType.STRING);
    ddvVariablePeriod_title.setDefaultRequirement(true);
    ddvVariablePeriod_title.setUndeletable(true);
    ddvVariablePeriod_title.setMultiLingual(true);
    ddvVariablePeriod_title.setSchemaAutocomplete(true);
    ddvVariablePeriod_title.setSearchable(true);
    ddvVariablePeriod_title.setUniqueValue(true);
    MetadataBuilder ddvVariablePeriod_tokens = ddvVariablePeriodSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvVariablePeriod_tokens.setMultivalue(true);
    ddvVariablePeriod_tokens.setSystemReserved(true);
    ddvVariablePeriod_tokens.setUndeletable(true);
    ddvVariablePeriod_tokens.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_tokensHierarchy = ddvVariablePeriodSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvVariablePeriod_tokensHierarchy.setMultivalue(true);
    ddvVariablePeriod_tokensHierarchy.setSystemReserved(true);
    ddvVariablePeriod_tokensHierarchy.setUndeletable(true);
    ddvVariablePeriod_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvVariablePeriod_visibleInTrees = ddvVariablePeriodSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvVariablePeriod_visibleInTrees.setSystemReserved(true);
    ddvVariablePeriod_visibleInTrees.setUndeletable(true);
    ddvVariablePeriod_visibleInTrees.setMultiLingual(false);
  }

  private void createStorageSpaceSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder storageSpaceSchemaType, MetadataSchemaBuilder storageSpaceSchema) {
    MetadataBuilder storageSpace_allReferences = storageSpaceSchema.create("allReferences").setType(MetadataValueType.STRING);
    storageSpace_allReferences.setMultivalue(true);
    storageSpace_allReferences.setSystemReserved(true);
    storageSpace_allReferences.setUndeletable(true);
    storageSpace_allReferences.setEssential(true);
    storageSpace_allReferences.setMultiLingual(false);
    MetadataBuilder storageSpace_allRemovedAuths = storageSpaceSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    storageSpace_allRemovedAuths.setMultivalue(true);
    storageSpace_allRemovedAuths.setSystemReserved(true);
    storageSpace_allRemovedAuths.setUndeletable(true);
    storageSpace_allRemovedAuths.setEssential(true);
    storageSpace_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder storageSpace_attachedAncestors = storageSpaceSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    storageSpace_attachedAncestors.setMultivalue(true);
    storageSpace_attachedAncestors.setSystemReserved(true);
    storageSpace_attachedAncestors.setUndeletable(true);
    storageSpace_attachedAncestors.setEssential(true);
    storageSpace_attachedAncestors.setMultiLingual(false);
    MetadataBuilder storageSpace_autocomplete = storageSpaceSchema.create("autocomplete").setType(MetadataValueType.STRING);
    storageSpace_autocomplete.setMultivalue(true);
    storageSpace_autocomplete.setSystemReserved(true);
    storageSpace_autocomplete.setUndeletable(true);
    storageSpace_autocomplete.setEssential(true);
    storageSpace_autocomplete.setMultiLingual(true);
    MetadataBuilder storageSpace_availableSize = storageSpaceSchema.create("availableSize").setType(MetadataValueType.NUMBER);
    storageSpace_availableSize.setUndeletable(true);
    MetadataBuilder storageSpace_capacity = storageSpaceSchema.create("capacity").setType(MetadataValueType.NUMBER);
    storageSpace_capacity.setUndeletable(true);
    storageSpace_capacity.setEssential(true);
    MetadataBuilder storageSpace_caption = storageSpaceSchema.create("caption").setType(MetadataValueType.STRING);
    storageSpace_caption.setSystemReserved(true);
    storageSpace_caption.setUndeletable(true);
    storageSpace_caption.setEssential(true);
    storageSpace_caption.setMultiLingual(false);
    storageSpace_caption.setSortable(true);
    MetadataBuilder storageSpace_childLinearSizeSum = storageSpaceSchema.create("childLinearSizeSum").setType(MetadataValueType.NUMBER);
    storageSpace_childLinearSizeSum.setUndeletable(true);
    MetadataBuilder storageSpace_code = storageSpaceSchema.create("code").setType(MetadataValueType.STRING);
    storageSpace_code.setDefaultRequirement(true);
    storageSpace_code.setUndeletable(true);
    storageSpace_code.setEssential(true);
    storageSpace_code.setSchemaAutocomplete(true);
    storageSpace_code.setSearchable(true);
    storageSpace_code.setUniqueValue(true);
    MetadataBuilder storageSpace_comments = storageSpaceSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    storageSpace_comments.setMultivalue(true);
    storageSpace_comments.setUndeletable(true);
    storageSpace_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder storageSpace_containerType = storageSpaceSchema.create("containerType").setType(MetadataValueType.REFERENCE);
    storageSpace_containerType.setMultivalue(true);
    storageSpace_containerType.setUndeletable(true);
    storageSpace_containerType.defineReferencesTo(types.getSchemaType("ddvContainerRecordType"));
    MetadataBuilder storageSpace_createdBy = storageSpaceSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    storageSpace_createdBy.setSystemReserved(true);
    storageSpace_createdBy.setUndeletable(true);
    storageSpace_createdBy.setEssential(true);
    storageSpace_createdBy.setMultiLingual(false);
    storageSpace_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder storageSpace_createdOn = storageSpaceSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    storageSpace_createdOn.setSystemReserved(true);
    storageSpace_createdOn.setUndeletable(true);
    storageSpace_createdOn.setEssential(true);
    storageSpace_createdOn.setMultiLingual(false);
    storageSpace_createdOn.setSortable(true);
    MetadataBuilder storageSpace_decommissioningType = storageSpaceSchema.create("decommissioningType").setType(MetadataValueType.ENUM);
    storageSpace_decommissioningType.setUndeletable(true);
    storageSpace_decommissioningType.setEssential(true);
    storageSpace_decommissioningType.defineAsEnum(DecommissioningType.class);
    MetadataBuilder storageSpace_deleted = storageSpaceSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    storageSpace_deleted.setSystemReserved(true);
    storageSpace_deleted.setUndeletable(true);
    storageSpace_deleted.setEssential(true);
    storageSpace_deleted.setMultiLingual(false);
    MetadataBuilder storageSpace_denyTokens = storageSpaceSchema.create("denyTokens").setType(MetadataValueType.STRING);
    storageSpace_denyTokens.setMultivalue(true);
    storageSpace_denyTokens.setSystemReserved(true);
    storageSpace_denyTokens.setUndeletable(true);
    storageSpace_denyTokens.setEssential(true);
    storageSpace_denyTokens.setMultiLingual(false);
    storageSpace_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder storageSpace_description = storageSpaceSchema.create("description").setType(MetadataValueType.STRING);
    storageSpace_description.setUndeletable(true);
    storageSpace_description.setEssentialInSummary(true);
    storageSpace_description.setSearchable(true);
    MetadataBuilder storageSpace_detachedauthorizations = storageSpaceSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    storageSpace_detachedauthorizations.setSystemReserved(true);
    storageSpace_detachedauthorizations.setUndeletable(true);
    storageSpace_detachedauthorizations.setEssential(true);
    storageSpace_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder storageSpace_errorOnPhysicalDeletion = storageSpaceSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    storageSpace_errorOnPhysicalDeletion.setSystemReserved(true);
    storageSpace_errorOnPhysicalDeletion.setUndeletable(true);
    storageSpace_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder storageSpace_estimatedSize = storageSpaceSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  storageSpace_estimatedSize.setSystemReserved(true);
	  storageSpace_estimatedSize.setUndeletable(true);
	  storageSpace_estimatedSize.setEssential(true);
	  storageSpace_estimatedSize.setMultiLingual(false);
    MetadataBuilder storageSpace_id = storageSpaceSchema.create("id").setType(MetadataValueType.STRING);
    storageSpace_id.setDefaultRequirement(true);
    storageSpace_id.setSystemReserved(true);
    storageSpace_id.setUndeletable(true);
    storageSpace_id.setEssential(true);
    storageSpace_id.setMultiLingual(false);
    storageSpace_id.setSearchable(true);
    storageSpace_id.setSortable(true);
    storageSpace_id.setUniqueValue(true);
    storageSpace_id.setUnmodifiable(true);
    MetadataBuilder storageSpace_legacyIdentifier = storageSpaceSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    storageSpace_legacyIdentifier.setDefaultRequirement(true);
    storageSpace_legacyIdentifier.setSystemReserved(true);
    storageSpace_legacyIdentifier.setUndeletable(true);
    storageSpace_legacyIdentifier.setEssential(true);
    storageSpace_legacyIdentifier.setMultiLingual(false);
    storageSpace_legacyIdentifier.setSearchable(true);
    storageSpace_legacyIdentifier.setUniqueValue(true);
    storageSpace_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder storageSpace_linearSize = storageSpaceSchema.create("linearSize").setType(MetadataValueType.NUMBER);
    storageSpace_linearSize.setUndeletable(true);
    MetadataBuilder storageSpace_linearSizeEntered = storageSpaceSchema.create("linearSizeEntered").setType(MetadataValueType.NUMBER);
    storageSpace_linearSizeEntered.setUndeletable(true);
    MetadataBuilder storageSpace_linearSizeSum = storageSpaceSchema.create("linearSizeSum").setType(MetadataValueType.NUMBER);
    storageSpace_linearSizeSum.setUndeletable(true);
    MetadataBuilder storageSpace_logicallyDeletedOn = storageSpaceSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    storageSpace_logicallyDeletedOn.setSystemReserved(true);
    storageSpace_logicallyDeletedOn.setUndeletable(true);
    storageSpace_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder storageSpace_manualTokens = storageSpaceSchema.create("manualTokens").setType(MetadataValueType.STRING);
    storageSpace_manualTokens.setMultivalue(true);
    storageSpace_manualTokens.setSystemReserved(true);
    storageSpace_manualTokens.setUndeletable(true);
    storageSpace_manualTokens.setEssential(true);
    storageSpace_manualTokens.setMultiLingual(false);
    storageSpace_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder storageSpace_markedForParsing = storageSpaceSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    storageSpace_markedForParsing.setSystemReserved(true);
    storageSpace_markedForParsing.setUndeletable(true);
    storageSpace_markedForParsing.setEssential(true);
    storageSpace_markedForParsing.setMultiLingual(false);
    MetadataBuilder storageSpace_markedForPreviewConversion = storageSpaceSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    storageSpace_markedForPreviewConversion.setSystemReserved(true);
    storageSpace_markedForPreviewConversion.setUndeletable(true);
    storageSpace_markedForPreviewConversion.setEssential(true);
    storageSpace_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder storageSpace_markedForReindexing = storageSpaceSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    storageSpace_markedForReindexing.setSystemReserved(true);
    storageSpace_markedForReindexing.setUndeletable(true);
    storageSpace_markedForReindexing.setEssential(true);
    storageSpace_markedForReindexing.setMultiLingual(false);
    MetadataBuilder storageSpace_migrationDataVersion = storageSpaceSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    storageSpace_migrationDataVersion.setSystemReserved(true);
    storageSpace_migrationDataVersion.setUndeletable(true);
    storageSpace_migrationDataVersion.setEssential(true);
    storageSpace_migrationDataVersion.setMultiLingual(false);
    storageSpace_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder storageSpace_modifiedBy = storageSpaceSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    storageSpace_modifiedBy.setSystemReserved(true);
    storageSpace_modifiedBy.setUndeletable(true);
    storageSpace_modifiedBy.setEssential(true);
    storageSpace_modifiedBy.setMultiLingual(false);
    storageSpace_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder storageSpace_modifiedOn = storageSpaceSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    storageSpace_modifiedOn.setSystemReserved(true);
    storageSpace_modifiedOn.setUndeletable(true);
    storageSpace_modifiedOn.setEssential(true);
    storageSpace_modifiedOn.setMultiLingual(false);
    storageSpace_modifiedOn.setSortable(true);
    MetadataBuilder storageSpace_numberOfChild = storageSpaceSchema.create("numberOfChild").setType(MetadataValueType.NUMBER);
    storageSpace_numberOfChild.setUndeletable(true);
    MetadataBuilder storageSpace_numberOfContainers = storageSpaceSchema.create("numberOfContainers").setType(MetadataValueType.NUMBER);
    storageSpace_numberOfContainers.setUndeletable(true);
    storageSpace_numberOfContainers.setSearchable(true);
    MetadataBuilder storageSpace_parentStorageSpace = storageSpaceSchema.create("parentStorageSpace").setType(MetadataValueType.REFERENCE);
    storageSpace_parentStorageSpace.setUndeletable(true);
    storageSpace_parentStorageSpace.setEssential(true);
    storageSpace_parentStorageSpace.defineChildOfRelationshipToType(types.getSchemaType("storageSpace"));
    MetadataBuilder storageSpace_path = storageSpaceSchema.create("path").setType(MetadataValueType.STRING);
    storageSpace_path.setMultivalue(true);
    storageSpace_path.setSystemReserved(true);
    storageSpace_path.setUndeletable(true);
    storageSpace_path.setEssential(true);
    storageSpace_path.setMultiLingual(false);
    MetadataBuilder storageSpace_pathParts = storageSpaceSchema.create("pathParts").setType(MetadataValueType.STRING);
    storageSpace_pathParts.setMultivalue(true);
    storageSpace_pathParts.setSystemReserved(true);
    storageSpace_pathParts.setUndeletable(true);
    storageSpace_pathParts.setEssential(true);
    storageSpace_pathParts.setMultiLingual(false);
    MetadataBuilder storageSpace_principalpath = storageSpaceSchema.create("principalpath").setType(MetadataValueType.STRING);
    storageSpace_principalpath.setSystemReserved(true);
    storageSpace_principalpath.setUndeletable(true);
    storageSpace_principalpath.setEssential(true);
    storageSpace_principalpath.setMultiLingual(false);
    MetadataBuilder storageSpace_removedauthorizations = storageSpaceSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    storageSpace_removedauthorizations.setMultivalue(true);
    storageSpace_removedauthorizations.setSystemReserved(true);
    storageSpace_removedauthorizations.setUndeletable(true);
    storageSpace_removedauthorizations.setEssential(true);
    storageSpace_removedauthorizations.setMultiLingual(false);
    MetadataBuilder storageSpace_schema = storageSpaceSchema.create("schema").setType(MetadataValueType.STRING);
    storageSpace_schema.setDefaultRequirement(true);
    storageSpace_schema.setSystemReserved(true);
    storageSpace_schema.setUndeletable(true);
    storageSpace_schema.setEssential(true);
    storageSpace_schema.setMultiLingual(false);
    MetadataBuilder storageSpace_shareDenyTokens = storageSpaceSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    storageSpace_shareDenyTokens.setMultivalue(true);
    storageSpace_shareDenyTokens.setSystemReserved(true);
    storageSpace_shareDenyTokens.setUndeletable(true);
    storageSpace_shareDenyTokens.setEssential(true);
    storageSpace_shareDenyTokens.setMultiLingual(false);
    storageSpace_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder storageSpace_shareTokens = storageSpaceSchema.create("shareTokens").setType(MetadataValueType.STRING);
    storageSpace_shareTokens.setMultivalue(true);
    storageSpace_shareTokens.setSystemReserved(true);
    storageSpace_shareTokens.setUndeletable(true);
    storageSpace_shareTokens.setEssential(true);
    storageSpace_shareTokens.setMultiLingual(false);
    storageSpace_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder storageSpace_title = storageSpaceSchema.create("title").setType(MetadataValueType.STRING);
    storageSpace_title.setDefaultRequirement(true);
    storageSpace_title.setUndeletable(true);
    storageSpace_title.setEssential(true);
    storageSpace_title.setMultiLingual(false);
    storageSpace_title.setSchemaAutocomplete(true);
    storageSpace_title.setSearchable(true);
    MetadataBuilder storageSpace_tokens = storageSpaceSchema.create("tokens").setType(MetadataValueType.STRING);
    storageSpace_tokens.setMultivalue(true);
    storageSpace_tokens.setSystemReserved(true);
    storageSpace_tokens.setUndeletable(true);
    storageSpace_tokens.setEssential(true);
    storageSpace_tokens.setMultiLingual(false);
    MetadataBuilder storageSpace_tokensHierarchy = storageSpaceSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    storageSpace_tokensHierarchy.setMultivalue(true);
    storageSpace_tokensHierarchy.setSystemReserved(true);
    storageSpace_tokensHierarchy.setUndeletable(true);
    storageSpace_tokensHierarchy.setEssential(true);
    storageSpace_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder storageSpace_type = storageSpaceSchema.create("type").setType(MetadataValueType.REFERENCE);
    storageSpace_type.setUndeletable(true);
    storageSpace_type.setEssential(true);
    storageSpace_type.defineReferencesTo(types.getSchemaType("ddvStorageSpaceType"));
    MetadataBuilder storageSpace_visibleInTrees = storageSpaceSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    storageSpace_visibleInTrees.setSystemReserved(true);
    storageSpace_visibleInTrees.setUndeletable(true);
    storageSpace_visibleInTrees.setEssential(true);
    storageSpace_visibleInTrees.setMultiLingual(false);
  }

  private void createDecommissioningListSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder decommissioningListSchemaType, MetadataSchemaBuilder decommissioningListSchema) {
    MetadataBuilder decommissioningList_administrativeUnit = decommissioningListSchema.create("administrativeUnit").setType(MetadataValueType.REFERENCE);
    decommissioningList_administrativeUnit.setUndeletable(true);
    decommissioningList_administrativeUnit.setEssential(true);
    decommissioningList_administrativeUnit.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder decommissioningList_allReferences = decommissioningListSchema.create("allReferences").setType(MetadataValueType.STRING);
    decommissioningList_allReferences.setMultivalue(true);
    decommissioningList_allReferences.setSystemReserved(true);
    decommissioningList_allReferences.setUndeletable(true);
    decommissioningList_allReferences.setEssential(true);
    decommissioningList_allReferences.setMultiLingual(false);
    MetadataBuilder decommissioningList_allRemovedAuths = decommissioningListSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    decommissioningList_allRemovedAuths.setMultivalue(true);
    decommissioningList_allRemovedAuths.setSystemReserved(true);
    decommissioningList_allRemovedAuths.setUndeletable(true);
    decommissioningList_allRemovedAuths.setEssential(true);
    decommissioningList_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder decommissioningList_analogicalMedium = decommissioningListSchema.create("analogicalMedium").setType(MetadataValueType.BOOLEAN);
    decommissioningList_analogicalMedium.setUndeletable(true);
    decommissioningList_analogicalMedium.setEssential(true);
    MetadataBuilder decommissioningList_approvalDate = decommissioningListSchema.create("approvalDate").setType(MetadataValueType.DATE);
    decommissioningList_approvalDate.setUndeletable(true);
    decommissioningList_approvalDate.setEssential(true);
    MetadataBuilder decommissioningList_approvalRequest = decommissioningListSchema.create("approvalRequest").setType(MetadataValueType.REFERENCE);
    decommissioningList_approvalRequest.setUndeletable(true);
    decommissioningList_approvalRequest.setEssential(true);
    decommissioningList_approvalRequest.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder decommissioningList_approvalRequestDate = decommissioningListSchema.create("approvalRequestDate").setType(MetadataValueType.DATE);
    decommissioningList_approvalRequestDate.setUndeletable(true);
    decommissioningList_approvalRequestDate.setEssential(true);
    MetadataBuilder decommissioningList_approvalUser = decommissioningListSchema.create("approvalUser").setType(MetadataValueType.REFERENCE);
    decommissioningList_approvalUser.setUndeletable(true);
    decommissioningList_approvalUser.setEssential(true);
    decommissioningList_approvalUser.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder decommissioningList_attachedAncestors = decommissioningListSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    decommissioningList_attachedAncestors.setMultivalue(true);
    decommissioningList_attachedAncestors.setSystemReserved(true);
    decommissioningList_attachedAncestors.setUndeletable(true);
    decommissioningList_attachedAncestors.setEssential(true);
    decommissioningList_attachedAncestors.setMultiLingual(false);
    MetadataBuilder decommissioningList_autocomplete = decommissioningListSchema.create("autocomplete").setType(MetadataValueType.STRING);
    decommissioningList_autocomplete.setMultivalue(true);
    decommissioningList_autocomplete.setSystemReserved(true);
    decommissioningList_autocomplete.setUndeletable(true);
    decommissioningList_autocomplete.setEssential(true);
    decommissioningList_autocomplete.setMultiLingual(true);
    MetadataBuilder decommissioningList_caption = decommissioningListSchema.create("caption").setType(MetadataValueType.STRING);
    decommissioningList_caption.setSystemReserved(true);
    decommissioningList_caption.setUndeletable(true);
    decommissioningList_caption.setEssential(true);
    decommissioningList_caption.setMultiLingual(false);
    decommissioningList_caption.setSortable(true);
    MetadataBuilder decommissioningList_comments = decommissioningListSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    decommissioningList_comments.setMultivalue(true);
    decommissioningList_comments.setUndeletable(true);
    decommissioningList_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder decommissioningList_containerDetails = decommissioningListSchema.create("containerDetails").setType(MetadataValueType.STRUCTURE);
    decommissioningList_containerDetails.setMultivalue(true);
    decommissioningList_containerDetails.setUndeletable(true);
    decommissioningList_containerDetails.setEssential(true);
    decommissioningList_containerDetails.defineStructureFactory(DecomListContainerDetailFactory.class);
    MetadataBuilder decommissioningList_containers = decommissioningListSchema.create("containers").setType(MetadataValueType.REFERENCE);
    decommissioningList_containers.setMultivalue(true);
    decommissioningList_containers.setUndeletable(true);
    decommissioningList_containers.setEssential(true);
    decommissioningList_containers.defineReferencesTo(types.getSchemaType("containerRecord"));
    MetadataBuilder decommissioningList_createdBy = decommissioningListSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    decommissioningList_createdBy.setSystemReserved(true);
    decommissioningList_createdBy.setUndeletable(true);
    decommissioningList_createdBy.setEssential(true);
    decommissioningList_createdBy.setMultiLingual(false);
    decommissioningList_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder decommissioningList_createdOn = decommissioningListSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    decommissioningList_createdOn.setSystemReserved(true);
    decommissioningList_createdOn.setUndeletable(true);
    decommissioningList_createdOn.setEssential(true);
    decommissioningList_createdOn.setMultiLingual(false);
    decommissioningList_createdOn.setSortable(true);
    MetadataBuilder decommissioningList_deleted = decommissioningListSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    decommissioningList_deleted.setSystemReserved(true);
    decommissioningList_deleted.setUndeletable(true);
    decommissioningList_deleted.setEssential(true);
    decommissioningList_deleted.setMultiLingual(false);
    MetadataBuilder decommissioningList_denyTokens = decommissioningListSchema.create("denyTokens").setType(MetadataValueType.STRING);
    decommissioningList_denyTokens.setMultivalue(true);
    decommissioningList_denyTokens.setSystemReserved(true);
    decommissioningList_denyTokens.setUndeletable(true);
    decommissioningList_denyTokens.setEssential(true);
    decommissioningList_denyTokens.setMultiLingual(false);
    decommissioningList_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder decommissioningList_description = decommissioningListSchema.create("description").setType(MetadataValueType.TEXT);
    decommissioningList_description.setUndeletable(true);
    decommissioningList_description.setEssentialInSummary(true);
    decommissioningList_description.setSearchable(true);
    MetadataBuilder decommissioningList_detachedauthorizations = decommissioningListSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    decommissioningList_detachedauthorizations.setSystemReserved(true);
    decommissioningList_detachedauthorizations.setUndeletable(true);
    decommissioningList_detachedauthorizations.setEssential(true);
    decommissioningList_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder decommissioningList_documents = decommissioningListSchema.create("documents").setType(MetadataValueType.REFERENCE);
    decommissioningList_documents.setMultivalue(true);
    decommissioningList_documents.setUndeletable(true);
    decommissioningList_documents.defineReferencesTo(types.getSchemaType("document"));
    MetadataBuilder decommissioningList_documentsReportContent = decommissioningListSchema.create("documentsReportContent").setType(MetadataValueType.CONTENT);
    decommissioningList_documentsReportContent.setUndeletable(true);
    decommissioningList_documentsReportContent.defineStructureFactory(ContentFactory.class);
    MetadataBuilder decommissioningList_electronicMedium = decommissioningListSchema.create("electronicMedium").setType(MetadataValueType.BOOLEAN);
    decommissioningList_electronicMedium.setUndeletable(true);
    decommissioningList_electronicMedium.setEssential(true);
    MetadataBuilder decommissioningList_errorOnPhysicalDeletion = decommissioningListSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    decommissioningList_errorOnPhysicalDeletion.setSystemReserved(true);
    decommissioningList_errorOnPhysicalDeletion.setUndeletable(true);
    decommissioningList_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder decommissioningList_estimatedSize = decommissioningListSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  decommissioningList_estimatedSize.setSystemReserved(true);
	  decommissioningList_estimatedSize.setUndeletable(true);
	  decommissioningList_estimatedSize.setEssential(true);
	  decommissioningList_estimatedSize.setMultiLingual(false);
    MetadataBuilder decommissioningList_filingSpace = decommissioningListSchema.create("filingSpace").setType(MetadataValueType.REFERENCE);
    decommissioningList_filingSpace.setUndeletable(true);
    decommissioningList_filingSpace.setEssential(true);
    decommissioningList_filingSpace.defineReferencesTo(types.getSchemaType("filingSpace"));
    MetadataBuilder decommissioningList_folderDetails = decommissioningListSchema.create("folderDetails").setType(MetadataValueType.STRUCTURE);
    decommissioningList_folderDetails.setMultivalue(true);
    decommissioningList_folderDetails.setUndeletable(true);
    decommissioningList_folderDetails.setEssential(true);
    decommissioningList_folderDetails.defineStructureFactory(DecomListFolderDetailFactory.class);
    MetadataBuilder decommissioningList_folders = decommissioningListSchema.create("folders").setType(MetadataValueType.REFERENCE);
    decommissioningList_folders.setMultivalue(true);
    decommissioningList_folders.setUndeletable(true);
    decommissioningList_folders.setEssential(true);
    decommissioningList_folders.defineReferencesTo(types.getSchemaType("folder"));
    MetadataBuilder decommissioningList_foldersMediaTypes = decommissioningListSchema.create("foldersMediaTypes").setType(MetadataValueType.ENUM);
    decommissioningList_foldersMediaTypes.setMultivalue(true);
    decommissioningList_foldersMediaTypes.setUndeletable(true);
    decommissioningList_foldersMediaTypes.setEssential(true);
    decommissioningList_foldersMediaTypes.defineAsEnum(FolderMediaType.class);
    MetadataBuilder decommissioningList_foldersReportContent = decommissioningListSchema.create("foldersReportContent").setType(MetadataValueType.CONTENT);
    decommissioningList_foldersReportContent.setUndeletable(true);
    decommissioningList_foldersReportContent.defineStructureFactory(ContentFactory.class);
    MetadataBuilder decommissioningList_id = decommissioningListSchema.create("id").setType(MetadataValueType.STRING);
    decommissioningList_id.setDefaultRequirement(true);
    decommissioningList_id.setSystemReserved(true);
    decommissioningList_id.setUndeletable(true);
    decommissioningList_id.setEssential(true);
    decommissioningList_id.setMultiLingual(false);
    decommissioningList_id.setSearchable(true);
    decommissioningList_id.setSortable(true);
    decommissioningList_id.setUniqueValue(true);
    decommissioningList_id.setUnmodifiable(true);
    MetadataBuilder decommissioningList_legacyIdentifier = decommissioningListSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    decommissioningList_legacyIdentifier.setDefaultRequirement(true);
    decommissioningList_legacyIdentifier.setSystemReserved(true);
    decommissioningList_legacyIdentifier.setUndeletable(true);
    decommissioningList_legacyIdentifier.setEssential(true);
    decommissioningList_legacyIdentifier.setMultiLingual(false);
    decommissioningList_legacyIdentifier.setSearchable(true);
    decommissioningList_legacyIdentifier.setUniqueValue(true);
    decommissioningList_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder decommissioningList_logicallyDeletedOn = decommissioningListSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    decommissioningList_logicallyDeletedOn.setSystemReserved(true);
    decommissioningList_logicallyDeletedOn.setUndeletable(true);
    decommissioningList_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder decommissioningList_manualTokens = decommissioningListSchema.create("manualTokens").setType(MetadataValueType.STRING);
    decommissioningList_manualTokens.setMultivalue(true);
    decommissioningList_manualTokens.setSystemReserved(true);
    decommissioningList_manualTokens.setUndeletable(true);
    decommissioningList_manualTokens.setEssential(true);
    decommissioningList_manualTokens.setMultiLingual(false);
    decommissioningList_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder decommissioningList_markedForParsing = decommissioningListSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    decommissioningList_markedForParsing.setSystemReserved(true);
    decommissioningList_markedForParsing.setUndeletable(true);
    decommissioningList_markedForParsing.setEssential(true);
    decommissioningList_markedForParsing.setMultiLingual(false);
    MetadataBuilder decommissioningList_markedForPreviewConversion = decommissioningListSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    decommissioningList_markedForPreviewConversion.setSystemReserved(true);
    decommissioningList_markedForPreviewConversion.setUndeletable(true);
    decommissioningList_markedForPreviewConversion.setEssential(true);
    decommissioningList_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder decommissioningList_markedForReindexing = decommissioningListSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    decommissioningList_markedForReindexing.setSystemReserved(true);
    decommissioningList_markedForReindexing.setUndeletable(true);
    decommissioningList_markedForReindexing.setEssential(true);
    decommissioningList_markedForReindexing.setMultiLingual(false);
    MetadataBuilder decommissioningList_migrationDataVersion = decommissioningListSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    decommissioningList_migrationDataVersion.setSystemReserved(true);
    decommissioningList_migrationDataVersion.setUndeletable(true);
    decommissioningList_migrationDataVersion.setEssential(true);
    decommissioningList_migrationDataVersion.setMultiLingual(false);
    decommissioningList_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder decommissioningList_modifiedBy = decommissioningListSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    decommissioningList_modifiedBy.setSystemReserved(true);
    decommissioningList_modifiedBy.setUndeletable(true);
    decommissioningList_modifiedBy.setEssential(true);
    decommissioningList_modifiedBy.setMultiLingual(false);
    decommissioningList_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder decommissioningList_modifiedOn = decommissioningListSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    decommissioningList_modifiedOn.setSystemReserved(true);
    decommissioningList_modifiedOn.setUndeletable(true);
    decommissioningList_modifiedOn.setEssential(true);
    decommissioningList_modifiedOn.setMultiLingual(false);
    decommissioningList_modifiedOn.setSortable(true);
    MetadataBuilder decommissioningList_originArchivisticStatus = decommissioningListSchema.create("originArchivisticStatus").setType(MetadataValueType.ENUM);
    decommissioningList_originArchivisticStatus.setSystemReserved(true);
    decommissioningList_originArchivisticStatus.setUndeletable(true);
    decommissioningList_originArchivisticStatus.setEssential(true);
    decommissioningList_originArchivisticStatus.defineAsEnum(OriginStatus.class);
    MetadataBuilder decommissioningList_path = decommissioningListSchema.create("path").setType(MetadataValueType.STRING);
    decommissioningList_path.setMultivalue(true);
    decommissioningList_path.setSystemReserved(true);
    decommissioningList_path.setUndeletable(true);
    decommissioningList_path.setEssential(true);
    decommissioningList_path.setMultiLingual(false);
    MetadataBuilder decommissioningList_pathParts = decommissioningListSchema.create("pathParts").setType(MetadataValueType.STRING);
    decommissioningList_pathParts.setMultivalue(true);
    decommissioningList_pathParts.setSystemReserved(true);
    decommissioningList_pathParts.setUndeletable(true);
    decommissioningList_pathParts.setEssential(true);
    decommissioningList_pathParts.setMultiLingual(false);
    MetadataBuilder decommissioningList_pendingValidations = decommissioningListSchema.create("pendingValidations").setType(MetadataValueType.REFERENCE);
    decommissioningList_pendingValidations.setMultivalue(true);
    decommissioningList_pendingValidations.setUndeletable(true);
    decommissioningList_pendingValidations.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder decommissioningList_principalpath = decommissioningListSchema.create("principalpath").setType(MetadataValueType.STRING);
    decommissioningList_principalpath.setSystemReserved(true);
    decommissioningList_principalpath.setUndeletable(true);
    decommissioningList_principalpath.setEssential(true);
    decommissioningList_principalpath.setMultiLingual(false);
    MetadataBuilder decommissioningList_processingDate = decommissioningListSchema.create("processingDate").setType(MetadataValueType.DATE);
    decommissioningList_processingDate.setUndeletable(true);
    decommissioningList_processingDate.setEssential(true);
    MetadataBuilder decommissioningList_processingUser = decommissioningListSchema.create("processingUser").setType(MetadataValueType.REFERENCE);
    decommissioningList_processingUser.setUndeletable(true);
    decommissioningList_processingUser.setEssential(true);
    decommissioningList_processingUser.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder decommissioningList_removedauthorizations = decommissioningListSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    decommissioningList_removedauthorizations.setMultivalue(true);
    decommissioningList_removedauthorizations.setSystemReserved(true);
    decommissioningList_removedauthorizations.setUndeletable(true);
    decommissioningList_removedauthorizations.setEssential(true);
    decommissioningList_removedauthorizations.setMultiLingual(false);
    MetadataBuilder decommissioningList_schema = decommissioningListSchema.create("schema").setType(MetadataValueType.STRING);
    decommissioningList_schema.setDefaultRequirement(true);
    decommissioningList_schema.setSystemReserved(true);
    decommissioningList_schema.setUndeletable(true);
    decommissioningList_schema.setEssential(true);
    decommissioningList_schema.setMultiLingual(false);
    MetadataBuilder decommissioningList_shareDenyTokens = decommissioningListSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    decommissioningList_shareDenyTokens.setMultivalue(true);
    decommissioningList_shareDenyTokens.setSystemReserved(true);
    decommissioningList_shareDenyTokens.setUndeletable(true);
    decommissioningList_shareDenyTokens.setEssential(true);
    decommissioningList_shareDenyTokens.setMultiLingual(false);
    decommissioningList_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder decommissioningList_shareTokens = decommissioningListSchema.create("shareTokens").setType(MetadataValueType.STRING);
    decommissioningList_shareTokens.setMultivalue(true);
    decommissioningList_shareTokens.setSystemReserved(true);
    decommissioningList_shareTokens.setUndeletable(true);
    decommissioningList_shareTokens.setEssential(true);
    decommissioningList_shareTokens.setMultiLingual(false);
    decommissioningList_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder decommissioningList_status = decommissioningListSchema.create("status").setType(MetadataValueType.ENUM);
    decommissioningList_status.setUndeletable(true);
    decommissioningList_status.setEssential(true);
    decommissioningList_status.defineAsEnum(DecomListStatus.class);
    MetadataBuilder decommissioningList_title = decommissioningListSchema.create("title").setType(MetadataValueType.STRING);
    decommissioningList_title.setDefaultRequirement(true);
    decommissioningList_title.setUndeletable(true);
    decommissioningList_title.setEssential(true);
    decommissioningList_title.setMultiLingual(false);
    decommissioningList_title.setSchemaAutocomplete(true);
    decommissioningList_title.setSearchable(true);
    MetadataBuilder decommissioningList_tokens = decommissioningListSchema.create("tokens").setType(MetadataValueType.STRING);
    decommissioningList_tokens.setMultivalue(true);
    decommissioningList_tokens.setSystemReserved(true);
    decommissioningList_tokens.setUndeletable(true);
    decommissioningList_tokens.setEssential(true);
    decommissioningList_tokens.setMultiLingual(false);
    MetadataBuilder decommissioningList_tokensHierarchy = decommissioningListSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    decommissioningList_tokensHierarchy.setMultivalue(true);
    decommissioningList_tokensHierarchy.setSystemReserved(true);
    decommissioningList_tokensHierarchy.setUndeletable(true);
    decommissioningList_tokensHierarchy.setEssential(true);
    decommissioningList_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder decommissioningList_type = decommissioningListSchema.create("type").setType(MetadataValueType.ENUM);
    decommissioningList_type.setDefaultRequirement(true);
    decommissioningList_type.setSystemReserved(true);
    decommissioningList_type.setUndeletable(true);
    decommissioningList_type.setEssential(true);
    decommissioningList_type.setSearchable(true);
    decommissioningList_type.defineAsEnum(DecommissioningListType.class);
    MetadataBuilder decommissioningList_uniform = decommissioningListSchema.create("uniform").setType(MetadataValueType.BOOLEAN);
    decommissioningList_uniform.setUndeletable(true);
    decommissioningList_uniform.setEssential(true);
    MetadataBuilder decommissioningList_uniformCategory = decommissioningListSchema.create("uniformCategory").setType(MetadataValueType.REFERENCE);
    decommissioningList_uniformCategory.setUndeletable(true);
    decommissioningList_uniformCategory.setEssential(true);
    decommissioningList_uniformCategory.defineReferencesTo(types.getSchemaType("category"));
    MetadataBuilder decommissioningList_uniformCopyRule = decommissioningListSchema.create("uniformCopyRule").setType(MetadataValueType.STRUCTURE);
    decommissioningList_uniformCopyRule.setUndeletable(true);
    decommissioningList_uniformCopyRule.setEssential(true);
    decommissioningList_uniformCopyRule.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder decommissioningList_uniformCopyType = decommissioningListSchema.create("uniformCopyType").setType(MetadataValueType.ENUM);
    decommissioningList_uniformCopyType.setUndeletable(true);
    decommissioningList_uniformCopyType.setEssential(true);
    decommissioningList_uniformCopyType.defineAsEnum(CopyType.class);
    MetadataBuilder decommissioningList_uniformRule = decommissioningListSchema.create("uniformRule").setType(MetadataValueType.REFERENCE);
    decommissioningList_uniformRule.setUndeletable(true);
    decommissioningList_uniformRule.setEssential(true);
    decommissioningList_uniformRule.defineReferencesTo(types.getSchemaType("retentionRule"));
    MetadataBuilder decommissioningList_validationDate = decommissioningListSchema.create("validationDate").setType(MetadataValueType.DATE);
    decommissioningList_validationDate.setUndeletable(true);
    decommissioningList_validationDate.setEnabled(false);
    MetadataBuilder decommissioningList_validationUser = decommissioningListSchema.create("validationUser").setType(MetadataValueType.REFERENCE);
    decommissioningList_validationUser.setUndeletable(true);
    decommissioningList_validationUser.setEnabled(false);
    decommissioningList_validationUser.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder decommissioningList_validations = decommissioningListSchema.create("validations").setType(MetadataValueType.STRUCTURE);
    decommissioningList_validations.setMultivalue(true);
    decommissioningList_validations.setUndeletable(true);
    decommissioningList_validations.defineStructureFactory(DecomListValidationFactory.class);
    MetadataBuilder decommissioningList_visibleInTrees = decommissioningListSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    decommissioningList_visibleInTrees.setSystemReserved(true);
    decommissioningList_visibleInTrees.setUndeletable(true);
    decommissioningList_visibleInTrees.setEssential(true);
    decommissioningList_visibleInTrees.setMultiLingual(false);
  }

  private void createEmailToSendSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder emailToSendSchemaType, MetadataSchemaBuilder emailToSendSchema) {
  }

  private void createEventSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder eventSchemaType, MetadataSchemaBuilder eventSchema) {
    MetadataBuilder event_accepted = eventSchema.create("accepted").setType(MetadataValueType.BOOLEAN);
    MetadataBuilder event_description = eventSchema.create("description").setType(MetadataValueType.TEXT);
    MetadataBuilder event_receiverName = eventSchema.create("receiverName").setType(MetadataValueType.REFERENCE);
    event_receiverName.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder event_task = eventSchema.create("task").setType(MetadataValueType.REFERENCE);
    event_task.defineReferencesTo(types.getSchemaType("userTask"));
  }

  private void createGroupSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder groupSchemaType, MetadataSchemaBuilder groupSchema) {
  }

  private void createWorkflowInstanceSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder workflowInstanceSchemaType, MetadataSchemaBuilder workflowInstanceSchema) {
  }

  private void createBagInfoSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder bagInfoSchemaType, MetadataSchemaBuilder bagInfoSchema) {
    MetadataBuilder bagInfo_IdOrganismeVerseurOuDonateur = bagInfoSchema.create("IdOrganismeVerseurOuDonateur").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_address = bagInfoSchema.create("address").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_allReferences = bagInfoSchema.create("allReferences").setType(MetadataValueType.STRING);
    bagInfo_allReferences.setMultivalue(true);
    bagInfo_allReferences.setSystemReserved(true);
    bagInfo_allReferences.setUndeletable(true);
    bagInfo_allReferences.setMultiLingual(false);
    MetadataBuilder bagInfo_allRemovedAuths = bagInfoSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    bagInfo_allRemovedAuths.setMultivalue(true);
    bagInfo_allRemovedAuths.setSystemReserved(true);
    bagInfo_allRemovedAuths.setUndeletable(true);
    bagInfo_allRemovedAuths.setEssential(true);
    bagInfo_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder bagInfo_archiveTitle = bagInfoSchema.create("archiveTitle").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_attachedAncestors = bagInfoSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    bagInfo_attachedAncestors.setMultivalue(true);
    bagInfo_attachedAncestors.setSystemReserved(true);
    bagInfo_attachedAncestors.setUndeletable(true);
    bagInfo_attachedAncestors.setEssential(true);
    bagInfo_attachedAncestors.setMultiLingual(false);
    MetadataBuilder bagInfo_autocomplete = bagInfoSchema.create("autocomplete").setType(MetadataValueType.STRING);
    bagInfo_autocomplete.setMultivalue(true);
    bagInfo_autocomplete.setSystemReserved(true);
    bagInfo_autocomplete.setUndeletable(true);
    bagInfo_autocomplete.setEssential(true);
    bagInfo_autocomplete.setMultiLingual(true);
    MetadataBuilder bagInfo_caption = bagInfoSchema.create("caption").setType(MetadataValueType.STRING);
    bagInfo_caption.setSystemReserved(true);
    bagInfo_caption.setUndeletable(true);
    bagInfo_caption.setMultiLingual(false);
    bagInfo_caption.setSortable(true);
    MetadataBuilder bagInfo_categoryDocument = bagInfoSchema.create("categoryDocument").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_courrielResponsable = bagInfoSchema.create("courrielResponsable").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_createdBy = bagInfoSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    bagInfo_createdBy.setSystemReserved(true);
    bagInfo_createdBy.setUndeletable(true);
    bagInfo_createdBy.setMultiLingual(false);
    bagInfo_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder bagInfo_createdOn = bagInfoSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    bagInfo_createdOn.setSystemReserved(true);
    bagInfo_createdOn.setUndeletable(true);
    bagInfo_createdOn.setMultiLingual(false);
    bagInfo_createdOn.setSortable(true);
    MetadataBuilder bagInfo_deleted = bagInfoSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    bagInfo_deleted.setSystemReserved(true);
    bagInfo_deleted.setUndeletable(true);
    bagInfo_deleted.setMultiLingual(false);
    MetadataBuilder bagInfo_denyTokens = bagInfoSchema.create("denyTokens").setType(MetadataValueType.STRING);
    bagInfo_denyTokens.setMultivalue(true);
    bagInfo_denyTokens.setSystemReserved(true);
    bagInfo_denyTokens.setUndeletable(true);
    bagInfo_denyTokens.setMultiLingual(false);
    bagInfo_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder bagInfo_descriptionSommaire = bagInfoSchema.create("descriptionSommaire").setType(MetadataValueType.TEXT);
    MetadataBuilder bagInfo_detachedauthorizations = bagInfoSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    bagInfo_detachedauthorizations.setSystemReserved(true);
    bagInfo_detachedauthorizations.setUndeletable(true);
    bagInfo_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder bagInfo_encodage = bagInfoSchema.create("encodage").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_entiteResponsable = bagInfoSchema.create("entiteResponsable").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_errorOnPhysicalDeletion = bagInfoSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    bagInfo_errorOnPhysicalDeletion.setSystemReserved(true);
    bagInfo_errorOnPhysicalDeletion.setUndeletable(true);
    bagInfo_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder bagInfo_estimatedSize = bagInfoSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  bagInfo_estimatedSize.setSystemReserved(true);
	  bagInfo_estimatedSize.setUndeletable(true);
	  bagInfo_estimatedSize.setMultiLingual(false);
    MetadataBuilder bagInfo_id = bagInfoSchema.create("id").setType(MetadataValueType.STRING);
    bagInfo_id.setDefaultRequirement(true);
    bagInfo_id.setSystemReserved(true);
    bagInfo_id.setUndeletable(true);
    bagInfo_id.setMultiLingual(false);
    bagInfo_id.setSearchable(true);
    bagInfo_id.setSortable(true);
    bagInfo_id.setUniqueValue(true);
    bagInfo_id.setUnmodifiable(true);
    MetadataBuilder bagInfo_identificationOrganismeVerseurOuDonateur = bagInfoSchema.create("identificationOrganismeVerseurOuDonateur").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_identificationResponsable = bagInfoSchema.create("identificationResponsable").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_legacyIdentifier = bagInfoSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    bagInfo_legacyIdentifier.setDefaultRequirement(true);
    bagInfo_legacyIdentifier.setSystemReserved(true);
    bagInfo_legacyIdentifier.setUndeletable(true);
    bagInfo_legacyIdentifier.setMultiLingual(false);
    bagInfo_legacyIdentifier.setSearchable(true);
    bagInfo_legacyIdentifier.setUniqueValue(true);
    bagInfo_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder bagInfo_logicallyDeletedOn = bagInfoSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    bagInfo_logicallyDeletedOn.setSystemReserved(true);
    bagInfo_logicallyDeletedOn.setUndeletable(true);
    bagInfo_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder bagInfo_manualTokens = bagInfoSchema.create("manualTokens").setType(MetadataValueType.STRING);
    bagInfo_manualTokens.setMultivalue(true);
    bagInfo_manualTokens.setSystemReserved(true);
    bagInfo_manualTokens.setUndeletable(true);
    bagInfo_manualTokens.setMultiLingual(false);
    bagInfo_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder bagInfo_markedForParsing = bagInfoSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    bagInfo_markedForParsing.setSystemReserved(true);
    bagInfo_markedForParsing.setUndeletable(true);
    bagInfo_markedForParsing.setMultiLingual(false);
    MetadataBuilder bagInfo_markedForPreviewConversion = bagInfoSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    bagInfo_markedForPreviewConversion.setSystemReserved(true);
    bagInfo_markedForPreviewConversion.setUndeletable(true);
    bagInfo_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder bagInfo_markedForReindexing = bagInfoSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    bagInfo_markedForReindexing.setSystemReserved(true);
    bagInfo_markedForReindexing.setUndeletable(true);
    bagInfo_markedForReindexing.setMultiLingual(false);
    MetadataBuilder bagInfo_methodTransfere = bagInfoSchema.create("methodTransfere").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_migrationDataVersion = bagInfoSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    bagInfo_migrationDataVersion.setSystemReserved(true);
    bagInfo_migrationDataVersion.setUndeletable(true);
    bagInfo_migrationDataVersion.setMultiLingual(false);
    bagInfo_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder bagInfo_modifiedBy = bagInfoSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    bagInfo_modifiedBy.setSystemReserved(true);
    bagInfo_modifiedBy.setUndeletable(true);
    bagInfo_modifiedBy.setMultiLingual(false);
    bagInfo_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder bagInfo_modifiedOn = bagInfoSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    bagInfo_modifiedOn.setSystemReserved(true);
    bagInfo_modifiedOn.setUndeletable(true);
    bagInfo_modifiedOn.setMultiLingual(false);
    bagInfo_modifiedOn.setSortable(true);
    MetadataBuilder bagInfo_note = bagInfoSchema.create("note").setType(MetadataValueType.TEXT);
    MetadataBuilder bagInfo_numeroTelephoneResponsable = bagInfoSchema.create("numeroTelephoneResponsable").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_path = bagInfoSchema.create("path").setType(MetadataValueType.STRING);
    bagInfo_path.setMultivalue(true);
    bagInfo_path.setSystemReserved(true);
    bagInfo_path.setUndeletable(true);
    bagInfo_path.setMultiLingual(false);
    MetadataBuilder bagInfo_pathParts = bagInfoSchema.create("pathParts").setType(MetadataValueType.STRING);
    bagInfo_pathParts.setMultivalue(true);
    bagInfo_pathParts.setSystemReserved(true);
    bagInfo_pathParts.setUndeletable(true);
    bagInfo_pathParts.setMultiLingual(false);
    MetadataBuilder bagInfo_principalpath = bagInfoSchema.create("principalpath").setType(MetadataValueType.STRING);
    bagInfo_principalpath.setSystemReserved(true);
    bagInfo_principalpath.setUndeletable(true);
    bagInfo_principalpath.setMultiLingual(false);
    MetadataBuilder bagInfo_regionAdministrative = bagInfoSchema.create("regionAdministrative").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_removedauthorizations = bagInfoSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    bagInfo_removedauthorizations.setMultivalue(true);
    bagInfo_removedauthorizations.setSystemReserved(true);
    bagInfo_removedauthorizations.setUndeletable(true);
    bagInfo_removedauthorizations.setMultiLingual(false);
    MetadataBuilder bagInfo_restrictionAccessibilite = bagInfoSchema.create("restrictionAccessibilite").setType(MetadataValueType.STRING);
    MetadataBuilder bagInfo_schema = bagInfoSchema.create("schema").setType(MetadataValueType.STRING);
    bagInfo_schema.setDefaultRequirement(true);
    bagInfo_schema.setSystemReserved(true);
    bagInfo_schema.setUndeletable(true);
    bagInfo_schema.setMultiLingual(false);
    MetadataBuilder bagInfo_shareDenyTokens = bagInfoSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    bagInfo_shareDenyTokens.setMultivalue(true);
    bagInfo_shareDenyTokens.setSystemReserved(true);
    bagInfo_shareDenyTokens.setUndeletable(true);
    bagInfo_shareDenyTokens.setMultiLingual(false);
    bagInfo_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder bagInfo_shareTokens = bagInfoSchema.create("shareTokens").setType(MetadataValueType.STRING);
    bagInfo_shareTokens.setMultivalue(true);
    bagInfo_shareTokens.setSystemReserved(true);
    bagInfo_shareTokens.setUndeletable(true);
    bagInfo_shareTokens.setMultiLingual(false);
    bagInfo_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder bagInfo_title = bagInfoSchema.create("title").setType(MetadataValueType.STRING);
    bagInfo_title.setUndeletable(true);
    bagInfo_title.setMultiLingual(false);
    bagInfo_title.setSchemaAutocomplete(true);
    bagInfo_title.setSearchable(true);
    MetadataBuilder bagInfo_tokens = bagInfoSchema.create("tokens").setType(MetadataValueType.STRING);
    bagInfo_tokens.setMultivalue(true);
    bagInfo_tokens.setSystemReserved(true);
    bagInfo_tokens.setUndeletable(true);
    bagInfo_tokens.setMultiLingual(false);
    MetadataBuilder bagInfo_tokensHierarchy = bagInfoSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    bagInfo_tokensHierarchy.setMultivalue(true);
    bagInfo_tokensHierarchy.setSystemReserved(true);
    bagInfo_tokensHierarchy.setUndeletable(true);
    bagInfo_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder bagInfo_visibleInTrees = bagInfoSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    bagInfo_visibleInTrees.setSystemReserved(true);
    bagInfo_visibleInTrees.setUndeletable(true);
    bagInfo_visibleInTrees.setMultiLingual(false);
  }

  private void createDdvMediumTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvMediumTypeSchemaType, MetadataSchemaBuilder ddvMediumTypeSchema) {
    MetadataBuilder ddvMediumType_activatedOnContent = ddvMediumTypeSchema.create("activatedOnContent").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_activatedOnContent.setUndeletable(true);
    ddvMediumType_activatedOnContent.setEssential(true);
    ddvMediumType_activatedOnContent.setDefaultValue(false);
    MetadataBuilder ddvMediumType_allReferences = ddvMediumTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvMediumType_allReferences.setMultivalue(true);
    ddvMediumType_allReferences.setSystemReserved(true);
    ddvMediumType_allReferences.setUndeletable(true);
    ddvMediumType_allReferences.setMultiLingual(false);
    MetadataBuilder ddvMediumType_allRemovedAuths = ddvMediumTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvMediumType_allRemovedAuths.setMultivalue(true);
    ddvMediumType_allRemovedAuths.setSystemReserved(true);
    ddvMediumType_allRemovedAuths.setUndeletable(true);
    ddvMediumType_allRemovedAuths.setEssential(true);
    ddvMediumType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvMediumType_analogical = ddvMediumTypeSchema.create("analogical").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_analogical.setDefaultRequirement(true);
    MetadataBuilder ddvMediumType_attachedAncestors = ddvMediumTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvMediumType_attachedAncestors.setMultivalue(true);
    ddvMediumType_attachedAncestors.setSystemReserved(true);
    ddvMediumType_attachedAncestors.setUndeletable(true);
    ddvMediumType_attachedAncestors.setEssential(true);
    ddvMediumType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvMediumType_autocomplete = ddvMediumTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvMediumType_autocomplete.setMultivalue(true);
    ddvMediumType_autocomplete.setSystemReserved(true);
    ddvMediumType_autocomplete.setUndeletable(true);
    ddvMediumType_autocomplete.setEssential(true);
    ddvMediumType_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvMediumType_caption = ddvMediumTypeSchema.create("caption").setType(MetadataValueType.STRING);
    ddvMediumType_caption.setSystemReserved(true);
    ddvMediumType_caption.setUndeletable(true);
    ddvMediumType_caption.setMultiLingual(false);
    ddvMediumType_caption.setSortable(true);
    MetadataBuilder ddvMediumType_code = ddvMediumTypeSchema.create("code").setType(MetadataValueType.STRING);
    ddvMediumType_code.setDefaultRequirement(true);
    ddvMediumType_code.setUndeletable(true);
    ddvMediumType_code.setSchemaAutocomplete(true);
    ddvMediumType_code.setSearchable(true);
    ddvMediumType_code.setUniqueValue(true);
    MetadataBuilder ddvMediumType_comments = ddvMediumTypeSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvMediumType_comments.setMultivalue(true);
    ddvMediumType_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvMediumType_createdBy = ddvMediumTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvMediumType_createdBy.setSystemReserved(true);
    ddvMediumType_createdBy.setUndeletable(true);
    ddvMediumType_createdBy.setMultiLingual(false);
    ddvMediumType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvMediumType_createdOn = ddvMediumTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvMediumType_createdOn.setSystemReserved(true);
    ddvMediumType_createdOn.setUndeletable(true);
    ddvMediumType_createdOn.setMultiLingual(false);
    ddvMediumType_createdOn.setSortable(true);
    MetadataBuilder ddvMediumType_deleted = ddvMediumTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_deleted.setSystemReserved(true);
    ddvMediumType_deleted.setUndeletable(true);
    ddvMediumType_deleted.setMultiLingual(false);
    MetadataBuilder ddvMediumType_denyTokens = ddvMediumTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvMediumType_denyTokens.setMultivalue(true);
    ddvMediumType_denyTokens.setSystemReserved(true);
    ddvMediumType_denyTokens.setUndeletable(true);
    ddvMediumType_denyTokens.setMultiLingual(false);
    ddvMediumType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvMediumType_description = ddvMediumTypeSchema.create("description").setType(MetadataValueType.TEXT);
    ddvMediumType_description.setUndeletable(true);
    ddvMediumType_description.setMultiLingual(true);
    ddvMediumType_description.setEssentialInSummary(true);
    ddvMediumType_description.setSearchable(true);
    MetadataBuilder ddvMediumType_detachedauthorizations = ddvMediumTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_detachedauthorizations.setSystemReserved(true);
    ddvMediumType_detachedauthorizations.setUndeletable(true);
    ddvMediumType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvMediumType_errorOnPhysicalDeletion = ddvMediumTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvMediumType_errorOnPhysicalDeletion.setUndeletable(true);
    ddvMediumType_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder ddvMediumType_estimatedSize = ddvMediumTypeSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  ddvMediumType_estimatedSize.setSystemReserved(true);
	  ddvMediumType_estimatedSize.setUndeletable(true);
	  ddvMediumType_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvMediumType_id = ddvMediumTypeSchema.create("id").setType(MetadataValueType.STRING);
    ddvMediumType_id.setDefaultRequirement(true);
    ddvMediumType_id.setSystemReserved(true);
    ddvMediumType_id.setUndeletable(true);
    ddvMediumType_id.setMultiLingual(false);
    ddvMediumType_id.setSearchable(true);
    ddvMediumType_id.setSortable(true);
    ddvMediumType_id.setUniqueValue(true);
    ddvMediumType_id.setUnmodifiable(true);
    MetadataBuilder ddvMediumType_legacyIdentifier = ddvMediumTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvMediumType_legacyIdentifier.setDefaultRequirement(true);
    ddvMediumType_legacyIdentifier.setSystemReserved(true);
    ddvMediumType_legacyIdentifier.setUndeletable(true);
    ddvMediumType_legacyIdentifier.setMultiLingual(false);
    ddvMediumType_legacyIdentifier.setSearchable(true);
    ddvMediumType_legacyIdentifier.setUniqueValue(true);
    ddvMediumType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvMediumType_logicallyDeletedOn = ddvMediumTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvMediumType_logicallyDeletedOn.setSystemReserved(true);
    ddvMediumType_logicallyDeletedOn.setUndeletable(true);
    ddvMediumType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvMediumType_manualTokens = ddvMediumTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvMediumType_manualTokens.setMultivalue(true);
    ddvMediumType_manualTokens.setSystemReserved(true);
    ddvMediumType_manualTokens.setUndeletable(true);
    ddvMediumType_manualTokens.setMultiLingual(false);
    ddvMediumType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvMediumType_markedForParsing = ddvMediumTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_markedForParsing.setSystemReserved(true);
    ddvMediumType_markedForParsing.setUndeletable(true);
    ddvMediumType_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvMediumType_markedForPreviewConversion = ddvMediumTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_markedForPreviewConversion.setSystemReserved(true);
    ddvMediumType_markedForPreviewConversion.setUndeletable(true);
    ddvMediumType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvMediumType_markedForReindexing = ddvMediumTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_markedForReindexing.setSystemReserved(true);
    ddvMediumType_markedForReindexing.setUndeletable(true);
    ddvMediumType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvMediumType_migrationDataVersion = ddvMediumTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvMediumType_migrationDataVersion.setSystemReserved(true);
    ddvMediumType_migrationDataVersion.setUndeletable(true);
    ddvMediumType_migrationDataVersion.setMultiLingual(false);
    ddvMediumType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvMediumType_modifiedBy = ddvMediumTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvMediumType_modifiedBy.setSystemReserved(true);
    ddvMediumType_modifiedBy.setUndeletable(true);
    ddvMediumType_modifiedBy.setMultiLingual(false);
    ddvMediumType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvMediumType_modifiedOn = ddvMediumTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvMediumType_modifiedOn.setSystemReserved(true);
    ddvMediumType_modifiedOn.setUndeletable(true);
    ddvMediumType_modifiedOn.setMultiLingual(false);
    ddvMediumType_modifiedOn.setSortable(true);
    MetadataBuilder ddvMediumType_path = ddvMediumTypeSchema.create("path").setType(MetadataValueType.STRING);
    ddvMediumType_path.setMultivalue(true);
    ddvMediumType_path.setSystemReserved(true);
    ddvMediumType_path.setUndeletable(true);
    ddvMediumType_path.setMultiLingual(false);
    MetadataBuilder ddvMediumType_pathParts = ddvMediumTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvMediumType_pathParts.setMultivalue(true);
    ddvMediumType_pathParts.setSystemReserved(true);
    ddvMediumType_pathParts.setUndeletable(true);
    ddvMediumType_pathParts.setMultiLingual(false);
    MetadataBuilder ddvMediumType_principalpath = ddvMediumTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvMediumType_principalpath.setSystemReserved(true);
    ddvMediumType_principalpath.setUndeletable(true);
    ddvMediumType_principalpath.setMultiLingual(false);
    MetadataBuilder ddvMediumType_removedauthorizations = ddvMediumTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvMediumType_removedauthorizations.setMultivalue(true);
    ddvMediumType_removedauthorizations.setSystemReserved(true);
    ddvMediumType_removedauthorizations.setUndeletable(true);
    ddvMediumType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvMediumType_schema = ddvMediumTypeSchema.create("schema").setType(MetadataValueType.STRING);
    ddvMediumType_schema.setDefaultRequirement(true);
    ddvMediumType_schema.setSystemReserved(true);
    ddvMediumType_schema.setUndeletable(true);
    ddvMediumType_schema.setMultiLingual(false);
    MetadataBuilder ddvMediumType_shareDenyTokens = ddvMediumTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvMediumType_shareDenyTokens.setMultivalue(true);
    ddvMediumType_shareDenyTokens.setSystemReserved(true);
    ddvMediumType_shareDenyTokens.setUndeletable(true);
    ddvMediumType_shareDenyTokens.setMultiLingual(false);
    ddvMediumType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvMediumType_shareTokens = ddvMediumTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvMediumType_shareTokens.setMultivalue(true);
    ddvMediumType_shareTokens.setSystemReserved(true);
    ddvMediumType_shareTokens.setUndeletable(true);
    ddvMediumType_shareTokens.setMultiLingual(false);
    ddvMediumType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvMediumType_title = ddvMediumTypeSchema.create("title").setType(MetadataValueType.STRING);
    ddvMediumType_title.setDefaultRequirement(true);
    ddvMediumType_title.setUndeletable(true);
    ddvMediumType_title.setMultiLingual(true);
    ddvMediumType_title.setSchemaAutocomplete(true);
    ddvMediumType_title.setSearchable(true);
    ddvMediumType_title.setUniqueValue(true);
    MetadataBuilder ddvMediumType_tokens = ddvMediumTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvMediumType_tokens.setMultivalue(true);
    ddvMediumType_tokens.setSystemReserved(true);
    ddvMediumType_tokens.setUndeletable(true);
    ddvMediumType_tokens.setMultiLingual(false);
    MetadataBuilder ddvMediumType_tokensHierarchy = ddvMediumTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvMediumType_tokensHierarchy.setMultivalue(true);
    ddvMediumType_tokensHierarchy.setSystemReserved(true);
    ddvMediumType_tokensHierarchy.setUndeletable(true);
    ddvMediumType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvMediumType_visibleInTrees = ddvMediumTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvMediumType_visibleInTrees.setSystemReserved(true);
    ddvMediumType_visibleInTrees.setUndeletable(true);
    ddvMediumType_visibleInTrees.setMultiLingual(false);
  }

  private void createFilingSpaceSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder filingSpaceSchemaType, MetadataSchemaBuilder filingSpaceSchema) {
    MetadataBuilder filingSpace_administrators = filingSpaceSchema.create("administrators").setType(MetadataValueType.REFERENCE);
    filingSpace_administrators.setMultivalue(true);
    filingSpace_administrators.setUndeletable(true);
    filingSpace_administrators.setEssential(true);
    filingSpace_administrators.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder filingSpace_allReferences = filingSpaceSchema.create("allReferences").setType(MetadataValueType.STRING);
    filingSpace_allReferences.setMultivalue(true);
    filingSpace_allReferences.setSystemReserved(true);
    filingSpace_allReferences.setUndeletable(true);
    filingSpace_allReferences.setEssential(true);
    filingSpace_allReferences.setMultiLingual(false);
    MetadataBuilder filingSpace_allRemovedAuths = filingSpaceSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    filingSpace_allRemovedAuths.setMultivalue(true);
    filingSpace_allRemovedAuths.setSystemReserved(true);
    filingSpace_allRemovedAuths.setUndeletable(true);
    filingSpace_allRemovedAuths.setEssential(true);
    filingSpace_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder filingSpace_attachedAncestors = filingSpaceSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    filingSpace_attachedAncestors.setMultivalue(true);
    filingSpace_attachedAncestors.setSystemReserved(true);
    filingSpace_attachedAncestors.setUndeletable(true);
    filingSpace_attachedAncestors.setEssential(true);
    filingSpace_attachedAncestors.setMultiLingual(false);
    MetadataBuilder filingSpace_autocomplete = filingSpaceSchema.create("autocomplete").setType(MetadataValueType.STRING);
    filingSpace_autocomplete.setMultivalue(true);
    filingSpace_autocomplete.setSystemReserved(true);
    filingSpace_autocomplete.setUndeletable(true);
    filingSpace_autocomplete.setEssential(true);
    filingSpace_autocomplete.setMultiLingual(true);
    MetadataBuilder filingSpace_caption = filingSpaceSchema.create("caption").setType(MetadataValueType.STRING);
    filingSpace_caption.setSystemReserved(true);
    filingSpace_caption.setUndeletable(true);
    filingSpace_caption.setEssential(true);
    filingSpace_caption.setMultiLingual(false);
    filingSpace_caption.setSortable(true);
    MetadataBuilder filingSpace_code = filingSpaceSchema.create("code").setType(MetadataValueType.STRING);
    filingSpace_code.setDefaultRequirement(true);
    filingSpace_code.setUndeletable(true);
    filingSpace_code.setEssential(true);
    filingSpace_code.setSchemaAutocomplete(true);
    filingSpace_code.setSearchable(true);
    MetadataBuilder filingSpace_createdBy = filingSpaceSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    filingSpace_createdBy.setSystemReserved(true);
    filingSpace_createdBy.setUndeletable(true);
    filingSpace_createdBy.setEssential(true);
    filingSpace_createdBy.setMultiLingual(false);
    filingSpace_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder filingSpace_createdOn = filingSpaceSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    filingSpace_createdOn.setSystemReserved(true);
    filingSpace_createdOn.setUndeletable(true);
    filingSpace_createdOn.setEssential(true);
    filingSpace_createdOn.setMultiLingual(false);
    filingSpace_createdOn.setSortable(true);
    MetadataBuilder filingSpace_deleted = filingSpaceSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    filingSpace_deleted.setSystemReserved(true);
    filingSpace_deleted.setUndeletable(true);
    filingSpace_deleted.setEssential(true);
    filingSpace_deleted.setMultiLingual(false);
    MetadataBuilder filingSpace_denyTokens = filingSpaceSchema.create("denyTokens").setType(MetadataValueType.STRING);
    filingSpace_denyTokens.setMultivalue(true);
    filingSpace_denyTokens.setSystemReserved(true);
    filingSpace_denyTokens.setUndeletable(true);
    filingSpace_denyTokens.setEssential(true);
    filingSpace_denyTokens.setMultiLingual(false);
    filingSpace_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder filingSpace_description = filingSpaceSchema.create("description").setType(MetadataValueType.STRING);
    filingSpace_description.setUndeletable(true);
    filingSpace_description.setEssentialInSummary(true);
    filingSpace_description.setSearchable(true);
    MetadataBuilder filingSpace_detachedauthorizations = filingSpaceSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    filingSpace_detachedauthorizations.setSystemReserved(true);
    filingSpace_detachedauthorizations.setUndeletable(true);
    filingSpace_detachedauthorizations.setEssential(true);
    filingSpace_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder filingSpace_errorOnPhysicalDeletion = filingSpaceSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    filingSpace_errorOnPhysicalDeletion.setSystemReserved(true);
    filingSpace_errorOnPhysicalDeletion.setUndeletable(true);
    filingSpace_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder filingSpace_estimatedSize = filingSpaceSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  filingSpace_estimatedSize.setSystemReserved(true);
	  filingSpace_estimatedSize.setUndeletable(true);
	  filingSpace_estimatedSize.setEssential(true);
	  filingSpace_estimatedSize.setMultiLingual(false);
    MetadataBuilder filingSpace_id = filingSpaceSchema.create("id").setType(MetadataValueType.STRING);
    filingSpace_id.setDefaultRequirement(true);
    filingSpace_id.setSystemReserved(true);
    filingSpace_id.setUndeletable(true);
    filingSpace_id.setEssential(true);
    filingSpace_id.setMultiLingual(false);
    filingSpace_id.setSearchable(true);
    filingSpace_id.setSortable(true);
    filingSpace_id.setUniqueValue(true);
    filingSpace_id.setUnmodifiable(true);
    MetadataBuilder filingSpace_legacyIdentifier = filingSpaceSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    filingSpace_legacyIdentifier.setDefaultRequirement(true);
    filingSpace_legacyIdentifier.setSystemReserved(true);
    filingSpace_legacyIdentifier.setUndeletable(true);
    filingSpace_legacyIdentifier.setEssential(true);
    filingSpace_legacyIdentifier.setMultiLingual(false);
    filingSpace_legacyIdentifier.setSearchable(true);
    filingSpace_legacyIdentifier.setUniqueValue(true);
    filingSpace_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder filingSpace_logicallyDeletedOn = filingSpaceSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    filingSpace_logicallyDeletedOn.setSystemReserved(true);
    filingSpace_logicallyDeletedOn.setUndeletable(true);
    filingSpace_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder filingSpace_manualTokens = filingSpaceSchema.create("manualTokens").setType(MetadataValueType.STRING);
    filingSpace_manualTokens.setMultivalue(true);
    filingSpace_manualTokens.setSystemReserved(true);
    filingSpace_manualTokens.setUndeletable(true);
    filingSpace_manualTokens.setEssential(true);
    filingSpace_manualTokens.setMultiLingual(false);
    filingSpace_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder filingSpace_markedForParsing = filingSpaceSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    filingSpace_markedForParsing.setSystemReserved(true);
    filingSpace_markedForParsing.setUndeletable(true);
    filingSpace_markedForParsing.setEssential(true);
    filingSpace_markedForParsing.setMultiLingual(false);
    MetadataBuilder filingSpace_markedForPreviewConversion = filingSpaceSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    filingSpace_markedForPreviewConversion.setSystemReserved(true);
    filingSpace_markedForPreviewConversion.setUndeletable(true);
    filingSpace_markedForPreviewConversion.setEssential(true);
    filingSpace_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder filingSpace_markedForReindexing = filingSpaceSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    filingSpace_markedForReindexing.setSystemReserved(true);
    filingSpace_markedForReindexing.setUndeletable(true);
    filingSpace_markedForReindexing.setEssential(true);
    filingSpace_markedForReindexing.setMultiLingual(false);
    MetadataBuilder filingSpace_migrationDataVersion = filingSpaceSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    filingSpace_migrationDataVersion.setSystemReserved(true);
    filingSpace_migrationDataVersion.setUndeletable(true);
    filingSpace_migrationDataVersion.setEssential(true);
    filingSpace_migrationDataVersion.setMultiLingual(false);
    filingSpace_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder filingSpace_modifiedBy = filingSpaceSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    filingSpace_modifiedBy.setSystemReserved(true);
    filingSpace_modifiedBy.setUndeletable(true);
    filingSpace_modifiedBy.setEssential(true);
    filingSpace_modifiedBy.setMultiLingual(false);
    filingSpace_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder filingSpace_modifiedOn = filingSpaceSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    filingSpace_modifiedOn.setSystemReserved(true);
    filingSpace_modifiedOn.setUndeletable(true);
    filingSpace_modifiedOn.setEssential(true);
    filingSpace_modifiedOn.setMultiLingual(false);
    filingSpace_modifiedOn.setSortable(true);
    MetadataBuilder filingSpace_path = filingSpaceSchema.create("path").setType(MetadataValueType.STRING);
    filingSpace_path.setMultivalue(true);
    filingSpace_path.setSystemReserved(true);
    filingSpace_path.setUndeletable(true);
    filingSpace_path.setEssential(true);
    filingSpace_path.setMultiLingual(false);
    MetadataBuilder filingSpace_pathParts = filingSpaceSchema.create("pathParts").setType(MetadataValueType.STRING);
    filingSpace_pathParts.setMultivalue(true);
    filingSpace_pathParts.setSystemReserved(true);
    filingSpace_pathParts.setUndeletable(true);
    filingSpace_pathParts.setEssential(true);
    filingSpace_pathParts.setMultiLingual(false);
    MetadataBuilder filingSpace_principalpath = filingSpaceSchema.create("principalpath").setType(MetadataValueType.STRING);
    filingSpace_principalpath.setSystemReserved(true);
    filingSpace_principalpath.setUndeletable(true);
    filingSpace_principalpath.setEssential(true);
    filingSpace_principalpath.setMultiLingual(false);
    MetadataBuilder filingSpace_removedauthorizations = filingSpaceSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    filingSpace_removedauthorizations.setMultivalue(true);
    filingSpace_removedauthorizations.setSystemReserved(true);
    filingSpace_removedauthorizations.setUndeletable(true);
    filingSpace_removedauthorizations.setEssential(true);
    filingSpace_removedauthorizations.setMultiLingual(false);
    MetadataBuilder filingSpace_schema = filingSpaceSchema.create("schema").setType(MetadataValueType.STRING);
    filingSpace_schema.setDefaultRequirement(true);
    filingSpace_schema.setSystemReserved(true);
    filingSpace_schema.setUndeletable(true);
    filingSpace_schema.setEssential(true);
    filingSpace_schema.setMultiLingual(false);
    MetadataBuilder filingSpace_shareDenyTokens = filingSpaceSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    filingSpace_shareDenyTokens.setMultivalue(true);
    filingSpace_shareDenyTokens.setSystemReserved(true);
    filingSpace_shareDenyTokens.setUndeletable(true);
    filingSpace_shareDenyTokens.setEssential(true);
    filingSpace_shareDenyTokens.setMultiLingual(false);
    filingSpace_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder filingSpace_shareTokens = filingSpaceSchema.create("shareTokens").setType(MetadataValueType.STRING);
    filingSpace_shareTokens.setMultivalue(true);
    filingSpace_shareTokens.setSystemReserved(true);
    filingSpace_shareTokens.setUndeletable(true);
    filingSpace_shareTokens.setEssential(true);
    filingSpace_shareTokens.setMultiLingual(false);
    filingSpace_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder filingSpace_title = filingSpaceSchema.create("title").setType(MetadataValueType.STRING);
    filingSpace_title.setDefaultRequirement(true);
    filingSpace_title.setUndeletable(true);
    filingSpace_title.setEssential(true);
    filingSpace_title.setMultiLingual(false);
    filingSpace_title.setSchemaAutocomplete(true);
    filingSpace_title.setSearchable(true);
    MetadataBuilder filingSpace_tokens = filingSpaceSchema.create("tokens").setType(MetadataValueType.STRING);
    filingSpace_tokens.setMultivalue(true);
    filingSpace_tokens.setSystemReserved(true);
    filingSpace_tokens.setUndeletable(true);
    filingSpace_tokens.setEssential(true);
    filingSpace_tokens.setMultiLingual(false);
    MetadataBuilder filingSpace_tokensHierarchy = filingSpaceSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    filingSpace_tokensHierarchy.setMultivalue(true);
    filingSpace_tokensHierarchy.setSystemReserved(true);
    filingSpace_tokensHierarchy.setUndeletable(true);
    filingSpace_tokensHierarchy.setEssential(true);
    filingSpace_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder filingSpace_users = filingSpaceSchema.create("users").setType(MetadataValueType.REFERENCE);
    filingSpace_users.setMultivalue(true);
    filingSpace_users.setUndeletable(true);
    filingSpace_users.setEssential(true);
    filingSpace_users.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder filingSpace_visibleInTrees = filingSpaceSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    filingSpace_visibleInTrees.setSystemReserved(true);
    filingSpace_visibleInTrees.setUndeletable(true);
    filingSpace_visibleInTrees.setEssential(true);
    filingSpace_visibleInTrees.setMultiLingual(false);
  }

  private void createWorkflowSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder workflowSchemaType, MetadataSchemaBuilder workflowSchema) {
  }

  private void createDdvFolderTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvFolderTypeSchemaType, MetadataSchemaBuilder ddvFolderTypeSchema) {
    MetadataBuilder ddvFolderType_allReferences = ddvFolderTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvFolderType_allReferences.setMultivalue(true);
    ddvFolderType_allReferences.setSystemReserved(true);
    ddvFolderType_allReferences.setUndeletable(true);
    ddvFolderType_allReferences.setMultiLingual(false);
    MetadataBuilder ddvFolderType_allRemovedAuths = ddvFolderTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvFolderType_allRemovedAuths.setMultivalue(true);
    ddvFolderType_allRemovedAuths.setSystemReserved(true);
    ddvFolderType_allRemovedAuths.setUndeletable(true);
    ddvFolderType_allRemovedAuths.setEssential(true);
    ddvFolderType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvFolderType_attachedAncestors = ddvFolderTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvFolderType_attachedAncestors.setMultivalue(true);
    ddvFolderType_attachedAncestors.setSystemReserved(true);
    ddvFolderType_attachedAncestors.setUndeletable(true);
    ddvFolderType_attachedAncestors.setEssential(true);
    ddvFolderType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvFolderType_autocomplete = ddvFolderTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvFolderType_autocomplete.setMultivalue(true);
    ddvFolderType_autocomplete.setSystemReserved(true);
    ddvFolderType_autocomplete.setUndeletable(true);
    ddvFolderType_autocomplete.setEssential(true);
    ddvFolderType_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvFolderType_caption = ddvFolderTypeSchema.create("caption").setType(MetadataValueType.STRING);
    ddvFolderType_caption.setSystemReserved(true);
    ddvFolderType_caption.setUndeletable(true);
    ddvFolderType_caption.setMultiLingual(false);
    ddvFolderType_caption.setSortable(true);
    MetadataBuilder ddvFolderType_code = ddvFolderTypeSchema.create("code").setType(MetadataValueType.STRING);
    ddvFolderType_code.setDefaultRequirement(true);
    ddvFolderType_code.setUndeletable(true);
    ddvFolderType_code.setSchemaAutocomplete(true);
    ddvFolderType_code.setSearchable(true);
    ddvFolderType_code.setUniqueValue(true);
    MetadataBuilder ddvFolderType_comments = ddvFolderTypeSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvFolderType_comments.setMultivalue(true);
    ddvFolderType_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvFolderType_createdBy = ddvFolderTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvFolderType_createdBy.setSystemReserved(true);
    ddvFolderType_createdBy.setUndeletable(true);
    ddvFolderType_createdBy.setMultiLingual(false);
    ddvFolderType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvFolderType_createdOn = ddvFolderTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvFolderType_createdOn.setSystemReserved(true);
    ddvFolderType_createdOn.setUndeletable(true);
    ddvFolderType_createdOn.setMultiLingual(false);
    ddvFolderType_createdOn.setSortable(true);
    MetadataBuilder ddvFolderType_deleted = ddvFolderTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvFolderType_deleted.setSystemReserved(true);
    ddvFolderType_deleted.setUndeletable(true);
    ddvFolderType_deleted.setMultiLingual(false);
    MetadataBuilder ddvFolderType_denyTokens = ddvFolderTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvFolderType_denyTokens.setMultivalue(true);
    ddvFolderType_denyTokens.setSystemReserved(true);
    ddvFolderType_denyTokens.setUndeletable(true);
    ddvFolderType_denyTokens.setMultiLingual(false);
    ddvFolderType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvFolderType_description = ddvFolderTypeSchema.create("description").setType(MetadataValueType.TEXT);
    ddvFolderType_description.setUndeletable(true);
    ddvFolderType_description.setMultiLingual(true);
    ddvFolderType_description.setEssentialInSummary(true);
    ddvFolderType_description.setSearchable(true);
    MetadataBuilder ddvFolderType_detachedauthorizations = ddvFolderTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvFolderType_detachedauthorizations.setSystemReserved(true);
    ddvFolderType_detachedauthorizations.setUndeletable(true);
    ddvFolderType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvFolderType_errorOnPhysicalDeletion = ddvFolderTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvFolderType_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvFolderType_errorOnPhysicalDeletion.setUndeletable(true);
    ddvFolderType_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder ddvFolderType_estimatedSize = ddvFolderTypeSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  ddvFolderType_estimatedSize.setSystemReserved(true);
	  ddvFolderType_estimatedSize.setUndeletable(true);
	  ddvFolderType_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvFolderType_id = ddvFolderTypeSchema.create("id").setType(MetadataValueType.STRING);
    ddvFolderType_id.setDefaultRequirement(true);
    ddvFolderType_id.setSystemReserved(true);
    ddvFolderType_id.setUndeletable(true);
    ddvFolderType_id.setMultiLingual(false);
    ddvFolderType_id.setSearchable(true);
    ddvFolderType_id.setSortable(true);
    ddvFolderType_id.setUniqueValue(true);
    ddvFolderType_id.setUnmodifiable(true);
    MetadataBuilder ddvFolderType_legacyIdentifier = ddvFolderTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvFolderType_legacyIdentifier.setDefaultRequirement(true);
    ddvFolderType_legacyIdentifier.setSystemReserved(true);
    ddvFolderType_legacyIdentifier.setUndeletable(true);
    ddvFolderType_legacyIdentifier.setMultiLingual(false);
    ddvFolderType_legacyIdentifier.setSearchable(true);
    ddvFolderType_legacyIdentifier.setUniqueValue(true);
    ddvFolderType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvFolderType_linkedSchema = ddvFolderTypeSchema.create("linkedSchema").setType(MetadataValueType.STRING);
    MetadataBuilder ddvFolderType_logicallyDeletedOn = ddvFolderTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvFolderType_logicallyDeletedOn.setSystemReserved(true);
    ddvFolderType_logicallyDeletedOn.setUndeletable(true);
    ddvFolderType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvFolderType_manualTokens = ddvFolderTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvFolderType_manualTokens.setMultivalue(true);
    ddvFolderType_manualTokens.setSystemReserved(true);
    ddvFolderType_manualTokens.setUndeletable(true);
    ddvFolderType_manualTokens.setMultiLingual(false);
    ddvFolderType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvFolderType_markedForParsing = ddvFolderTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvFolderType_markedForParsing.setSystemReserved(true);
    ddvFolderType_markedForParsing.setUndeletable(true);
    ddvFolderType_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvFolderType_markedForPreviewConversion = ddvFolderTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvFolderType_markedForPreviewConversion.setSystemReserved(true);
    ddvFolderType_markedForPreviewConversion.setUndeletable(true);
    ddvFolderType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvFolderType_markedForReindexing = ddvFolderTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvFolderType_markedForReindexing.setSystemReserved(true);
    ddvFolderType_markedForReindexing.setUndeletable(true);
    ddvFolderType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvFolderType_migrationDataVersion = ddvFolderTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvFolderType_migrationDataVersion.setSystemReserved(true);
    ddvFolderType_migrationDataVersion.setUndeletable(true);
    ddvFolderType_migrationDataVersion.setMultiLingual(false);
    ddvFolderType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvFolderType_modifiedBy = ddvFolderTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvFolderType_modifiedBy.setSystemReserved(true);
    ddvFolderType_modifiedBy.setUndeletable(true);
    ddvFolderType_modifiedBy.setMultiLingual(false);
    ddvFolderType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvFolderType_modifiedOn = ddvFolderTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvFolderType_modifiedOn.setSystemReserved(true);
    ddvFolderType_modifiedOn.setUndeletable(true);
    ddvFolderType_modifiedOn.setMultiLingual(false);
    ddvFolderType_modifiedOn.setSortable(true);
    MetadataBuilder ddvFolderType_path = ddvFolderTypeSchema.create("path").setType(MetadataValueType.STRING);
    ddvFolderType_path.setMultivalue(true);
    ddvFolderType_path.setSystemReserved(true);
    ddvFolderType_path.setUndeletable(true);
    ddvFolderType_path.setMultiLingual(false);
    MetadataBuilder ddvFolderType_pathParts = ddvFolderTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvFolderType_pathParts.setMultivalue(true);
    ddvFolderType_pathParts.setSystemReserved(true);
    ddvFolderType_pathParts.setUndeletable(true);
    ddvFolderType_pathParts.setMultiLingual(false);
    MetadataBuilder ddvFolderType_principalpath = ddvFolderTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvFolderType_principalpath.setSystemReserved(true);
    ddvFolderType_principalpath.setUndeletable(true);
    ddvFolderType_principalpath.setMultiLingual(false);
    MetadataBuilder ddvFolderType_removedauthorizations = ddvFolderTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvFolderType_removedauthorizations.setMultivalue(true);
    ddvFolderType_removedauthorizations.setSystemReserved(true);
    ddvFolderType_removedauthorizations.setUndeletable(true);
    ddvFolderType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvFolderType_schema = ddvFolderTypeSchema.create("schema").setType(MetadataValueType.STRING);
    ddvFolderType_schema.setDefaultRequirement(true);
    ddvFolderType_schema.setSystemReserved(true);
    ddvFolderType_schema.setUndeletable(true);
    ddvFolderType_schema.setMultiLingual(false);
    MetadataBuilder ddvFolderType_shareDenyTokens = ddvFolderTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvFolderType_shareDenyTokens.setMultivalue(true);
    ddvFolderType_shareDenyTokens.setSystemReserved(true);
    ddvFolderType_shareDenyTokens.setUndeletable(true);
    ddvFolderType_shareDenyTokens.setMultiLingual(false);
    ddvFolderType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvFolderType_shareTokens = ddvFolderTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvFolderType_shareTokens.setMultivalue(true);
    ddvFolderType_shareTokens.setSystemReserved(true);
    ddvFolderType_shareTokens.setUndeletable(true);
    ddvFolderType_shareTokens.setMultiLingual(false);
    ddvFolderType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvFolderType_title = ddvFolderTypeSchema.create("title").setType(MetadataValueType.STRING);
    ddvFolderType_title.setDefaultRequirement(true);
    ddvFolderType_title.setUndeletable(true);
    ddvFolderType_title.setMultiLingual(true);
    ddvFolderType_title.setSchemaAutocomplete(true);
    ddvFolderType_title.setSearchable(true);
    ddvFolderType_title.setUniqueValue(true);
    MetadataBuilder ddvFolderType_tokens = ddvFolderTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvFolderType_tokens.setMultivalue(true);
    ddvFolderType_tokens.setSystemReserved(true);
    ddvFolderType_tokens.setUndeletable(true);
    ddvFolderType_tokens.setMultiLingual(false);
    MetadataBuilder ddvFolderType_tokensHierarchy = ddvFolderTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvFolderType_tokensHierarchy.setMultivalue(true);
    ddvFolderType_tokensHierarchy.setSystemReserved(true);
    ddvFolderType_tokensHierarchy.setUndeletable(true);
    ddvFolderType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvFolderType_visibleInTrees = ddvFolderTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvFolderType_visibleInTrees.setSystemReserved(true);
    ddvFolderType_visibleInTrees.setUndeletable(true);
    ddvFolderType_visibleInTrees.setMultiLingual(false);
  }

  private void createCollectionSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder collectionSchemaType, MetadataSchemaBuilder collectionSchema) {
  }

  private void createPrintableSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder printableSchemaType, MetadataSchemaBuilder printable_labelSchema, MetadataSchemaBuilder printable_reportSchema, MetadataSchemaBuilder printableSchema) {
    MetadataBuilder printable_label_colonne = printable_labelSchema.create("colonne").setType(MetadataValueType.NUMBER);
    printable_label_colonne.setUndeletable(true);
    printable_label_colonne.setEssential(true);
    MetadataBuilder printable_label_ligne = printable_labelSchema.create("ligne").setType(MetadataValueType.NUMBER);
    printable_label_ligne.setUndeletable(true);
    printable_label_ligne.setEssential(true);
    MetadataBuilder printable_label_typelabel = printable_labelSchema.create("typelabel").setType(MetadataValueType.STRING);
    MetadataBuilder printable_report_recordSchema = printable_reportSchema.create("recordSchema").setType(MetadataValueType.STRING);
    printable_report_recordSchema.setUndeletable(true);
    printable_report_recordSchema.setEssential(true);
    MetadataBuilder printable_report_recordType = printable_reportSchema.create("recordType").setType(MetadataValueType.STRING);
    printable_report_recordType.setUndeletable(true);
    printable_report_recordType.setEssential(true);
    MetadataBuilder printable_label_allReferences = printable_labelSchema.get("allReferences");
    MetadataBuilder printable_label_allRemovedAuths = printable_labelSchema.get("allRemovedAuths");
    MetadataBuilder printable_label_attachedAncestors = printable_labelSchema.get("attachedAncestors");
    MetadataBuilder printable_label_autocomplete = printable_labelSchema.get("autocomplete");
    MetadataBuilder printable_label_caption = printable_labelSchema.get("caption");
    MetadataBuilder printable_label_createdBy = printable_labelSchema.get("createdBy");
    MetadataBuilder printable_label_createdOn = printable_labelSchema.get("createdOn");
    MetadataBuilder printable_label_deleted = printable_labelSchema.get("deleted");
    MetadataBuilder printable_label_denyTokens = printable_labelSchema.get("denyTokens");
    MetadataBuilder printable_label_detachedauthorizations = printable_labelSchema.get("detachedauthorizations");
    MetadataBuilder printable_label_errorOnPhysicalDeletion = printable_labelSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder printable_label_estimatedSize = printable_labelSchema.get("estimatedSize");
    MetadataBuilder printable_label_id = printable_labelSchema.get("id");
    MetadataBuilder printable_label_isdeletable = printable_labelSchema.get("isdeletable");
    MetadataBuilder printable_label_jasperfile = printable_labelSchema.get("jasperfile");
    MetadataBuilder printable_label_legacyIdentifier = printable_labelSchema.get("legacyIdentifier");
    MetadataBuilder printable_label_logicallyDeletedOn = printable_labelSchema.get("logicallyDeletedOn");
    MetadataBuilder printable_label_manualTokens = printable_labelSchema.get("manualTokens");
    MetadataBuilder printable_label_markedForParsing = printable_labelSchema.get("markedForParsing");
    MetadataBuilder printable_label_markedForPreviewConversion = printable_labelSchema.get("markedForPreviewConversion");
    MetadataBuilder printable_label_markedForReindexing = printable_labelSchema.get("markedForReindexing");
    MetadataBuilder printable_label_migrationDataVersion = printable_labelSchema.get("migrationDataVersion");
    MetadataBuilder printable_label_modifiedBy = printable_labelSchema.get("modifiedBy");
    MetadataBuilder printable_label_modifiedOn = printable_labelSchema.get("modifiedOn");
    MetadataBuilder printable_label_path = printable_labelSchema.get("path");
    MetadataBuilder printable_label_pathParts = printable_labelSchema.get("pathParts");
    MetadataBuilder printable_label_principalpath = printable_labelSchema.get("principalpath");
    MetadataBuilder printable_label_removedauthorizations = printable_labelSchema.get("removedauthorizations");
    MetadataBuilder printable_label_schema = printable_labelSchema.get("schema");
    MetadataBuilder printable_label_shareDenyTokens = printable_labelSchema.get("shareDenyTokens");
    MetadataBuilder printable_label_shareTokens = printable_labelSchema.get("shareTokens");
    MetadataBuilder printable_label_title = printable_labelSchema.get("title");
    MetadataBuilder printable_label_tokens = printable_labelSchema.get("tokens");
    MetadataBuilder printable_label_tokensHierarchy = printable_labelSchema.get("tokensHierarchy");
    MetadataBuilder printable_label_visibleInTrees = printable_labelSchema.get("visibleInTrees");
    MetadataBuilder printable_report_allReferences = printable_reportSchema.get("allReferences");
    MetadataBuilder printable_report_allRemovedAuths = printable_reportSchema.get("allRemovedAuths");
    MetadataBuilder printable_report_attachedAncestors = printable_reportSchema.get("attachedAncestors");
    MetadataBuilder printable_report_autocomplete = printable_reportSchema.get("autocomplete");
    MetadataBuilder printable_report_caption = printable_reportSchema.get("caption");
    MetadataBuilder printable_report_createdBy = printable_reportSchema.get("createdBy");
    MetadataBuilder printable_report_createdOn = printable_reportSchema.get("createdOn");
    MetadataBuilder printable_report_deleted = printable_reportSchema.get("deleted");
    MetadataBuilder printable_report_denyTokens = printable_reportSchema.get("denyTokens");
    MetadataBuilder printable_report_detachedauthorizations = printable_reportSchema.get("detachedauthorizations");
    MetadataBuilder printable_report_errorOnPhysicalDeletion = printable_reportSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder printable_report_estimatedSize = printable_reportSchema.get("estimatedSize");
    MetadataBuilder printable_report_id = printable_reportSchema.get("id");
    MetadataBuilder printable_report_isdeletable = printable_reportSchema.get("isdeletable");
    MetadataBuilder printable_report_jasperfile = printable_reportSchema.get("jasperfile");
    MetadataBuilder printable_report_legacyIdentifier = printable_reportSchema.get("legacyIdentifier");
    MetadataBuilder printable_report_logicallyDeletedOn = printable_reportSchema.get("logicallyDeletedOn");
    MetadataBuilder printable_report_manualTokens = printable_reportSchema.get("manualTokens");
    MetadataBuilder printable_report_markedForParsing = printable_reportSchema.get("markedForParsing");
    MetadataBuilder printable_report_markedForPreviewConversion = printable_reportSchema.get("markedForPreviewConversion");
    MetadataBuilder printable_report_markedForReindexing = printable_reportSchema.get("markedForReindexing");
    MetadataBuilder printable_report_migrationDataVersion = printable_reportSchema.get("migrationDataVersion");
    MetadataBuilder printable_report_modifiedBy = printable_reportSchema.get("modifiedBy");
    MetadataBuilder printable_report_modifiedOn = printable_reportSchema.get("modifiedOn");
    MetadataBuilder printable_report_path = printable_reportSchema.get("path");
    MetadataBuilder printable_report_pathParts = printable_reportSchema.get("pathParts");
    MetadataBuilder printable_report_principalpath = printable_reportSchema.get("principalpath");
    MetadataBuilder printable_report_removedauthorizations = printable_reportSchema.get("removedauthorizations");
    MetadataBuilder printable_report_schema = printable_reportSchema.get("schema");
    MetadataBuilder printable_report_shareDenyTokens = printable_reportSchema.get("shareDenyTokens");
    MetadataBuilder printable_report_shareTokens = printable_reportSchema.get("shareTokens");
    MetadataBuilder printable_report_title = printable_reportSchema.get("title");
    MetadataBuilder printable_report_tokens = printable_reportSchema.get("tokens");
    MetadataBuilder printable_report_tokensHierarchy = printable_reportSchema.get("tokensHierarchy");
    MetadataBuilder printable_report_visibleInTrees = printable_reportSchema.get("visibleInTrees");
  }

  private void createThesaurusConfigSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder thesaurusConfigSchemaType, MetadataSchemaBuilder thesaurusConfigSchema) {
  }

  private void createUserTaskSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userTaskSchemaType, MetadataSchemaBuilder userTask_borrowExtensionRequestSchema, MetadataSchemaBuilder userTask_borrowRequestSchema, MetadataSchemaBuilder userTask_reactivationRequestSchema, MetadataSchemaBuilder userTask_returnRequestSchema, MetadataSchemaBuilder userTaskSchema) {
    MetadataBuilder userTask_borrowExtensionRequest_accepted = userTask_borrowExtensionRequestSchema.create("accepted").setType(MetadataValueType.BOOLEAN);
    userTask_borrowExtensionRequest_accepted.setUndeletable(true);
    MetadataBuilder userTask_borrowExtensionRequest_applicant = userTask_borrowExtensionRequestSchema.create("applicant").setType(MetadataValueType.REFERENCE);
    userTask_borrowExtensionRequest_applicant.setSystemReserved(true);
    userTask_borrowExtensionRequest_applicant.setUndeletable(true);
    userTask_borrowExtensionRequest_applicant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_borrowExtensionRequest_extensionValue = userTask_borrowExtensionRequestSchema.create("extensionValue").setType(MetadataValueType.DATE);
    userTask_borrowExtensionRequest_extensionValue.setUndeletable(true);
    MetadataBuilder userTask_borrowExtensionRequest_respondant = userTask_borrowExtensionRequestSchema.create("respondant").setType(MetadataValueType.REFERENCE);
    userTask_borrowExtensionRequest_respondant.setSystemReserved(true);
    userTask_borrowExtensionRequest_respondant.setUndeletable(true);
    userTask_borrowExtensionRequest_respondant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_borrowRequest_accepted = userTask_borrowRequestSchema.create("accepted").setType(MetadataValueType.BOOLEAN);
    userTask_borrowRequest_accepted.setUndeletable(true);
    MetadataBuilder userTask_borrowRequest_applicant = userTask_borrowRequestSchema.create("applicant").setType(MetadataValueType.REFERENCE);
    userTask_borrowRequest_applicant.setSystemReserved(true);
    userTask_borrowRequest_applicant.setUndeletable(true);
    userTask_borrowRequest_applicant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_borrowRequest_borrowDuration = userTask_borrowRequestSchema.create("borrowDuration").setType(MetadataValueType.NUMBER);
    userTask_borrowRequest_borrowDuration.setDefaultRequirement(true);
    userTask_borrowRequest_borrowDuration.setUndeletable(true);
    MetadataBuilder userTask_borrowRequest_respondant = userTask_borrowRequestSchema.create("respondant").setType(MetadataValueType.REFERENCE);
    userTask_borrowRequest_respondant.setSystemReserved(true);
    userTask_borrowRequest_respondant.setUndeletable(true);
    userTask_borrowRequest_respondant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_reactivationRequest_accepted = userTask_reactivationRequestSchema.create("accepted").setType(MetadataValueType.BOOLEAN);
    userTask_reactivationRequest_accepted.setUndeletable(true);
    MetadataBuilder userTask_reactivationRequest_applicant = userTask_reactivationRequestSchema.create("applicant").setType(MetadataValueType.REFERENCE);
    userTask_reactivationRequest_applicant.setSystemReserved(true);
    userTask_reactivationRequest_applicant.setUndeletable(true);
    userTask_reactivationRequest_applicant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_reactivationRequest_reactivationDate = userTask_reactivationRequestSchema.create("reactivationDate").setType(MetadataValueType.DATE);
    userTask_reactivationRequest_reactivationDate.setDefaultRequirement(true);
    userTask_reactivationRequest_reactivationDate.setUndeletable(true);
    MetadataBuilder userTask_reactivationRequest_respondant = userTask_reactivationRequestSchema.create("respondant").setType(MetadataValueType.REFERENCE);
    userTask_reactivationRequest_respondant.setSystemReserved(true);
    userTask_reactivationRequest_respondant.setUndeletable(true);
    userTask_reactivationRequest_respondant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_returnRequest_accepted = userTask_returnRequestSchema.create("accepted").setType(MetadataValueType.BOOLEAN);
    userTask_returnRequest_accepted.setUndeletable(true);
    MetadataBuilder userTask_returnRequest_applicant = userTask_returnRequestSchema.create("applicant").setType(MetadataValueType.REFERENCE);
    userTask_returnRequest_applicant.setSystemReserved(true);
    userTask_returnRequest_applicant.setUndeletable(true);
    userTask_returnRequest_applicant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_returnRequest_respondant = userTask_returnRequestSchema.create("respondant").setType(MetadataValueType.REFERENCE);
    userTask_returnRequest_respondant.setSystemReserved(true);
    userTask_returnRequest_respondant.setUndeletable(true);
    userTask_returnRequest_respondant.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_administrativeUnit = userTaskSchema.create("administrativeUnit").setType(MetadataValueType.REFERENCE);
    userTask_administrativeUnit.defineTaxonomyRelationshipToType(types.getSchemaType("administrativeUnit"));
    MetadataBuilder userTask_linkedContainers = userTaskSchema.create("linkedContainers").setType(MetadataValueType.REFERENCE);
    userTask_linkedContainers.setMultivalue(true);
    userTask_linkedContainers.setUndeletable(true);
    userTask_linkedContainers.defineReferencesTo(types.getSchemaType("containerRecord"));
    MetadataBuilder userTask_linkedDocuments = userTaskSchema.create("linkedDocuments").setType(MetadataValueType.REFERENCE);
    userTask_linkedDocuments.setMultivalue(true);
    userTask_linkedDocuments.defineReferencesTo(types.getSchemaType("document"));
    MetadataBuilder userTask_linkedFolders = userTaskSchema.create("linkedFolders").setType(MetadataValueType.REFERENCE);
    userTask_linkedFolders.setMultivalue(true);
    userTask_linkedFolders.defineReferencesTo(types.getSchemaType("folder"));
    MetadataBuilder userTask_borrowExtensionRequest_administrativeUnit = userTask_borrowExtensionRequestSchema.get("administrativeUnit");
    MetadataBuilder userTask_borrowExtensionRequest_allReferences = userTask_borrowExtensionRequestSchema.get("allReferences");
    MetadataBuilder userTask_borrowExtensionRequest_allRemovedAuths = userTask_borrowExtensionRequestSchema.get("allRemovedAuths");
    MetadataBuilder userTask_borrowExtensionRequest_assignedOn = userTask_borrowExtensionRequestSchema.get("assignedOn");
    MetadataBuilder userTask_borrowExtensionRequest_assignee = userTask_borrowExtensionRequestSchema.get("assignee");
    MetadataBuilder userTask_borrowExtensionRequest_assigneeGroupsCandidates = userTask_borrowExtensionRequestSchema.get("assigneeGroupsCandidates");
    MetadataBuilder userTask_borrowExtensionRequest_assigneeUsersCandidates = userTask_borrowExtensionRequestSchema.get("assigneeUsersCandidates");
    MetadataBuilder userTask_borrowExtensionRequest_assigner = userTask_borrowExtensionRequestSchema.get("assigner");
    MetadataBuilder userTask_borrowExtensionRequest_attachedAncestors = userTask_borrowExtensionRequestSchema.get("attachedAncestors");
    MetadataBuilder userTask_borrowExtensionRequest_autocomplete = userTask_borrowExtensionRequestSchema.get("autocomplete");
    MetadataBuilder userTask_borrowExtensionRequest_caption = userTask_borrowExtensionRequestSchema.get("caption");
    MetadataBuilder userTask_borrowExtensionRequest_comments = userTask_borrowExtensionRequestSchema.get("comments");
    MetadataBuilder userTask_borrowExtensionRequest_contents = userTask_borrowExtensionRequestSchema.get("contents");
    MetadataBuilder userTask_borrowExtensionRequest_createdBy = userTask_borrowExtensionRequestSchema.get("createdBy");
    MetadataBuilder userTask_borrowExtensionRequest_createdOn = userTask_borrowExtensionRequestSchema.get("createdOn");
    MetadataBuilder userTask_borrowExtensionRequest_decision = userTask_borrowExtensionRequestSchema.get("decision");
    MetadataBuilder userTask_borrowExtensionRequest_deleted = userTask_borrowExtensionRequestSchema.get("deleted");
    MetadataBuilder userTask_borrowExtensionRequest_denyTokens = userTask_borrowExtensionRequestSchema.get("denyTokens");
    MetadataBuilder userTask_borrowExtensionRequest_description = userTask_borrowExtensionRequestSchema.get("description");
    MetadataBuilder userTask_borrowExtensionRequest_detachedauthorizations = userTask_borrowExtensionRequestSchema.get("detachedauthorizations");
    MetadataBuilder userTask_borrowExtensionRequest_dueDate = userTask_borrowExtensionRequestSchema.get("dueDate");
    MetadataBuilder userTask_borrowExtensionRequest_endDate = userTask_borrowExtensionRequestSchema.get("endDate");
    MetadataBuilder userTask_borrowExtensionRequest_errorOnPhysicalDeletion = userTask_borrowExtensionRequestSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder userTask_borrowExtensionRequest_escalationAssignee = userTask_borrowExtensionRequestSchema.get("escalationAssignee");
	  MetadataBuilder userTask_borrowExtensionRequest_estimatedSize = userTask_borrowExtensionRequestSchema.get("estimatedSize");
    MetadataBuilder userTask_borrowExtensionRequest_id = userTask_borrowExtensionRequestSchema.get("id");
    MetadataBuilder userTask_borrowExtensionRequest_isModel = userTask_borrowExtensionRequestSchema.get("isModel");
    MetadataBuilder userTask_borrowExtensionRequest_lastReminder = userTask_borrowExtensionRequestSchema.get("lastReminder");
    MetadataBuilder userTask_borrowExtensionRequest_legacyIdentifier = userTask_borrowExtensionRequestSchema.get("legacyIdentifier");
    MetadataBuilder userTask_borrowExtensionRequest_linkedContainers = userTask_borrowExtensionRequestSchema.get("linkedContainers");
    MetadataBuilder userTask_borrowExtensionRequest_linkedDocuments = userTask_borrowExtensionRequestSchema.get("linkedDocuments");
    MetadataBuilder userTask_borrowExtensionRequest_linkedFolders = userTask_borrowExtensionRequestSchema.get("linkedFolders");
    MetadataBuilder userTask_borrowExtensionRequest_logicallyDeletedOn = userTask_borrowExtensionRequestSchema.get("logicallyDeletedOn");
    MetadataBuilder userTask_borrowExtensionRequest_manualTokens = userTask_borrowExtensionRequestSchema.get("manualTokens");
    MetadataBuilder userTask_borrowExtensionRequest_markedForParsing = userTask_borrowExtensionRequestSchema.get("markedForParsing");
    MetadataBuilder userTask_borrowExtensionRequest_markedForPreviewConversion = userTask_borrowExtensionRequestSchema.get("markedForPreviewConversion");
    MetadataBuilder userTask_borrowExtensionRequest_markedForReindexing = userTask_borrowExtensionRequestSchema.get("markedForReindexing");
    MetadataBuilder userTask_borrowExtensionRequest_migrationDataVersion = userTask_borrowExtensionRequestSchema.get("migrationDataVersion");
    MetadataBuilder userTask_borrowExtensionRequest_modelTask = userTask_borrowExtensionRequestSchema.get("modelTask");
    MetadataBuilder userTask_borrowExtensionRequest_modifiedBy = userTask_borrowExtensionRequestSchema.get("modifiedBy");
    MetadataBuilder userTask_borrowExtensionRequest_modifiedOn = userTask_borrowExtensionRequestSchema.get("modifiedOn");
    MetadataBuilder userTask_borrowExtensionRequest_nextReminderOn = userTask_borrowExtensionRequestSchema.get("nextReminderOn");
    MetadataBuilder userTask_borrowExtensionRequest_nextTaskCreated = userTask_borrowExtensionRequestSchema.get("nextTaskCreated");
    MetadataBuilder userTask_borrowExtensionRequest_nextTasks = userTask_borrowExtensionRequestSchema.get("nextTasks");
    MetadataBuilder userTask_borrowExtensionRequest_nextTasksDecisions = userTask_borrowExtensionRequestSchema.get("nextTasksDecisions");
    MetadataBuilder userTask_borrowExtensionRequest_numberOfReminders = userTask_borrowExtensionRequestSchema.get("numberOfReminders");
    MetadataBuilder userTask_borrowExtensionRequest_parentTask = userTask_borrowExtensionRequestSchema.get("parentTask");
    MetadataBuilder userTask_borrowExtensionRequest_parentTaskDueDate = userTask_borrowExtensionRequestSchema.get("parentTaskDueDate");
    MetadataBuilder userTask_borrowExtensionRequest_path = userTask_borrowExtensionRequestSchema.get("path");
    MetadataBuilder userTask_borrowExtensionRequest_pathParts = userTask_borrowExtensionRequestSchema.get("pathParts");
    MetadataBuilder userTask_borrowExtensionRequest_principalpath = userTask_borrowExtensionRequestSchema.get("principalpath");
    MetadataBuilder userTask_borrowExtensionRequest_progressPercentage = userTask_borrowExtensionRequestSchema.get("progressPercentage");
    MetadataBuilder userTask_borrowExtensionRequest_question = userTask_borrowExtensionRequestSchema.get("question");
    MetadataBuilder userTask_borrowExtensionRequest_readByUser = userTask_borrowExtensionRequestSchema.get("readByUser");
    MetadataBuilder userTask_borrowExtensionRequest_reason = userTask_borrowExtensionRequestSchema.get("reason");
    MetadataBuilder userTask_borrowExtensionRequest_relativeDueDate = userTask_borrowExtensionRequestSchema.get("relativeDueDate");
    MetadataBuilder userTask_borrowExtensionRequest_reminderFrequency = userTask_borrowExtensionRequestSchema.get("reminderFrequency");
    MetadataBuilder userTask_borrowExtensionRequest_reminders = userTask_borrowExtensionRequestSchema.get("reminders");
    MetadataBuilder userTask_borrowExtensionRequest_removedauthorizations = userTask_borrowExtensionRequestSchema.get("removedauthorizations");
    MetadataBuilder userTask_borrowExtensionRequest_schema = userTask_borrowExtensionRequestSchema.get("schema");
    MetadataBuilder userTask_borrowExtensionRequest_shareDenyTokens = userTask_borrowExtensionRequestSchema.get("shareDenyTokens");
    MetadataBuilder userTask_borrowExtensionRequest_shareTokens = userTask_borrowExtensionRequestSchema.get("shareTokens");
    MetadataBuilder userTask_borrowExtensionRequest_starredByUsers = userTask_borrowExtensionRequestSchema.get("starredByUsers");
    MetadataBuilder userTask_borrowExtensionRequest_startDate = userTask_borrowExtensionRequestSchema.get("startDate");
    MetadataBuilder userTask_borrowExtensionRequest_status = userTask_borrowExtensionRequestSchema.get("status");
    MetadataBuilder userTask_borrowExtensionRequest_statusType = userTask_borrowExtensionRequestSchema.get("statusType");
    MetadataBuilder userTask_borrowExtensionRequest_taskFollowers = userTask_borrowExtensionRequestSchema.get("taskFollowers");
    MetadataBuilder userTask_borrowExtensionRequest_taskFollowersIds = userTask_borrowExtensionRequestSchema.get("taskFollowersIds");
    MetadataBuilder userTask_borrowExtensionRequest_title = userTask_borrowExtensionRequestSchema.get("title");
    MetadataBuilder userTask_borrowExtensionRequest_tokens = userTask_borrowExtensionRequestSchema.get("tokens");
    MetadataBuilder userTask_borrowExtensionRequest_tokensHierarchy = userTask_borrowExtensionRequestSchema.get("tokensHierarchy");
    MetadataBuilder userTask_borrowExtensionRequest_type = userTask_borrowExtensionRequestSchema.get("type");
    MetadataBuilder userTask_borrowExtensionRequest_visibleInTrees = userTask_borrowExtensionRequestSchema.get("visibleInTrees");
    MetadataBuilder userTask_borrowExtensionRequest_workflow = userTask_borrowExtensionRequestSchema.get("workflow");
    MetadataBuilder userTask_borrowExtensionRequest_workflowInstance = userTask_borrowExtensionRequestSchema.get("workflowInstance");
    MetadataBuilder userTask_borrowExtensionRequest_workflowTaskSort = userTask_borrowExtensionRequestSchema.get("workflowTaskSort");
    MetadataBuilder userTask_borrowRequest_administrativeUnit = userTask_borrowRequestSchema.get("administrativeUnit");
    MetadataBuilder userTask_borrowRequest_allReferences = userTask_borrowRequestSchema.get("allReferences");
    MetadataBuilder userTask_borrowRequest_allRemovedAuths = userTask_borrowRequestSchema.get("allRemovedAuths");
    MetadataBuilder userTask_borrowRequest_assignedOn = userTask_borrowRequestSchema.get("assignedOn");
    MetadataBuilder userTask_borrowRequest_assignee = userTask_borrowRequestSchema.get("assignee");
    MetadataBuilder userTask_borrowRequest_assigneeGroupsCandidates = userTask_borrowRequestSchema.get("assigneeGroupsCandidates");
    MetadataBuilder userTask_borrowRequest_assigneeUsersCandidates = userTask_borrowRequestSchema.get("assigneeUsersCandidates");
    MetadataBuilder userTask_borrowRequest_assigner = userTask_borrowRequestSchema.get("assigner");
    MetadataBuilder userTask_borrowRequest_attachedAncestors = userTask_borrowRequestSchema.get("attachedAncestors");
    MetadataBuilder userTask_borrowRequest_autocomplete = userTask_borrowRequestSchema.get("autocomplete");
    MetadataBuilder userTask_borrowRequest_caption = userTask_borrowRequestSchema.get("caption");
    MetadataBuilder userTask_borrowRequest_comments = userTask_borrowRequestSchema.get("comments");
    MetadataBuilder userTask_borrowRequest_contents = userTask_borrowRequestSchema.get("contents");
    MetadataBuilder userTask_borrowRequest_createdBy = userTask_borrowRequestSchema.get("createdBy");
    MetadataBuilder userTask_borrowRequest_createdOn = userTask_borrowRequestSchema.get("createdOn");
    MetadataBuilder userTask_borrowRequest_decision = userTask_borrowRequestSchema.get("decision");
    MetadataBuilder userTask_borrowRequest_deleted = userTask_borrowRequestSchema.get("deleted");
    MetadataBuilder userTask_borrowRequest_denyTokens = userTask_borrowRequestSchema.get("denyTokens");
    MetadataBuilder userTask_borrowRequest_description = userTask_borrowRequestSchema.get("description");
    MetadataBuilder userTask_borrowRequest_detachedauthorizations = userTask_borrowRequestSchema.get("detachedauthorizations");
    MetadataBuilder userTask_borrowRequest_dueDate = userTask_borrowRequestSchema.get("dueDate");
    MetadataBuilder userTask_borrowRequest_endDate = userTask_borrowRequestSchema.get("endDate");
    MetadataBuilder userTask_borrowRequest_errorOnPhysicalDeletion = userTask_borrowRequestSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder userTask_borrowRequest_escalationAssignee = userTask_borrowRequestSchema.get("escalationAssignee");
	  MetadataBuilder userTask_borrowRequest_estimatedSize = userTask_borrowRequestSchema.get("estimatedSize");
    MetadataBuilder userTask_borrowRequest_id = userTask_borrowRequestSchema.get("id");
    MetadataBuilder userTask_borrowRequest_isModel = userTask_borrowRequestSchema.get("isModel");
    MetadataBuilder userTask_borrowRequest_lastReminder = userTask_borrowRequestSchema.get("lastReminder");
    MetadataBuilder userTask_borrowRequest_legacyIdentifier = userTask_borrowRequestSchema.get("legacyIdentifier");
    MetadataBuilder userTask_borrowRequest_linkedContainers = userTask_borrowRequestSchema.get("linkedContainers");
    MetadataBuilder userTask_borrowRequest_linkedDocuments = userTask_borrowRequestSchema.get("linkedDocuments");
    MetadataBuilder userTask_borrowRequest_linkedFolders = userTask_borrowRequestSchema.get("linkedFolders");
    MetadataBuilder userTask_borrowRequest_logicallyDeletedOn = userTask_borrowRequestSchema.get("logicallyDeletedOn");
    MetadataBuilder userTask_borrowRequest_manualTokens = userTask_borrowRequestSchema.get("manualTokens");
    MetadataBuilder userTask_borrowRequest_markedForParsing = userTask_borrowRequestSchema.get("markedForParsing");
    MetadataBuilder userTask_borrowRequest_markedForPreviewConversion = userTask_borrowRequestSchema.get("markedForPreviewConversion");
    MetadataBuilder userTask_borrowRequest_markedForReindexing = userTask_borrowRequestSchema.get("markedForReindexing");
    MetadataBuilder userTask_borrowRequest_migrationDataVersion = userTask_borrowRequestSchema.get("migrationDataVersion");
    MetadataBuilder userTask_borrowRequest_modelTask = userTask_borrowRequestSchema.get("modelTask");
    MetadataBuilder userTask_borrowRequest_modifiedBy = userTask_borrowRequestSchema.get("modifiedBy");
    MetadataBuilder userTask_borrowRequest_modifiedOn = userTask_borrowRequestSchema.get("modifiedOn");
    MetadataBuilder userTask_borrowRequest_nextReminderOn = userTask_borrowRequestSchema.get("nextReminderOn");
    MetadataBuilder userTask_borrowRequest_nextTaskCreated = userTask_borrowRequestSchema.get("nextTaskCreated");
    MetadataBuilder userTask_borrowRequest_nextTasks = userTask_borrowRequestSchema.get("nextTasks");
    MetadataBuilder userTask_borrowRequest_nextTasksDecisions = userTask_borrowRequestSchema.get("nextTasksDecisions");
    MetadataBuilder userTask_borrowRequest_numberOfReminders = userTask_borrowRequestSchema.get("numberOfReminders");
    MetadataBuilder userTask_borrowRequest_parentTask = userTask_borrowRequestSchema.get("parentTask");
    MetadataBuilder userTask_borrowRequest_parentTaskDueDate = userTask_borrowRequestSchema.get("parentTaskDueDate");
    MetadataBuilder userTask_borrowRequest_path = userTask_borrowRequestSchema.get("path");
    MetadataBuilder userTask_borrowRequest_pathParts = userTask_borrowRequestSchema.get("pathParts");
    MetadataBuilder userTask_borrowRequest_principalpath = userTask_borrowRequestSchema.get("principalpath");
    MetadataBuilder userTask_borrowRequest_progressPercentage = userTask_borrowRequestSchema.get("progressPercentage");
    MetadataBuilder userTask_borrowRequest_question = userTask_borrowRequestSchema.get("question");
    MetadataBuilder userTask_borrowRequest_readByUser = userTask_borrowRequestSchema.get("readByUser");
    MetadataBuilder userTask_borrowRequest_reason = userTask_borrowRequestSchema.get("reason");
    MetadataBuilder userTask_borrowRequest_relativeDueDate = userTask_borrowRequestSchema.get("relativeDueDate");
    MetadataBuilder userTask_borrowRequest_reminderFrequency = userTask_borrowRequestSchema.get("reminderFrequency");
    MetadataBuilder userTask_borrowRequest_reminders = userTask_borrowRequestSchema.get("reminders");
    MetadataBuilder userTask_borrowRequest_removedauthorizations = userTask_borrowRequestSchema.get("removedauthorizations");
    MetadataBuilder userTask_borrowRequest_schema = userTask_borrowRequestSchema.get("schema");
    MetadataBuilder userTask_borrowRequest_shareDenyTokens = userTask_borrowRequestSchema.get("shareDenyTokens");
    MetadataBuilder userTask_borrowRequest_shareTokens = userTask_borrowRequestSchema.get("shareTokens");
    MetadataBuilder userTask_borrowRequest_starredByUsers = userTask_borrowRequestSchema.get("starredByUsers");
    MetadataBuilder userTask_borrowRequest_startDate = userTask_borrowRequestSchema.get("startDate");
    MetadataBuilder userTask_borrowRequest_status = userTask_borrowRequestSchema.get("status");
    MetadataBuilder userTask_borrowRequest_statusType = userTask_borrowRequestSchema.get("statusType");
    MetadataBuilder userTask_borrowRequest_taskFollowers = userTask_borrowRequestSchema.get("taskFollowers");
    MetadataBuilder userTask_borrowRequest_taskFollowersIds = userTask_borrowRequestSchema.get("taskFollowersIds");
    MetadataBuilder userTask_borrowRequest_title = userTask_borrowRequestSchema.get("title");
    MetadataBuilder userTask_borrowRequest_tokens = userTask_borrowRequestSchema.get("tokens");
    MetadataBuilder userTask_borrowRequest_tokensHierarchy = userTask_borrowRequestSchema.get("tokensHierarchy");
    MetadataBuilder userTask_borrowRequest_type = userTask_borrowRequestSchema.get("type");
    MetadataBuilder userTask_borrowRequest_visibleInTrees = userTask_borrowRequestSchema.get("visibleInTrees");
    MetadataBuilder userTask_borrowRequest_workflow = userTask_borrowRequestSchema.get("workflow");
    MetadataBuilder userTask_borrowRequest_workflowInstance = userTask_borrowRequestSchema.get("workflowInstance");
    MetadataBuilder userTask_borrowRequest_workflowTaskSort = userTask_borrowRequestSchema.get("workflowTaskSort");
    MetadataBuilder userTask_reactivationRequest_administrativeUnit = userTask_reactivationRequestSchema.get("administrativeUnit");
    MetadataBuilder userTask_reactivationRequest_allReferences = userTask_reactivationRequestSchema.get("allReferences");
    MetadataBuilder userTask_reactivationRequest_allRemovedAuths = userTask_reactivationRequestSchema.get("allRemovedAuths");
    MetadataBuilder userTask_reactivationRequest_assignedOn = userTask_reactivationRequestSchema.get("assignedOn");
    MetadataBuilder userTask_reactivationRequest_assignee = userTask_reactivationRequestSchema.get("assignee");
    MetadataBuilder userTask_reactivationRequest_assigneeGroupsCandidates = userTask_reactivationRequestSchema.get("assigneeGroupsCandidates");
    MetadataBuilder userTask_reactivationRequest_assigneeUsersCandidates = userTask_reactivationRequestSchema.get("assigneeUsersCandidates");
    MetadataBuilder userTask_reactivationRequest_assigner = userTask_reactivationRequestSchema.get("assigner");
    MetadataBuilder userTask_reactivationRequest_attachedAncestors = userTask_reactivationRequestSchema.get("attachedAncestors");
    MetadataBuilder userTask_reactivationRequest_autocomplete = userTask_reactivationRequestSchema.get("autocomplete");
    MetadataBuilder userTask_reactivationRequest_caption = userTask_reactivationRequestSchema.get("caption");
    MetadataBuilder userTask_reactivationRequest_comments = userTask_reactivationRequestSchema.get("comments");
    MetadataBuilder userTask_reactivationRequest_contents = userTask_reactivationRequestSchema.get("contents");
    MetadataBuilder userTask_reactivationRequest_createdBy = userTask_reactivationRequestSchema.get("createdBy");
    MetadataBuilder userTask_reactivationRequest_createdOn = userTask_reactivationRequestSchema.get("createdOn");
    MetadataBuilder userTask_reactivationRequest_decision = userTask_reactivationRequestSchema.get("decision");
    MetadataBuilder userTask_reactivationRequest_deleted = userTask_reactivationRequestSchema.get("deleted");
    MetadataBuilder userTask_reactivationRequest_denyTokens = userTask_reactivationRequestSchema.get("denyTokens");
    MetadataBuilder userTask_reactivationRequest_description = userTask_reactivationRequestSchema.get("description");
    MetadataBuilder userTask_reactivationRequest_detachedauthorizations = userTask_reactivationRequestSchema.get("detachedauthorizations");
    MetadataBuilder userTask_reactivationRequest_dueDate = userTask_reactivationRequestSchema.get("dueDate");
    MetadataBuilder userTask_reactivationRequest_endDate = userTask_reactivationRequestSchema.get("endDate");
    MetadataBuilder userTask_reactivationRequest_errorOnPhysicalDeletion = userTask_reactivationRequestSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder userTask_reactivationRequest_escalationAssignee = userTask_reactivationRequestSchema.get("escalationAssignee");
	  MetadataBuilder userTask_reactivationRequest_estimatedSize = userTask_reactivationRequestSchema.get("estimatedSize");
    MetadataBuilder userTask_reactivationRequest_id = userTask_reactivationRequestSchema.get("id");
    MetadataBuilder userTask_reactivationRequest_isModel = userTask_reactivationRequestSchema.get("isModel");
    MetadataBuilder userTask_reactivationRequest_lastReminder = userTask_reactivationRequestSchema.get("lastReminder");
    MetadataBuilder userTask_reactivationRequest_legacyIdentifier = userTask_reactivationRequestSchema.get("legacyIdentifier");
    MetadataBuilder userTask_reactivationRequest_linkedContainers = userTask_reactivationRequestSchema.get("linkedContainers");
    MetadataBuilder userTask_reactivationRequest_linkedDocuments = userTask_reactivationRequestSchema.get("linkedDocuments");
    MetadataBuilder userTask_reactivationRequest_linkedFolders = userTask_reactivationRequestSchema.get("linkedFolders");
    MetadataBuilder userTask_reactivationRequest_logicallyDeletedOn = userTask_reactivationRequestSchema.get("logicallyDeletedOn");
    MetadataBuilder userTask_reactivationRequest_manualTokens = userTask_reactivationRequestSchema.get("manualTokens");
    MetadataBuilder userTask_reactivationRequest_markedForParsing = userTask_reactivationRequestSchema.get("markedForParsing");
    MetadataBuilder userTask_reactivationRequest_markedForPreviewConversion = userTask_reactivationRequestSchema.get("markedForPreviewConversion");
    MetadataBuilder userTask_reactivationRequest_markedForReindexing = userTask_reactivationRequestSchema.get("markedForReindexing");
    MetadataBuilder userTask_reactivationRequest_migrationDataVersion = userTask_reactivationRequestSchema.get("migrationDataVersion");
    MetadataBuilder userTask_reactivationRequest_modelTask = userTask_reactivationRequestSchema.get("modelTask");
    MetadataBuilder userTask_reactivationRequest_modifiedBy = userTask_reactivationRequestSchema.get("modifiedBy");
    MetadataBuilder userTask_reactivationRequest_modifiedOn = userTask_reactivationRequestSchema.get("modifiedOn");
    MetadataBuilder userTask_reactivationRequest_nextReminderOn = userTask_reactivationRequestSchema.get("nextReminderOn");
    MetadataBuilder userTask_reactivationRequest_nextTaskCreated = userTask_reactivationRequestSchema.get("nextTaskCreated");
    MetadataBuilder userTask_reactivationRequest_nextTasks = userTask_reactivationRequestSchema.get("nextTasks");
    MetadataBuilder userTask_reactivationRequest_nextTasksDecisions = userTask_reactivationRequestSchema.get("nextTasksDecisions");
    MetadataBuilder userTask_reactivationRequest_numberOfReminders = userTask_reactivationRequestSchema.get("numberOfReminders");
    MetadataBuilder userTask_reactivationRequest_parentTask = userTask_reactivationRequestSchema.get("parentTask");
    MetadataBuilder userTask_reactivationRequest_parentTaskDueDate = userTask_reactivationRequestSchema.get("parentTaskDueDate");
    MetadataBuilder userTask_reactivationRequest_path = userTask_reactivationRequestSchema.get("path");
    MetadataBuilder userTask_reactivationRequest_pathParts = userTask_reactivationRequestSchema.get("pathParts");
    MetadataBuilder userTask_reactivationRequest_principalpath = userTask_reactivationRequestSchema.get("principalpath");
    MetadataBuilder userTask_reactivationRequest_progressPercentage = userTask_reactivationRequestSchema.get("progressPercentage");
    MetadataBuilder userTask_reactivationRequest_question = userTask_reactivationRequestSchema.get("question");
    MetadataBuilder userTask_reactivationRequest_readByUser = userTask_reactivationRequestSchema.get("readByUser");
    MetadataBuilder userTask_reactivationRequest_reason = userTask_reactivationRequestSchema.get("reason");
    MetadataBuilder userTask_reactivationRequest_relativeDueDate = userTask_reactivationRequestSchema.get("relativeDueDate");
    MetadataBuilder userTask_reactivationRequest_reminderFrequency = userTask_reactivationRequestSchema.get("reminderFrequency");
    MetadataBuilder userTask_reactivationRequest_reminders = userTask_reactivationRequestSchema.get("reminders");
    MetadataBuilder userTask_reactivationRequest_removedauthorizations = userTask_reactivationRequestSchema.get("removedauthorizations");
    MetadataBuilder userTask_reactivationRequest_schema = userTask_reactivationRequestSchema.get("schema");
    MetadataBuilder userTask_reactivationRequest_shareDenyTokens = userTask_reactivationRequestSchema.get("shareDenyTokens");
    MetadataBuilder userTask_reactivationRequest_shareTokens = userTask_reactivationRequestSchema.get("shareTokens");
    MetadataBuilder userTask_reactivationRequest_starredByUsers = userTask_reactivationRequestSchema.get("starredByUsers");
    MetadataBuilder userTask_reactivationRequest_startDate = userTask_reactivationRequestSchema.get("startDate");
    MetadataBuilder userTask_reactivationRequest_status = userTask_reactivationRequestSchema.get("status");
    MetadataBuilder userTask_reactivationRequest_statusType = userTask_reactivationRequestSchema.get("statusType");
    MetadataBuilder userTask_reactivationRequest_taskFollowers = userTask_reactivationRequestSchema.get("taskFollowers");
    MetadataBuilder userTask_reactivationRequest_taskFollowersIds = userTask_reactivationRequestSchema.get("taskFollowersIds");
    MetadataBuilder userTask_reactivationRequest_title = userTask_reactivationRequestSchema.get("title");
    MetadataBuilder userTask_reactivationRequest_tokens = userTask_reactivationRequestSchema.get("tokens");
    MetadataBuilder userTask_reactivationRequest_tokensHierarchy = userTask_reactivationRequestSchema.get("tokensHierarchy");
    MetadataBuilder userTask_reactivationRequest_type = userTask_reactivationRequestSchema.get("type");
    MetadataBuilder userTask_reactivationRequest_visibleInTrees = userTask_reactivationRequestSchema.get("visibleInTrees");
    MetadataBuilder userTask_reactivationRequest_workflow = userTask_reactivationRequestSchema.get("workflow");
    MetadataBuilder userTask_reactivationRequest_workflowInstance = userTask_reactivationRequestSchema.get("workflowInstance");
    MetadataBuilder userTask_reactivationRequest_workflowTaskSort = userTask_reactivationRequestSchema.get("workflowTaskSort");
    MetadataBuilder userTask_returnRequest_administrativeUnit = userTask_returnRequestSchema.get("administrativeUnit");
    MetadataBuilder userTask_returnRequest_allReferences = userTask_returnRequestSchema.get("allReferences");
    MetadataBuilder userTask_returnRequest_allRemovedAuths = userTask_returnRequestSchema.get("allRemovedAuths");
    MetadataBuilder userTask_returnRequest_assignedOn = userTask_returnRequestSchema.get("assignedOn");
    MetadataBuilder userTask_returnRequest_assignee = userTask_returnRequestSchema.get("assignee");
    MetadataBuilder userTask_returnRequest_assigneeGroupsCandidates = userTask_returnRequestSchema.get("assigneeGroupsCandidates");
    MetadataBuilder userTask_returnRequest_assigneeUsersCandidates = userTask_returnRequestSchema.get("assigneeUsersCandidates");
    MetadataBuilder userTask_returnRequest_assigner = userTask_returnRequestSchema.get("assigner");
    MetadataBuilder userTask_returnRequest_attachedAncestors = userTask_returnRequestSchema.get("attachedAncestors");
    MetadataBuilder userTask_returnRequest_autocomplete = userTask_returnRequestSchema.get("autocomplete");
    MetadataBuilder userTask_returnRequest_caption = userTask_returnRequestSchema.get("caption");
    MetadataBuilder userTask_returnRequest_comments = userTask_returnRequestSchema.get("comments");
    MetadataBuilder userTask_returnRequest_contents = userTask_returnRequestSchema.get("contents");
    MetadataBuilder userTask_returnRequest_createdBy = userTask_returnRequestSchema.get("createdBy");
    MetadataBuilder userTask_returnRequest_createdOn = userTask_returnRequestSchema.get("createdOn");
    MetadataBuilder userTask_returnRequest_decision = userTask_returnRequestSchema.get("decision");
    MetadataBuilder userTask_returnRequest_deleted = userTask_returnRequestSchema.get("deleted");
    MetadataBuilder userTask_returnRequest_denyTokens = userTask_returnRequestSchema.get("denyTokens");
    MetadataBuilder userTask_returnRequest_description = userTask_returnRequestSchema.get("description");
    MetadataBuilder userTask_returnRequest_detachedauthorizations = userTask_returnRequestSchema.get("detachedauthorizations");
    MetadataBuilder userTask_returnRequest_dueDate = userTask_returnRequestSchema.get("dueDate");
    MetadataBuilder userTask_returnRequest_endDate = userTask_returnRequestSchema.get("endDate");
    MetadataBuilder userTask_returnRequest_errorOnPhysicalDeletion = userTask_returnRequestSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder userTask_returnRequest_escalationAssignee = userTask_returnRequestSchema.get("escalationAssignee");
	  MetadataBuilder userTask_returnRequest_estimatedSize = userTask_returnRequestSchema.get("estimatedSize");
    MetadataBuilder userTask_returnRequest_id = userTask_returnRequestSchema.get("id");
    MetadataBuilder userTask_returnRequest_isModel = userTask_returnRequestSchema.get("isModel");
    MetadataBuilder userTask_returnRequest_lastReminder = userTask_returnRequestSchema.get("lastReminder");
    MetadataBuilder userTask_returnRequest_legacyIdentifier = userTask_returnRequestSchema.get("legacyIdentifier");
    MetadataBuilder userTask_returnRequest_linkedContainers = userTask_returnRequestSchema.get("linkedContainers");
    MetadataBuilder userTask_returnRequest_linkedDocuments = userTask_returnRequestSchema.get("linkedDocuments");
    MetadataBuilder userTask_returnRequest_linkedFolders = userTask_returnRequestSchema.get("linkedFolders");
    MetadataBuilder userTask_returnRequest_logicallyDeletedOn = userTask_returnRequestSchema.get("logicallyDeletedOn");
    MetadataBuilder userTask_returnRequest_manualTokens = userTask_returnRequestSchema.get("manualTokens");
    MetadataBuilder userTask_returnRequest_markedForParsing = userTask_returnRequestSchema.get("markedForParsing");
    MetadataBuilder userTask_returnRequest_markedForPreviewConversion = userTask_returnRequestSchema.get("markedForPreviewConversion");
    MetadataBuilder userTask_returnRequest_markedForReindexing = userTask_returnRequestSchema.get("markedForReindexing");
    MetadataBuilder userTask_returnRequest_migrationDataVersion = userTask_returnRequestSchema.get("migrationDataVersion");
    MetadataBuilder userTask_returnRequest_modelTask = userTask_returnRequestSchema.get("modelTask");
    MetadataBuilder userTask_returnRequest_modifiedBy = userTask_returnRequestSchema.get("modifiedBy");
    MetadataBuilder userTask_returnRequest_modifiedOn = userTask_returnRequestSchema.get("modifiedOn");
    MetadataBuilder userTask_returnRequest_nextReminderOn = userTask_returnRequestSchema.get("nextReminderOn");
    MetadataBuilder userTask_returnRequest_nextTaskCreated = userTask_returnRequestSchema.get("nextTaskCreated");
    MetadataBuilder userTask_returnRequest_nextTasks = userTask_returnRequestSchema.get("nextTasks");
    MetadataBuilder userTask_returnRequest_nextTasksDecisions = userTask_returnRequestSchema.get("nextTasksDecisions");
    MetadataBuilder userTask_returnRequest_numberOfReminders = userTask_returnRequestSchema.get("numberOfReminders");
    MetadataBuilder userTask_returnRequest_parentTask = userTask_returnRequestSchema.get("parentTask");
    MetadataBuilder userTask_returnRequest_parentTaskDueDate = userTask_returnRequestSchema.get("parentTaskDueDate");
    MetadataBuilder userTask_returnRequest_path = userTask_returnRequestSchema.get("path");
    MetadataBuilder userTask_returnRequest_pathParts = userTask_returnRequestSchema.get("pathParts");
    MetadataBuilder userTask_returnRequest_principalpath = userTask_returnRequestSchema.get("principalpath");
    MetadataBuilder userTask_returnRequest_progressPercentage = userTask_returnRequestSchema.get("progressPercentage");
    MetadataBuilder userTask_returnRequest_question = userTask_returnRequestSchema.get("question");
    MetadataBuilder userTask_returnRequest_readByUser = userTask_returnRequestSchema.get("readByUser");
    MetadataBuilder userTask_returnRequest_reason = userTask_returnRequestSchema.get("reason");
    MetadataBuilder userTask_returnRequest_relativeDueDate = userTask_returnRequestSchema.get("relativeDueDate");
    MetadataBuilder userTask_returnRequest_reminderFrequency = userTask_returnRequestSchema.get("reminderFrequency");
    MetadataBuilder userTask_returnRequest_reminders = userTask_returnRequestSchema.get("reminders");
    MetadataBuilder userTask_returnRequest_removedauthorizations = userTask_returnRequestSchema.get("removedauthorizations");
    MetadataBuilder userTask_returnRequest_schema = userTask_returnRequestSchema.get("schema");
    MetadataBuilder userTask_returnRequest_shareDenyTokens = userTask_returnRequestSchema.get("shareDenyTokens");
    MetadataBuilder userTask_returnRequest_shareTokens = userTask_returnRequestSchema.get("shareTokens");
    MetadataBuilder userTask_returnRequest_starredByUsers = userTask_returnRequestSchema.get("starredByUsers");
    MetadataBuilder userTask_returnRequest_startDate = userTask_returnRequestSchema.get("startDate");
    MetadataBuilder userTask_returnRequest_status = userTask_returnRequestSchema.get("status");
    MetadataBuilder userTask_returnRequest_statusType = userTask_returnRequestSchema.get("statusType");
    MetadataBuilder userTask_returnRequest_taskFollowers = userTask_returnRequestSchema.get("taskFollowers");
    MetadataBuilder userTask_returnRequest_taskFollowersIds = userTask_returnRequestSchema.get("taskFollowersIds");
    MetadataBuilder userTask_returnRequest_title = userTask_returnRequestSchema.get("title");
    MetadataBuilder userTask_returnRequest_tokens = userTask_returnRequestSchema.get("tokens");
    MetadataBuilder userTask_returnRequest_tokensHierarchy = userTask_returnRequestSchema.get("tokensHierarchy");
    MetadataBuilder userTask_returnRequest_type = userTask_returnRequestSchema.get("type");
    MetadataBuilder userTask_returnRequest_visibleInTrees = userTask_returnRequestSchema.get("visibleInTrees");
    MetadataBuilder userTask_returnRequest_workflow = userTask_returnRequestSchema.get("workflow");
    MetadataBuilder userTask_returnRequest_workflowInstance = userTask_returnRequestSchema.get("workflowInstance");
    MetadataBuilder userTask_returnRequest_workflowTaskSort = userTask_returnRequestSchema.get("workflowTaskSort");
  }

  private void createUniformSubdivisionSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder uniformSubdivisionSchemaType, MetadataSchemaBuilder uniformSubdivisionSchema) {
    MetadataBuilder uniformSubdivision_allReferences = uniformSubdivisionSchema.create("allReferences").setType(MetadataValueType.STRING);
    uniformSubdivision_allReferences.setMultivalue(true);
    uniformSubdivision_allReferences.setSystemReserved(true);
    uniformSubdivision_allReferences.setUndeletable(true);
    uniformSubdivision_allReferences.setEssential(true);
    uniformSubdivision_allReferences.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_allRemovedAuths = uniformSubdivisionSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    uniformSubdivision_allRemovedAuths.setMultivalue(true);
    uniformSubdivision_allRemovedAuths.setSystemReserved(true);
    uniformSubdivision_allRemovedAuths.setUndeletable(true);
    uniformSubdivision_allRemovedAuths.setEssential(true);
    uniformSubdivision_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_attachedAncestors = uniformSubdivisionSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    uniformSubdivision_attachedAncestors.setMultivalue(true);
    uniformSubdivision_attachedAncestors.setSystemReserved(true);
    uniformSubdivision_attachedAncestors.setUndeletable(true);
    uniformSubdivision_attachedAncestors.setEssential(true);
    uniformSubdivision_attachedAncestors.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_autocomplete = uniformSubdivisionSchema.create("autocomplete").setType(MetadataValueType.STRING);
    uniformSubdivision_autocomplete.setMultivalue(true);
    uniformSubdivision_autocomplete.setSystemReserved(true);
    uniformSubdivision_autocomplete.setUndeletable(true);
    uniformSubdivision_autocomplete.setEssential(true);
    uniformSubdivision_autocomplete.setMultiLingual(true);
    MetadataBuilder uniformSubdivision_caption = uniformSubdivisionSchema.create("caption").setType(MetadataValueType.STRING);
    uniformSubdivision_caption.setSystemReserved(true);
    uniformSubdivision_caption.setUndeletable(true);
    uniformSubdivision_caption.setEssential(true);
    uniformSubdivision_caption.setMultiLingual(false);
    uniformSubdivision_caption.setSortable(true);
    MetadataBuilder uniformSubdivision_code = uniformSubdivisionSchema.create("code").setType(MetadataValueType.STRING);
    uniformSubdivision_code.setDefaultRequirement(true);
    uniformSubdivision_code.setUndeletable(true);
    uniformSubdivision_code.setEssential(true);
    uniformSubdivision_code.setSearchable(true);
    uniformSubdivision_code.setUniqueValue(true);
    MetadataBuilder uniformSubdivision_comments = uniformSubdivisionSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    uniformSubdivision_comments.setMultivalue(true);
    uniformSubdivision_comments.setUndeletable(true);
    uniformSubdivision_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder uniformSubdivision_createdBy = uniformSubdivisionSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    uniformSubdivision_createdBy.setSystemReserved(true);
    uniformSubdivision_createdBy.setUndeletable(true);
    uniformSubdivision_createdBy.setEssential(true);
    uniformSubdivision_createdBy.setMultiLingual(false);
    uniformSubdivision_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder uniformSubdivision_createdOn = uniformSubdivisionSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    uniformSubdivision_createdOn.setSystemReserved(true);
    uniformSubdivision_createdOn.setUndeletable(true);
    uniformSubdivision_createdOn.setEssential(true);
    uniformSubdivision_createdOn.setMultiLingual(false);
    uniformSubdivision_createdOn.setSortable(true);
    MetadataBuilder uniformSubdivision_deleted = uniformSubdivisionSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    uniformSubdivision_deleted.setSystemReserved(true);
    uniformSubdivision_deleted.setUndeletable(true);
    uniformSubdivision_deleted.setEssential(true);
    uniformSubdivision_deleted.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_denyTokens = uniformSubdivisionSchema.create("denyTokens").setType(MetadataValueType.STRING);
    uniformSubdivision_denyTokens.setMultivalue(true);
    uniformSubdivision_denyTokens.setSystemReserved(true);
    uniformSubdivision_denyTokens.setUndeletable(true);
    uniformSubdivision_denyTokens.setEssential(true);
    uniformSubdivision_denyTokens.setMultiLingual(false);
    uniformSubdivision_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder uniformSubdivision_description = uniformSubdivisionSchema.create("description").setType(MetadataValueType.TEXT);
    MetadataBuilder uniformSubdivision_detachedauthorizations = uniformSubdivisionSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    uniformSubdivision_detachedauthorizations.setSystemReserved(true);
    uniformSubdivision_detachedauthorizations.setUndeletable(true);
    uniformSubdivision_detachedauthorizations.setEssential(true);
    uniformSubdivision_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_errorOnPhysicalDeletion = uniformSubdivisionSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    uniformSubdivision_errorOnPhysicalDeletion.setSystemReserved(true);
    uniformSubdivision_errorOnPhysicalDeletion.setUndeletable(true);
    uniformSubdivision_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder uniformSubdivision_estimatedSize = uniformSubdivisionSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  uniformSubdivision_estimatedSize.setSystemReserved(true);
	  uniformSubdivision_estimatedSize.setUndeletable(true);
	  uniformSubdivision_estimatedSize.setEssential(true);
	  uniformSubdivision_estimatedSize.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_id = uniformSubdivisionSchema.create("id").setType(MetadataValueType.STRING);
    uniformSubdivision_id.setDefaultRequirement(true);
    uniformSubdivision_id.setSystemReserved(true);
    uniformSubdivision_id.setUndeletable(true);
    uniformSubdivision_id.setEssential(true);
    uniformSubdivision_id.setMultiLingual(false);
    uniformSubdivision_id.setSearchable(true);
    uniformSubdivision_id.setSortable(true);
    uniformSubdivision_id.setUniqueValue(true);
    uniformSubdivision_id.setUnmodifiable(true);
    MetadataBuilder uniformSubdivision_legacyIdentifier = uniformSubdivisionSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    uniformSubdivision_legacyIdentifier.setDefaultRequirement(true);
    uniformSubdivision_legacyIdentifier.setSystemReserved(true);
    uniformSubdivision_legacyIdentifier.setUndeletable(true);
    uniformSubdivision_legacyIdentifier.setEssential(true);
    uniformSubdivision_legacyIdentifier.setMultiLingual(false);
    uniformSubdivision_legacyIdentifier.setSearchable(true);
    uniformSubdivision_legacyIdentifier.setUniqueValue(true);
    uniformSubdivision_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder uniformSubdivision_logicallyDeletedOn = uniformSubdivisionSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    uniformSubdivision_logicallyDeletedOn.setSystemReserved(true);
    uniformSubdivision_logicallyDeletedOn.setUndeletable(true);
    uniformSubdivision_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_manualTokens = uniformSubdivisionSchema.create("manualTokens").setType(MetadataValueType.STRING);
    uniformSubdivision_manualTokens.setMultivalue(true);
    uniformSubdivision_manualTokens.setSystemReserved(true);
    uniformSubdivision_manualTokens.setUndeletable(true);
    uniformSubdivision_manualTokens.setEssential(true);
    uniformSubdivision_manualTokens.setMultiLingual(false);
    uniformSubdivision_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder uniformSubdivision_markedForParsing = uniformSubdivisionSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    uniformSubdivision_markedForParsing.setSystemReserved(true);
    uniformSubdivision_markedForParsing.setUndeletable(true);
    uniformSubdivision_markedForParsing.setEssential(true);
    uniformSubdivision_markedForParsing.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_markedForPreviewConversion = uniformSubdivisionSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    uniformSubdivision_markedForPreviewConversion.setSystemReserved(true);
    uniformSubdivision_markedForPreviewConversion.setUndeletable(true);
    uniformSubdivision_markedForPreviewConversion.setEssential(true);
    uniformSubdivision_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_markedForReindexing = uniformSubdivisionSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    uniformSubdivision_markedForReindexing.setSystemReserved(true);
    uniformSubdivision_markedForReindexing.setUndeletable(true);
    uniformSubdivision_markedForReindexing.setEssential(true);
    uniformSubdivision_markedForReindexing.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_migrationDataVersion = uniformSubdivisionSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    uniformSubdivision_migrationDataVersion.setSystemReserved(true);
    uniformSubdivision_migrationDataVersion.setUndeletable(true);
    uniformSubdivision_migrationDataVersion.setEssential(true);
    uniformSubdivision_migrationDataVersion.setMultiLingual(false);
    uniformSubdivision_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder uniformSubdivision_modifiedBy = uniformSubdivisionSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    uniformSubdivision_modifiedBy.setSystemReserved(true);
    uniformSubdivision_modifiedBy.setUndeletable(true);
    uniformSubdivision_modifiedBy.setEssential(true);
    uniformSubdivision_modifiedBy.setMultiLingual(false);
    uniformSubdivision_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder uniformSubdivision_modifiedOn = uniformSubdivisionSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    uniformSubdivision_modifiedOn.setSystemReserved(true);
    uniformSubdivision_modifiedOn.setUndeletable(true);
    uniformSubdivision_modifiedOn.setEssential(true);
    uniformSubdivision_modifiedOn.setMultiLingual(false);
    uniformSubdivision_modifiedOn.setSortable(true);
    MetadataBuilder uniformSubdivision_path = uniformSubdivisionSchema.create("path").setType(MetadataValueType.STRING);
    uniformSubdivision_path.setMultivalue(true);
    uniformSubdivision_path.setSystemReserved(true);
    uniformSubdivision_path.setUndeletable(true);
    uniformSubdivision_path.setEssential(true);
    uniformSubdivision_path.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_pathParts = uniformSubdivisionSchema.create("pathParts").setType(MetadataValueType.STRING);
    uniformSubdivision_pathParts.setMultivalue(true);
    uniformSubdivision_pathParts.setSystemReserved(true);
    uniformSubdivision_pathParts.setUndeletable(true);
    uniformSubdivision_pathParts.setEssential(true);
    uniformSubdivision_pathParts.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_principalpath = uniformSubdivisionSchema.create("principalpath").setType(MetadataValueType.STRING);
    uniformSubdivision_principalpath.setSystemReserved(true);
    uniformSubdivision_principalpath.setUndeletable(true);
    uniformSubdivision_principalpath.setEssential(true);
    uniformSubdivision_principalpath.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_removedauthorizations = uniformSubdivisionSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    uniformSubdivision_removedauthorizations.setMultivalue(true);
    uniformSubdivision_removedauthorizations.setSystemReserved(true);
    uniformSubdivision_removedauthorizations.setUndeletable(true);
    uniformSubdivision_removedauthorizations.setEssential(true);
    uniformSubdivision_removedauthorizations.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_retentionRule = uniformSubdivisionSchema.create("retentionRule").setType(MetadataValueType.REFERENCE);
    uniformSubdivision_retentionRule.setMultivalue(true);
    uniformSubdivision_retentionRule.setUndeletable(true);
    uniformSubdivision_retentionRule.setEssential(true);
    uniformSubdivision_retentionRule.defineReferencesTo(types.getSchemaType("retentionRule"));
    MetadataBuilder uniformSubdivision_schema = uniformSubdivisionSchema.create("schema").setType(MetadataValueType.STRING);
    uniformSubdivision_schema.setDefaultRequirement(true);
    uniformSubdivision_schema.setSystemReserved(true);
    uniformSubdivision_schema.setUndeletable(true);
    uniformSubdivision_schema.setEssential(true);
    uniformSubdivision_schema.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_shareDenyTokens = uniformSubdivisionSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    uniformSubdivision_shareDenyTokens.setMultivalue(true);
    uniformSubdivision_shareDenyTokens.setSystemReserved(true);
    uniformSubdivision_shareDenyTokens.setUndeletable(true);
    uniformSubdivision_shareDenyTokens.setEssential(true);
    uniformSubdivision_shareDenyTokens.setMultiLingual(false);
    uniformSubdivision_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder uniformSubdivision_shareTokens = uniformSubdivisionSchema.create("shareTokens").setType(MetadataValueType.STRING);
    uniformSubdivision_shareTokens.setMultivalue(true);
    uniformSubdivision_shareTokens.setSystemReserved(true);
    uniformSubdivision_shareTokens.setUndeletable(true);
    uniformSubdivision_shareTokens.setEssential(true);
    uniformSubdivision_shareTokens.setMultiLingual(false);
    uniformSubdivision_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder uniformSubdivision_title = uniformSubdivisionSchema.create("title").setType(MetadataValueType.STRING);
    uniformSubdivision_title.setDefaultRequirement(true);
    uniformSubdivision_title.setUndeletable(true);
    uniformSubdivision_title.setEssential(true);
    uniformSubdivision_title.setMultiLingual(true);
    uniformSubdivision_title.setSchemaAutocomplete(true);
    uniformSubdivision_title.setSearchable(true);
    MetadataBuilder uniformSubdivision_tokens = uniformSubdivisionSchema.create("tokens").setType(MetadataValueType.STRING);
    uniformSubdivision_tokens.setMultivalue(true);
    uniformSubdivision_tokens.setSystemReserved(true);
    uniformSubdivision_tokens.setUndeletable(true);
    uniformSubdivision_tokens.setEssential(true);
    uniformSubdivision_tokens.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_tokensHierarchy = uniformSubdivisionSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    uniformSubdivision_tokensHierarchy.setMultivalue(true);
    uniformSubdivision_tokensHierarchy.setSystemReserved(true);
    uniformSubdivision_tokensHierarchy.setUndeletable(true);
    uniformSubdivision_tokensHierarchy.setEssential(true);
    uniformSubdivision_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder uniformSubdivision_visibleInTrees = uniformSubdivisionSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    uniformSubdivision_visibleInTrees.setSystemReserved(true);
    uniformSubdivision_visibleInTrees.setUndeletable(true);
    uniformSubdivision_visibleInTrees.setEssential(true);
    uniformSubdivision_visibleInTrees.setMultiLingual(false);
  }

  private void createAuthorizationDetailsSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder authorizationDetailsSchemaType, MetadataSchemaBuilder authorizationDetailsSchema) {
  }

  private void createAdministrativeUnitSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder administrativeUnitSchemaType, MetadataSchemaBuilder administrativeUnitSchema) {
    MetadataBuilder administrativeUnit_adress = administrativeUnitSchema.create("adress").setType(MetadataValueType.STRING);
    administrativeUnit_adress.setUndeletable(true);
    MetadataBuilder administrativeUnit_allReferences = administrativeUnitSchema.create("allReferences").setType(MetadataValueType.STRING);
    administrativeUnit_allReferences.setMultivalue(true);
    administrativeUnit_allReferences.setSystemReserved(true);
    administrativeUnit_allReferences.setUndeletable(true);
    administrativeUnit_allReferences.setEssential(true);
    administrativeUnit_allReferences.setMultiLingual(false);
    MetadataBuilder administrativeUnit_allRemovedAuths = administrativeUnitSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    administrativeUnit_allRemovedAuths.setMultivalue(true);
    administrativeUnit_allRemovedAuths.setSystemReserved(true);
    administrativeUnit_allRemovedAuths.setUndeletable(true);
    administrativeUnit_allRemovedAuths.setEssential(true);
    administrativeUnit_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder administrativeUnit_attachedAncestors = administrativeUnitSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    administrativeUnit_attachedAncestors.setMultivalue(true);
    administrativeUnit_attachedAncestors.setSystemReserved(true);
    administrativeUnit_attachedAncestors.setUndeletable(true);
    administrativeUnit_attachedAncestors.setEssential(true);
    administrativeUnit_attachedAncestors.setMultiLingual(false);
    MetadataBuilder administrativeUnit_autocomplete = administrativeUnitSchema.create("autocomplete").setType(MetadataValueType.STRING);
    administrativeUnit_autocomplete.setMultivalue(true);
    administrativeUnit_autocomplete.setSystemReserved(true);
    administrativeUnit_autocomplete.setUndeletable(true);
    administrativeUnit_autocomplete.setEssential(true);
    administrativeUnit_autocomplete.setMultiLingual(true);
    MetadataBuilder administrativeUnit_caption = administrativeUnitSchema.create("caption").setType(MetadataValueType.STRING);
    administrativeUnit_caption.setSystemReserved(true);
    administrativeUnit_caption.setUndeletable(true);
    administrativeUnit_caption.setEssential(true);
    administrativeUnit_caption.setMultiLingual(false);
    administrativeUnit_caption.setSortable(true);
    MetadataBuilder administrativeUnit_code = administrativeUnitSchema.create("code").setType(MetadataValueType.STRING);
    administrativeUnit_code.setDefaultRequirement(true);
    administrativeUnit_code.setUndeletable(true);
    administrativeUnit_code.setEssential(true);
    administrativeUnit_code.setSchemaAutocomplete(true);
    administrativeUnit_code.setSearchable(true);
    administrativeUnit_code.setUniqueValue(true);
    MetadataBuilder administrativeUnit_createdBy = administrativeUnitSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    administrativeUnit_createdBy.setSystemReserved(true);
    administrativeUnit_createdBy.setUndeletable(true);
    administrativeUnit_createdBy.setEssential(true);
    administrativeUnit_createdBy.setMultiLingual(false);
    administrativeUnit_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder administrativeUnit_createdOn = administrativeUnitSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    administrativeUnit_createdOn.setSystemReserved(true);
    administrativeUnit_createdOn.setUndeletable(true);
    administrativeUnit_createdOn.setEssential(true);
    administrativeUnit_createdOn.setMultiLingual(false);
    administrativeUnit_createdOn.setSortable(true);
    MetadataBuilder administrativeUnit_decommissioningMonth = administrativeUnitSchema.create("decommissioningMonth").setType(MetadataValueType.ENUM);
    administrativeUnit_decommissioningMonth.setUndeletable(true);
    administrativeUnit_decommissioningMonth.defineAsEnum(DecommissioningMonth.class);
    MetadataBuilder administrativeUnit_deleted = administrativeUnitSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    administrativeUnit_deleted.setSystemReserved(true);
    administrativeUnit_deleted.setUndeletable(true);
    administrativeUnit_deleted.setEssential(true);
    administrativeUnit_deleted.setMultiLingual(false);
    MetadataBuilder administrativeUnit_denyTokens = administrativeUnitSchema.create("denyTokens").setType(MetadataValueType.STRING);
    administrativeUnit_denyTokens.setMultivalue(true);
    administrativeUnit_denyTokens.setSystemReserved(true);
    administrativeUnit_denyTokens.setUndeletable(true);
    administrativeUnit_denyTokens.setEssential(true);
    administrativeUnit_denyTokens.setMultiLingual(false);
    administrativeUnit_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder administrativeUnit_description = administrativeUnitSchema.create("description").setType(MetadataValueType.STRING);
    administrativeUnit_description.setUndeletable(true);
    administrativeUnit_description.setMultiLingual(true);
    administrativeUnit_description.setEssentialInSummary(true);
    administrativeUnit_description.setSearchable(true);
    MetadataBuilder administrativeUnit_detachedauthorizations = administrativeUnitSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    administrativeUnit_detachedauthorizations.setSystemReserved(true);
    administrativeUnit_detachedauthorizations.setUndeletable(true);
    administrativeUnit_detachedauthorizations.setEssential(true);
    administrativeUnit_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder administrativeUnit_errorOnPhysicalDeletion = administrativeUnitSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    administrativeUnit_errorOnPhysicalDeletion.setSystemReserved(true);
    administrativeUnit_errorOnPhysicalDeletion.setUndeletable(true);
    administrativeUnit_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder administrativeUnit_estimatedSize = administrativeUnitSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  administrativeUnit_estimatedSize.setSystemReserved(true);
	  administrativeUnit_estimatedSize.setUndeletable(true);
	  administrativeUnit_estimatedSize.setEssential(true);
	  administrativeUnit_estimatedSize.setMultiLingual(false);
    MetadataBuilder administrativeUnit_filingSpaces = administrativeUnitSchema.create("filingSpaces").setType(MetadataValueType.REFERENCE);
    administrativeUnit_filingSpaces.setMultivalue(true);
    administrativeUnit_filingSpaces.setUndeletable(true);
    administrativeUnit_filingSpaces.defineReferencesTo(types.getSchemaType("filingSpace"));
    MetadataBuilder administrativeUnit_filingSpacesAdmins = administrativeUnitSchema.create("filingSpacesAdmins").setType(MetadataValueType.REFERENCE);
    administrativeUnit_filingSpacesAdmins.setMultivalue(true);
    administrativeUnit_filingSpacesAdmins.setUndeletable(true);
    administrativeUnit_filingSpacesAdmins.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder administrativeUnit_filingSpacesUsers = administrativeUnitSchema.create("filingSpacesUsers").setType(MetadataValueType.REFERENCE);
    administrativeUnit_filingSpacesUsers.setMultivalue(true);
    administrativeUnit_filingSpacesUsers.setUndeletable(true);
    administrativeUnit_filingSpacesUsers.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder administrativeUnit_id = administrativeUnitSchema.create("id").setType(MetadataValueType.STRING);
    administrativeUnit_id.setDefaultRequirement(true);
    administrativeUnit_id.setSystemReserved(true);
    administrativeUnit_id.setUndeletable(true);
    administrativeUnit_id.setEssential(true);
    administrativeUnit_id.setMultiLingual(false);
    administrativeUnit_id.setSearchable(true);
    administrativeUnit_id.setSortable(true);
    administrativeUnit_id.setUniqueValue(true);
    administrativeUnit_id.setUnmodifiable(true);
    MetadataBuilder administrativeUnit_legacyIdentifier = administrativeUnitSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    administrativeUnit_legacyIdentifier.setDefaultRequirement(true);
    administrativeUnit_legacyIdentifier.setSystemReserved(true);
    administrativeUnit_legacyIdentifier.setUndeletable(true);
    administrativeUnit_legacyIdentifier.setEssential(true);
    administrativeUnit_legacyIdentifier.setMultiLingual(false);
    administrativeUnit_legacyIdentifier.setSearchable(true);
    administrativeUnit_legacyIdentifier.setUniqueValue(true);
    administrativeUnit_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder administrativeUnit_logicallyDeletedOn = administrativeUnitSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    administrativeUnit_logicallyDeletedOn.setSystemReserved(true);
    administrativeUnit_logicallyDeletedOn.setUndeletable(true);
    administrativeUnit_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder administrativeUnit_manualTokens = administrativeUnitSchema.create("manualTokens").setType(MetadataValueType.STRING);
    administrativeUnit_manualTokens.setMultivalue(true);
    administrativeUnit_manualTokens.setSystemReserved(true);
    administrativeUnit_manualTokens.setUndeletable(true);
    administrativeUnit_manualTokens.setEssential(true);
    administrativeUnit_manualTokens.setMultiLingual(false);
    administrativeUnit_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder administrativeUnit_markedForParsing = administrativeUnitSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    administrativeUnit_markedForParsing.setSystemReserved(true);
    administrativeUnit_markedForParsing.setUndeletable(true);
    administrativeUnit_markedForParsing.setEssential(true);
    administrativeUnit_markedForParsing.setMultiLingual(false);
    MetadataBuilder administrativeUnit_markedForPreviewConversion = administrativeUnitSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    administrativeUnit_markedForPreviewConversion.setSystemReserved(true);
    administrativeUnit_markedForPreviewConversion.setUndeletable(true);
    administrativeUnit_markedForPreviewConversion.setEssential(true);
    administrativeUnit_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder administrativeUnit_markedForReindexing = administrativeUnitSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    administrativeUnit_markedForReindexing.setSystemReserved(true);
    administrativeUnit_markedForReindexing.setUndeletable(true);
    administrativeUnit_markedForReindexing.setEssential(true);
    administrativeUnit_markedForReindexing.setMultiLingual(false);
    MetadataBuilder administrativeUnit_migrationDataVersion = administrativeUnitSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    administrativeUnit_migrationDataVersion.setSystemReserved(true);
    administrativeUnit_migrationDataVersion.setUndeletable(true);
    administrativeUnit_migrationDataVersion.setEssential(true);
    administrativeUnit_migrationDataVersion.setMultiLingual(false);
    administrativeUnit_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder administrativeUnit_modifiedBy = administrativeUnitSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    administrativeUnit_modifiedBy.setSystemReserved(true);
    administrativeUnit_modifiedBy.setUndeletable(true);
    administrativeUnit_modifiedBy.setEssential(true);
    administrativeUnit_modifiedBy.setMultiLingual(false);
    administrativeUnit_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder administrativeUnit_modifiedOn = administrativeUnitSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    administrativeUnit_modifiedOn.setSystemReserved(true);
    administrativeUnit_modifiedOn.setUndeletable(true);
    administrativeUnit_modifiedOn.setEssential(true);
    administrativeUnit_modifiedOn.setMultiLingual(false);
    administrativeUnit_modifiedOn.setSortable(true);
    MetadataBuilder administrativeUnit_parent = administrativeUnitSchema.create("parent").setType(MetadataValueType.REFERENCE);
    administrativeUnit_parent.setUndeletable(true);
    administrativeUnit_parent.setEssential(true);
    administrativeUnit_parent.defineChildOfRelationshipToType(types.getSchemaType("administrativeUnit"));
    MetadataBuilder administrativeUnit_path = administrativeUnitSchema.create("path").setType(MetadataValueType.STRING);
    administrativeUnit_path.setMultivalue(true);
    administrativeUnit_path.setSystemReserved(true);
    administrativeUnit_path.setUndeletable(true);
    administrativeUnit_path.setEssential(true);
    administrativeUnit_path.setMultiLingual(false);
    MetadataBuilder administrativeUnit_pathParts = administrativeUnitSchema.create("pathParts").setType(MetadataValueType.STRING);
    administrativeUnit_pathParts.setMultivalue(true);
    administrativeUnit_pathParts.setSystemReserved(true);
    administrativeUnit_pathParts.setUndeletable(true);
    administrativeUnit_pathParts.setEssential(true);
    administrativeUnit_pathParts.setMultiLingual(false);
    MetadataBuilder administrativeUnit_principalpath = administrativeUnitSchema.create("principalpath").setType(MetadataValueType.STRING);
    administrativeUnit_principalpath.setSystemReserved(true);
    administrativeUnit_principalpath.setUndeletable(true);
    administrativeUnit_principalpath.setEssential(true);
    administrativeUnit_principalpath.setMultiLingual(false);
    MetadataBuilder administrativeUnit_removedauthorizations = administrativeUnitSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    administrativeUnit_removedauthorizations.setMultivalue(true);
    administrativeUnit_removedauthorizations.setSystemReserved(true);
    administrativeUnit_removedauthorizations.setUndeletable(true);
    administrativeUnit_removedauthorizations.setEssential(true);
    administrativeUnit_removedauthorizations.setMultiLingual(false);
    MetadataBuilder administrativeUnit_schema = administrativeUnitSchema.create("schema").setType(MetadataValueType.STRING);
    administrativeUnit_schema.setDefaultRequirement(true);
    administrativeUnit_schema.setSystemReserved(true);
    administrativeUnit_schema.setUndeletable(true);
    administrativeUnit_schema.setEssential(true);
    administrativeUnit_schema.setMultiLingual(false);
    MetadataBuilder administrativeUnit_shareDenyTokens = administrativeUnitSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    administrativeUnit_shareDenyTokens.setMultivalue(true);
    administrativeUnit_shareDenyTokens.setSystemReserved(true);
    administrativeUnit_shareDenyTokens.setUndeletable(true);
    administrativeUnit_shareDenyTokens.setEssential(true);
    administrativeUnit_shareDenyTokens.setMultiLingual(false);
    administrativeUnit_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder administrativeUnit_shareTokens = administrativeUnitSchema.create("shareTokens").setType(MetadataValueType.STRING);
    administrativeUnit_shareTokens.setMultivalue(true);
    administrativeUnit_shareTokens.setSystemReserved(true);
    administrativeUnit_shareTokens.setUndeletable(true);
    administrativeUnit_shareTokens.setEssential(true);
    administrativeUnit_shareTokens.setMultiLingual(false);
    administrativeUnit_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder administrativeUnit_title = administrativeUnitSchema.create("title").setType(MetadataValueType.STRING);
    administrativeUnit_title.setDefaultRequirement(true);
    administrativeUnit_title.setUndeletable(true);
    administrativeUnit_title.setEssential(true);
    administrativeUnit_title.setMultiLingual(true);
    administrativeUnit_title.setSchemaAutocomplete(true);
    administrativeUnit_title.setSearchable(true);
    MetadataBuilder administrativeUnit_tokens = administrativeUnitSchema.create("tokens").setType(MetadataValueType.STRING);
    administrativeUnit_tokens.setMultivalue(true);
    administrativeUnit_tokens.setSystemReserved(true);
    administrativeUnit_tokens.setUndeletable(true);
    administrativeUnit_tokens.setEssential(true);
    administrativeUnit_tokens.setMultiLingual(false);
    MetadataBuilder administrativeUnit_tokensHierarchy = administrativeUnitSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    administrativeUnit_tokensHierarchy.setMultivalue(true);
    administrativeUnit_tokensHierarchy.setSystemReserved(true);
    administrativeUnit_tokensHierarchy.setUndeletable(true);
    administrativeUnit_tokensHierarchy.setEssential(true);
    administrativeUnit_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder administrativeUnit_unitAncestors = administrativeUnitSchema.create("unitAncestors").setType(MetadataValueType.REFERENCE);
    administrativeUnit_unitAncestors.setMultivalue(true);
    administrativeUnit_unitAncestors.setUndeletable(true);
    administrativeUnit_unitAncestors.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder administrativeUnit_visibleInTrees = administrativeUnitSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    administrativeUnit_visibleInTrees.setSystemReserved(true);
    administrativeUnit_visibleInTrees.setUndeletable(true);
    administrativeUnit_visibleInTrees.setEssential(true);
    administrativeUnit_visibleInTrees.setMultiLingual(false);
  }

  private void createDdvDocumentTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvDocumentTypeSchemaType, MetadataSchemaBuilder ddvDocumentTypeSchema) {
    MetadataBuilder ddvDocumentType_allReferences = ddvDocumentTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvDocumentType_allReferences.setMultivalue(true);
    ddvDocumentType_allReferences.setSystemReserved(true);
    ddvDocumentType_allReferences.setUndeletable(true);
    ddvDocumentType_allReferences.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_allRemovedAuths = ddvDocumentTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvDocumentType_allRemovedAuths.setMultivalue(true);
    ddvDocumentType_allRemovedAuths.setSystemReserved(true);
    ddvDocumentType_allRemovedAuths.setUndeletable(true);
    ddvDocumentType_allRemovedAuths.setEssential(true);
    ddvDocumentType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_attachedAncestors = ddvDocumentTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvDocumentType_attachedAncestors.setMultivalue(true);
    ddvDocumentType_attachedAncestors.setSystemReserved(true);
    ddvDocumentType_attachedAncestors.setUndeletable(true);
    ddvDocumentType_attachedAncestors.setEssential(true);
    ddvDocumentType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_autocomplete = ddvDocumentTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvDocumentType_autocomplete.setMultivalue(true);
    ddvDocumentType_autocomplete.setSystemReserved(true);
    ddvDocumentType_autocomplete.setUndeletable(true);
    ddvDocumentType_autocomplete.setEssential(true);
    ddvDocumentType_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvDocumentType_caption = ddvDocumentTypeSchema.create("caption").setType(MetadataValueType.STRING);
    ddvDocumentType_caption.setSystemReserved(true);
    ddvDocumentType_caption.setUndeletable(true);
    ddvDocumentType_caption.setMultiLingual(false);
    ddvDocumentType_caption.setSortable(true);
    MetadataBuilder ddvDocumentType_code = ddvDocumentTypeSchema.create("code").setType(MetadataValueType.STRING);
    ddvDocumentType_code.setDefaultRequirement(true);
    ddvDocumentType_code.setUndeletable(true);
    ddvDocumentType_code.setSchemaAutocomplete(true);
    ddvDocumentType_code.setSearchable(true);
    ddvDocumentType_code.setUniqueValue(true);
    MetadataBuilder ddvDocumentType_comments = ddvDocumentTypeSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvDocumentType_comments.setMultivalue(true);
    ddvDocumentType_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvDocumentType_createdBy = ddvDocumentTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvDocumentType_createdBy.setSystemReserved(true);
    ddvDocumentType_createdBy.setUndeletable(true);
    ddvDocumentType_createdBy.setMultiLingual(false);
    ddvDocumentType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvDocumentType_createdOn = ddvDocumentTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvDocumentType_createdOn.setSystemReserved(true);
    ddvDocumentType_createdOn.setUndeletable(true);
    ddvDocumentType_createdOn.setMultiLingual(false);
    ddvDocumentType_createdOn.setSortable(true);
    MetadataBuilder ddvDocumentType_deleted = ddvDocumentTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvDocumentType_deleted.setSystemReserved(true);
    ddvDocumentType_deleted.setUndeletable(true);
    ddvDocumentType_deleted.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_denyTokens = ddvDocumentTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvDocumentType_denyTokens.setMultivalue(true);
    ddvDocumentType_denyTokens.setSystemReserved(true);
    ddvDocumentType_denyTokens.setUndeletable(true);
    ddvDocumentType_denyTokens.setMultiLingual(false);
    ddvDocumentType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvDocumentType_description = ddvDocumentTypeSchema.create("description").setType(MetadataValueType.TEXT);
    ddvDocumentType_description.setUndeletable(true);
    ddvDocumentType_description.setMultiLingual(true);
    ddvDocumentType_description.setEssentialInSummary(true);
    ddvDocumentType_description.setSearchable(true);
    MetadataBuilder ddvDocumentType_detachedauthorizations = ddvDocumentTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvDocumentType_detachedauthorizations.setSystemReserved(true);
    ddvDocumentType_detachedauthorizations.setUndeletable(true);
    ddvDocumentType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_errorOnPhysicalDeletion = ddvDocumentTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvDocumentType_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvDocumentType_errorOnPhysicalDeletion.setUndeletable(true);
    ddvDocumentType_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder ddvDocumentType_estimatedSize = ddvDocumentTypeSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  ddvDocumentType_estimatedSize.setSystemReserved(true);
	  ddvDocumentType_estimatedSize.setUndeletable(true);
	  ddvDocumentType_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_id = ddvDocumentTypeSchema.create("id").setType(MetadataValueType.STRING);
    ddvDocumentType_id.setDefaultRequirement(true);
    ddvDocumentType_id.setSystemReserved(true);
    ddvDocumentType_id.setUndeletable(true);
    ddvDocumentType_id.setMultiLingual(false);
    ddvDocumentType_id.setSearchable(true);
    ddvDocumentType_id.setSortable(true);
    ddvDocumentType_id.setUniqueValue(true);
    ddvDocumentType_id.setUnmodifiable(true);
    MetadataBuilder ddvDocumentType_legacyIdentifier = ddvDocumentTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvDocumentType_legacyIdentifier.setDefaultRequirement(true);
    ddvDocumentType_legacyIdentifier.setSystemReserved(true);
    ddvDocumentType_legacyIdentifier.setUndeletable(true);
    ddvDocumentType_legacyIdentifier.setMultiLingual(false);
    ddvDocumentType_legacyIdentifier.setSearchable(true);
    ddvDocumentType_legacyIdentifier.setUniqueValue(true);
    ddvDocumentType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvDocumentType_linkedSchema = ddvDocumentTypeSchema.create("linkedSchema").setType(MetadataValueType.STRING);
    MetadataBuilder ddvDocumentType_logicallyDeletedOn = ddvDocumentTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvDocumentType_logicallyDeletedOn.setSystemReserved(true);
    ddvDocumentType_logicallyDeletedOn.setUndeletable(true);
    ddvDocumentType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_manualTokens = ddvDocumentTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvDocumentType_manualTokens.setMultivalue(true);
    ddvDocumentType_manualTokens.setSystemReserved(true);
    ddvDocumentType_manualTokens.setUndeletable(true);
    ddvDocumentType_manualTokens.setMultiLingual(false);
    ddvDocumentType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvDocumentType_markedForParsing = ddvDocumentTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvDocumentType_markedForParsing.setSystemReserved(true);
    ddvDocumentType_markedForParsing.setUndeletable(true);
    ddvDocumentType_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_markedForPreviewConversion = ddvDocumentTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvDocumentType_markedForPreviewConversion.setSystemReserved(true);
    ddvDocumentType_markedForPreviewConversion.setUndeletable(true);
    ddvDocumentType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_markedForReindexing = ddvDocumentTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvDocumentType_markedForReindexing.setSystemReserved(true);
    ddvDocumentType_markedForReindexing.setUndeletable(true);
    ddvDocumentType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_migrationDataVersion = ddvDocumentTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvDocumentType_migrationDataVersion.setSystemReserved(true);
    ddvDocumentType_migrationDataVersion.setUndeletable(true);
    ddvDocumentType_migrationDataVersion.setMultiLingual(false);
    ddvDocumentType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvDocumentType_modifiedBy = ddvDocumentTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvDocumentType_modifiedBy.setSystemReserved(true);
    ddvDocumentType_modifiedBy.setUndeletable(true);
    ddvDocumentType_modifiedBy.setMultiLingual(false);
    ddvDocumentType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvDocumentType_modifiedOn = ddvDocumentTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvDocumentType_modifiedOn.setSystemReserved(true);
    ddvDocumentType_modifiedOn.setUndeletable(true);
    ddvDocumentType_modifiedOn.setMultiLingual(false);
    ddvDocumentType_modifiedOn.setSortable(true);
    MetadataBuilder ddvDocumentType_path = ddvDocumentTypeSchema.create("path").setType(MetadataValueType.STRING);
    ddvDocumentType_path.setMultivalue(true);
    ddvDocumentType_path.setSystemReserved(true);
    ddvDocumentType_path.setUndeletable(true);
    ddvDocumentType_path.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_pathParts = ddvDocumentTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvDocumentType_pathParts.setMultivalue(true);
    ddvDocumentType_pathParts.setSystemReserved(true);
    ddvDocumentType_pathParts.setUndeletable(true);
    ddvDocumentType_pathParts.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_principalpath = ddvDocumentTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvDocumentType_principalpath.setSystemReserved(true);
    ddvDocumentType_principalpath.setUndeletable(true);
    ddvDocumentType_principalpath.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_removedauthorizations = ddvDocumentTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvDocumentType_removedauthorizations.setMultivalue(true);
    ddvDocumentType_removedauthorizations.setSystemReserved(true);
    ddvDocumentType_removedauthorizations.setUndeletable(true);
    ddvDocumentType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_schema = ddvDocumentTypeSchema.create("schema").setType(MetadataValueType.STRING);
    ddvDocumentType_schema.setDefaultRequirement(true);
    ddvDocumentType_schema.setSystemReserved(true);
    ddvDocumentType_schema.setUndeletable(true);
    ddvDocumentType_schema.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_shareDenyTokens = ddvDocumentTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvDocumentType_shareDenyTokens.setMultivalue(true);
    ddvDocumentType_shareDenyTokens.setSystemReserved(true);
    ddvDocumentType_shareDenyTokens.setUndeletable(true);
    ddvDocumentType_shareDenyTokens.setMultiLingual(false);
    ddvDocumentType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvDocumentType_shareTokens = ddvDocumentTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvDocumentType_shareTokens.setMultivalue(true);
    ddvDocumentType_shareTokens.setSystemReserved(true);
    ddvDocumentType_shareTokens.setUndeletable(true);
    ddvDocumentType_shareTokens.setMultiLingual(false);
    ddvDocumentType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvDocumentType_templates = ddvDocumentTypeSchema.create("templates").setType(MetadataValueType.CONTENT);
    ddvDocumentType_templates.setMultivalue(true);
    ddvDocumentType_templates.setUndeletable(true);
    ddvDocumentType_templates.defineStructureFactory(ContentFactory.class);
    MetadataBuilder ddvDocumentType_title = ddvDocumentTypeSchema.create("title").setType(MetadataValueType.STRING);
    ddvDocumentType_title.setDefaultRequirement(true);
    ddvDocumentType_title.setUndeletable(true);
    ddvDocumentType_title.setMultiLingual(true);
    ddvDocumentType_title.setSchemaAutocomplete(true);
    ddvDocumentType_title.setSearchable(true);
    ddvDocumentType_title.setUniqueValue(true);
    MetadataBuilder ddvDocumentType_tokens = ddvDocumentTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvDocumentType_tokens.setMultivalue(true);
    ddvDocumentType_tokens.setSystemReserved(true);
    ddvDocumentType_tokens.setUndeletable(true);
    ddvDocumentType_tokens.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_tokensHierarchy = ddvDocumentTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvDocumentType_tokensHierarchy.setMultivalue(true);
    ddvDocumentType_tokensHierarchy.setSystemReserved(true);
    ddvDocumentType_tokensHierarchy.setUndeletable(true);
    ddvDocumentType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvDocumentType_visibleInTrees = ddvDocumentTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvDocumentType_visibleInTrees.setSystemReserved(true);
    ddvDocumentType_visibleInTrees.setUndeletable(true);
    ddvDocumentType_visibleInTrees.setMultiLingual(false);
  }

  private void createFolderSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder folderSchemaType, MetadataSchemaBuilder folderSchema) {
    MetadataBuilder folder_activeRetentionPeriodCode = folderSchema.create("activeRetentionPeriodCode").setType(MetadataValueType.STRING);
    folder_activeRetentionPeriodCode.setUndeletable(true);
    MetadataBuilder folder_activeRetentionType = folderSchema.create("activeRetentionType").setType(MetadataValueType.ENUM);
    folder_activeRetentionType.setUndeletable(true);
    folder_activeRetentionType.setEssential(true);
    folder_activeRetentionType.defineAsEnum(RetentionType.class);
    MetadataBuilder folder_actualDepositDate = folderSchema.create("actualDepositDate").setType(MetadataValueType.DATE);
    folder_actualDepositDate.setUndeletable(true);
    folder_actualDepositDate.setEssential(true);
    folder_actualDepositDate.setDuplicable(true);
    MetadataBuilder folder_actualDestructionDate = folderSchema.create("actualDestructionDate").setType(MetadataValueType.DATE);
    folder_actualDestructionDate.setUndeletable(true);
    folder_actualDestructionDate.setEssential(true);
    folder_actualDestructionDate.setDuplicable(true);
    MetadataBuilder folder_actualTransferDate = folderSchema.create("actualTransferDate").setType(MetadataValueType.DATE);
    folder_actualTransferDate.setUndeletable(true);
    folder_actualTransferDate.setEssential(true);
    folder_actualTransferDate.setDuplicable(true);
    MetadataBuilder folder_administrativeUnit = folderSchema.create("administrativeUnit").setType(MetadataValueType.REFERENCE);
    folder_administrativeUnit.setDefaultRequirement(true);
    folder_administrativeUnit.setUndeletable(true);
    folder_administrativeUnit.setEssential(true);
    folder_administrativeUnit.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder folder_administrativeUnitAncestors = folderSchema.create("administrativeUnitAncestors").setType(MetadataValueType.REFERENCE);
    folder_administrativeUnitAncestors.setMultivalue(true);
    folder_administrativeUnitAncestors.setUndeletable(true);
    folder_administrativeUnitAncestors.setEssential(true);
    folder_administrativeUnitAncestors.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder folder_administrativeUnitCode = folderSchema.create("administrativeUnitCode").setType(MetadataValueType.STRING);
    folder_administrativeUnitCode.setUndeletable(true);
    MetadataBuilder folder_administrativeUnitEntered = folderSchema.create("administrativeUnitEntered").setType(MetadataValueType.REFERENCE);
    folder_administrativeUnitEntered.setUndeletable(true);
    folder_administrativeUnitEntered.setEssential(true);
    folder_administrativeUnitEntered.setDuplicable(true);
    folder_administrativeUnitEntered.defineTaxonomyRelationshipToType(types.getSchemaType("administrativeUnit"));
    MetadataBuilder folder_alertUsersWhenAvailable = folderSchema.create("alertUsersWhenAvailable").setType(MetadataValueType.REFERENCE);
    folder_alertUsersWhenAvailable.setMultivalue(true);
    folder_alertUsersWhenAvailable.setUndeletable(true);
    folder_alertUsersWhenAvailable.setDuplicable(true);
    folder_alertUsersWhenAvailable.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_allReferences = folderSchema.create("allReferences").setType(MetadataValueType.STRING);
    folder_allReferences.setMultivalue(true);
    folder_allReferences.setSystemReserved(true);
    folder_allReferences.setUndeletable(true);
    folder_allReferences.setEssential(true);
    folder_allReferences.setMultiLingual(false);
    MetadataBuilder folder_allRemovedAuths = folderSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    folder_allRemovedAuths.setMultivalue(true);
    folder_allRemovedAuths.setSystemReserved(true);
    folder_allRemovedAuths.setUndeletable(true);
    folder_allRemovedAuths.setEssential(true);
    folder_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder folder_applicableCopyRule = folderSchema.create("applicableCopyRule").setType(MetadataValueType.STRUCTURE);
    folder_applicableCopyRule.setMultivalue(true);
    folder_applicableCopyRule.setUndeletable(true);
    folder_applicableCopyRule.setEssential(true);
    folder_applicableCopyRule.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder folder_archivisticStatus = folderSchema.create("archivisticStatus").setType(MetadataValueType.ENUM);
    folder_archivisticStatus.setUndeletable(true);
    folder_archivisticStatus.setEssential(true);
    folder_archivisticStatus.setEssentialInSummary(true);
    folder_archivisticStatus.defineAsEnum(FolderStatus.class);
    MetadataBuilder folder_attachedAncestors = folderSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    folder_attachedAncestors.setMultivalue(true);
    folder_attachedAncestors.setSystemReserved(true);
    folder_attachedAncestors.setUndeletable(true);
    folder_attachedAncestors.setEssential(true);
    folder_attachedAncestors.setMultiLingual(false);
    MetadataBuilder folder_autocomplete = folderSchema.create("autocomplete").setType(MetadataValueType.STRING);
    folder_autocomplete.setMultivalue(true);
    folder_autocomplete.setSystemReserved(true);
    folder_autocomplete.setUndeletable(true);
    folder_autocomplete.setEssential(true);
    folder_autocomplete.setMultiLingual(true);
    MetadataBuilder folder_borrowDate = folderSchema.create("borrowDate").setType(MetadataValueType.DATE_TIME);
    folder_borrowDate.setUndeletable(true);
    folder_borrowDate.setDuplicable(true);
    MetadataBuilder folder_borrowPreviewReturnDate = folderSchema.create("borrowPreviewReturnDate").setType(MetadataValueType.DATE);
    folder_borrowPreviewReturnDate.setUndeletable(true);
    folder_borrowPreviewReturnDate.setDuplicable(true);
    MetadataBuilder folder_borrowReturnDate = folderSchema.create("borrowReturnDate").setType(MetadataValueType.DATE_TIME);
    folder_borrowReturnDate.setUndeletable(true);
    folder_borrowReturnDate.setDuplicable(true);
    MetadataBuilder folder_borrowUser = folderSchema.create("borrowUser").setType(MetadataValueType.REFERENCE);
    folder_borrowUser.setUndeletable(true);
    folder_borrowUser.setDuplicable(true);
    folder_borrowUser.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_borrowUserEntered = folderSchema.create("borrowUserEntered").setType(MetadataValueType.REFERENCE);
    folder_borrowUserEntered.setSystemReserved(true);
    folder_borrowUserEntered.setUndeletable(true);
    folder_borrowUserEntered.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_borrowed = folderSchema.create("borrowed").setType(MetadataValueType.BOOLEAN);
    folder_borrowed.setUndeletable(true);
    folder_borrowed.setDuplicable(true);
    MetadataBuilder folder_borrowingType = folderSchema.create("borrowingType").setType(MetadataValueType.ENUM);
    folder_borrowingType.setUndeletable(true);
    folder_borrowingType.setDuplicable(true);
    folder_borrowingType.defineAsEnum(BorrowingType.class);
    MetadataBuilder folder_caption = folderSchema.create("caption").setType(MetadataValueType.STRING);
    folder_caption.setSystemReserved(true);
    folder_caption.setUndeletable(true);
    folder_caption.setEssential(true);
    folder_caption.setMultiLingual(false);
    folder_caption.setSortable(true);
    MetadataBuilder folder_category = folderSchema.create("category").setType(MetadataValueType.REFERENCE);
    folder_category.setDefaultRequirement(true);
    folder_category.setUndeletable(true);
    folder_category.setEssential(true);
    folder_category.defineTaxonomyRelationshipToType(types.getSchemaType("category"));
    MetadataBuilder folder_categoryCode = folderSchema.create("categoryCode").setType(MetadataValueType.STRING);
    folder_categoryCode.setUndeletable(true);
    folder_categoryCode.setEssential(true);
    MetadataBuilder folder_categoryEntered = folderSchema.create("categoryEntered").setType(MetadataValueType.REFERENCE);
    folder_categoryEntered.setUndeletable(true);
    folder_categoryEntered.setEssential(true);
    folder_categoryEntered.setDuplicable(true);
    folder_categoryEntered.defineReferencesTo(types.getSchemaType("category"));
    MetadataBuilder folder_closingDate = folderSchema.create("closingDate").setType(MetadataValueType.DATE);
    folder_closingDate.setUndeletable(true);
    folder_closingDate.setEssential(true);
    MetadataBuilder folder_comments = folderSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    folder_comments.setMultivalue(true);
    folder_comments.setUndeletable(true);
    folder_comments.setDuplicable(true);
    folder_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder folder_confidential = folderSchema.create("confidential").setType(MetadataValueType.BOOLEAN);
    MetadataBuilder folder_container = folderSchema.create("container").setType(MetadataValueType.REFERENCE);
    folder_container.setUndeletable(true);
    folder_container.setEssential(true);
    folder_container.setDuplicable(true);
    folder_container.defineReferencesTo(types.getSchemaType("containerRecord"));
    MetadataBuilder folder_copyRulesExpectedDepositDates = folderSchema.create("copyRulesExpectedDepositDates").setType(MetadataValueType.DATE);
    folder_copyRulesExpectedDepositDates.setMultivalue(true);
    folder_copyRulesExpectedDepositDates.setUndeletable(true);
    folder_copyRulesExpectedDepositDates.setEssential(true);
    MetadataBuilder folder_copyRulesExpectedDestructionDates = folderSchema.create("copyRulesExpectedDestructionDates").setType(MetadataValueType.DATE);
    folder_copyRulesExpectedDestructionDates.setMultivalue(true);
    folder_copyRulesExpectedDestructionDates.setUndeletable(true);
    folder_copyRulesExpectedDestructionDates.setEssential(true);
    MetadataBuilder folder_copyRulesExpectedTransferDates = folderSchema.create("copyRulesExpectedTransferDates").setType(MetadataValueType.DATE);
    folder_copyRulesExpectedTransferDates.setMultivalue(true);
    folder_copyRulesExpectedTransferDates.setUndeletable(true);
    folder_copyRulesExpectedTransferDates.setEssential(true);
    MetadataBuilder folder_copyStatus = folderSchema.create("copyStatus").setType(MetadataValueType.ENUM);
    folder_copyStatus.setDefaultRequirement(true);
    folder_copyStatus.setUndeletable(true);
    folder_copyStatus.setEssential(true);
    folder_copyStatus.defineAsEnum(CopyType.class);
    MetadataBuilder folder_copyStatusEntered = folderSchema.create("copyStatusEntered").setType(MetadataValueType.ENUM);
    folder_copyStatusEntered.setUndeletable(true);
    folder_copyStatusEntered.setEssential(true);
    folder_copyStatusEntered.setDuplicable(true);
    folder_copyStatusEntered.defineAsEnum(CopyType.class);
    MetadataBuilder folder_createdBy = folderSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    folder_createdBy.setSystemReserved(true);
    folder_createdBy.setUndeletable(true);
    folder_createdBy.setEssential(true);
    folder_createdBy.setMultiLingual(false);
    folder_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_createdOn = folderSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    folder_createdOn.setSystemReserved(true);
    folder_createdOn.setUndeletable(true);
    folder_createdOn.setEssential(true);
    folder_createdOn.setMultiLingual(false);
    folder_createdOn.setSortable(true);
    MetadataBuilder folder_deleted = folderSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    folder_deleted.setSystemReserved(true);
    folder_deleted.setUndeletable(true);
    folder_deleted.setEssential(true);
    folder_deleted.setMultiLingual(false);
    folder_deleted.setEssentialInSummary(true);
    MetadataBuilder folder_denyTokens = folderSchema.create("denyTokens").setType(MetadataValueType.STRING);
    folder_denyTokens.setMultivalue(true);
    folder_denyTokens.setSystemReserved(true);
    folder_denyTokens.setUndeletable(true);
    folder_denyTokens.setEssential(true);
    folder_denyTokens.setMultiLingual(false);
    folder_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder folder_description = folderSchema.create("description").setType(MetadataValueType.TEXT);
    folder_description.setUndeletable(true);
    folder_description.setEssentialInSummary(true);
    folder_description.setSearchable(true);
    folder_description.setDuplicable(true);
    MetadataBuilder folder_detachedauthorizations = folderSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    folder_detachedauthorizations.setSystemReserved(true);
    folder_detachedauthorizations.setUndeletable(true);
    folder_detachedauthorizations.setEssential(true);
    folder_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder folder_documentsTokens = folderSchema.create("documentsTokens").setType(MetadataValueType.STRING);
    folder_documentsTokens.setMultivalue(true);
    MetadataBuilder folder_enteredClosingDate = folderSchema.create("enteredClosingDate").setType(MetadataValueType.DATE);
    folder_enteredClosingDate.setUndeletable(true);
    folder_enteredClosingDate.setEssential(true);
    folder_enteredClosingDate.setDuplicable(true);
    MetadataBuilder folder_errorOnPhysicalDeletion = folderSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    folder_errorOnPhysicalDeletion.setSystemReserved(true);
    folder_errorOnPhysicalDeletion.setUndeletable(true);
    folder_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder folder_essential = folderSchema.create("essential").setType(MetadataValueType.BOOLEAN);
	  MetadataBuilder folder_estimatedSize = folderSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  folder_estimatedSize.setSystemReserved(true);
	  folder_estimatedSize.setUndeletable(true);
	  folder_estimatedSize.setEssential(true);
	  folder_estimatedSize.setMultiLingual(false);
    MetadataBuilder folder_expectedDepositDate = folderSchema.create("expectedDepositDate").setType(MetadataValueType.DATE);
    folder_expectedDepositDate.setUndeletable(true);
    folder_expectedDepositDate.setEssential(true);
    MetadataBuilder folder_expectedDestructionDate = folderSchema.create("expectedDestructionDate").setType(MetadataValueType.DATE);
    folder_expectedDestructionDate.setUndeletable(true);
    folder_expectedDestructionDate.setEssential(true);
    MetadataBuilder folder_expectedTransferDate = folderSchema.create("expectedTransferDate").setType(MetadataValueType.DATE);
    folder_expectedTransferDate.setUndeletable(true);
    folder_expectedTransferDate.setEssential(true);
    MetadataBuilder folder_favorites = folderSchema.create("favorites").setType(MetadataValueType.STRING);
    folder_favorites.setMultivalue(true);
    folder_favorites.setDefaultRequirement(true);
    folder_favorites.setSystemReserved(true);
    folder_favorites.setUndeletable(true);
    MetadataBuilder folder_filingSpace = folderSchema.create("filingSpace").setType(MetadataValueType.REFERENCE);
    folder_filingSpace.setUndeletable(true);
    folder_filingSpace.defineReferencesTo(types.getSchemaType("filingSpace"));
    MetadataBuilder folder_filingSpaceCode = folderSchema.create("filingSpaceCode").setType(MetadataValueType.STRING);
    folder_filingSpaceCode.setUndeletable(true);
    folder_filingSpaceCode.setEssential(true);
    MetadataBuilder folder_filingSpaceEntered = folderSchema.create("filingSpaceEntered").setType(MetadataValueType.REFERENCE);
    folder_filingSpaceEntered.setUndeletable(true);
    folder_filingSpaceEntered.setEnabled(false);
    folder_filingSpaceEntered.defineReferencesTo(types.getSchemaType("filingSpace"));
    MetadataBuilder folder_folderType = folderSchema.create("folderType").setType(MetadataValueType.STRING);
    folder_folderType.setSystemReserved(true);
    folder_folderType.setUndeletable(true);
    MetadataBuilder folder_formCreatedBy = folderSchema.create("formCreatedBy").setType(MetadataValueType.REFERENCE);
    folder_formCreatedBy.setSystemReserved(true);
    folder_formCreatedBy.setUndeletable(true);
    folder_formCreatedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_formCreatedOn = folderSchema.create("formCreatedOn").setType(MetadataValueType.DATE_TIME);
    folder_formCreatedOn.setSystemReserved(true);
    folder_formCreatedOn.setUndeletable(true);
    MetadataBuilder folder_formModifiedBy = folderSchema.create("formModifiedBy").setType(MetadataValueType.REFERENCE);
    folder_formModifiedBy.setSystemReserved(true);
    folder_formModifiedBy.setUndeletable(true);
    folder_formModifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_formModifiedOn = folderSchema.create("formModifiedOn").setType(MetadataValueType.DATE_TIME);
    folder_formModifiedOn.setSystemReserved(true);
    folder_formModifiedOn.setUndeletable(true);
    MetadataBuilder folder_hasContent = folderSchema.create("hasContent").setType(MetadataValueType.BOOLEAN);
    folder_hasContent.setUndeletable(true);
    MetadataBuilder folder_id = folderSchema.create("id").setType(MetadataValueType.STRING);
    folder_id.setDefaultRequirement(true);
    folder_id.setSystemReserved(true);
    folder_id.setUndeletable(true);
    folder_id.setEssential(true);
    folder_id.setMultiLingual(false);
    folder_id.setSearchable(true);
    folder_id.setSortable(true);
    folder_id.setUniqueValue(true);
    folder_id.setUnmodifiable(true);
    MetadataBuilder folder_inactiveDisposalType = folderSchema.create("inactiveDisposalType").setType(MetadataValueType.ENUM);
    folder_inactiveDisposalType.setUndeletable(true);
    folder_inactiveDisposalType.setEssential(true);
    folder_inactiveDisposalType.defineAsEnum(DisposalType.class);
    MetadataBuilder folder_isRestrictedAccess = folderSchema.create("isRestrictedAccess").setType(MetadataValueType.BOOLEAN);
    folder_isRestrictedAccess.setSystemReserved(true);
    folder_isRestrictedAccess.setUndeletable(true);
    MetadataBuilder folder_keywords = folderSchema.create("keywords").setType(MetadataValueType.STRING);
    folder_keywords.setMultivalue(true);
    folder_keywords.setUndeletable(true);
    folder_keywords.setSearchable(true);
    folder_keywords.setDuplicable(true);
    MetadataBuilder folder_legacyIdentifier = folderSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    folder_legacyIdentifier.setDefaultRequirement(true);
    folder_legacyIdentifier.setSystemReserved(true);
    folder_legacyIdentifier.setUndeletable(true);
    folder_legacyIdentifier.setEssential(true);
    folder_legacyIdentifier.setMultiLingual(false);
    folder_legacyIdentifier.setSearchable(true);
    folder_legacyIdentifier.setUniqueValue(true);
    folder_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder folder_linearSize = folderSchema.create("linearSize").setType(MetadataValueType.NUMBER);
    folder_linearSize.setUndeletable(true);
    folder_linearSize.setDuplicable(true);
    MetadataBuilder folder_logicallyDeletedOn = folderSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    folder_logicallyDeletedOn.setSystemReserved(true);
    folder_logicallyDeletedOn.setUndeletable(true);
    folder_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder folder_mainCopyRule = folderSchema.create("mainCopyRule").setType(MetadataValueType.STRUCTURE);
    folder_mainCopyRule.setDefaultRequirement(true);
    folder_mainCopyRule.setUndeletable(true);
    folder_mainCopyRule.setEssential(true);
    folder_mainCopyRule.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder folder_mainCopyRuleCode = folderSchema.create("mainCopyRuleCode").setType(MetadataValueType.STRING);
    folder_mainCopyRuleCode.setSystemReserved(true);
    folder_mainCopyRuleCode.setUndeletable(true);
    folder_mainCopyRuleCode.setSearchable(true);
    MetadataBuilder folder_mainCopyRuleIdEntered = folderSchema.create("mainCopyRuleIdEntered").setType(MetadataValueType.STRING);
    folder_mainCopyRuleIdEntered.setUndeletable(true);
    folder_mainCopyRuleIdEntered.setDuplicable(true);
    MetadataBuilder folder_manualArchivisticStatus = folderSchema.create("manualArchivisticStatus").setType(MetadataValueType.ENUM);
    folder_manualArchivisticStatus.setUndeletable(true);
    folder_manualArchivisticStatus.setEnabled(false);
    folder_manualArchivisticStatus.defineAsEnum(FolderStatus.class);
    MetadataBuilder folder_manualDisposalType = folderSchema.create("manualDisposalType").setType(MetadataValueType.ENUM);
    folder_manualDisposalType.setUndeletable(true);
    folder_manualDisposalType.setEnabled(false);
    folder_manualDisposalType.defineAsEnum(DisposalType.class);
    MetadataBuilder folder_manualExpectedDepositDate = folderSchema.create("manualExpectedDepositDate").setType(MetadataValueType.DATE);
    folder_manualExpectedDepositDate.setUndeletable(true);
    folder_manualExpectedDepositDate.setEnabled(false);
    MetadataBuilder folder_manualExpectedDesctructionDate = folderSchema.create("manualExpectedDesctructionDate").setType(MetadataValueType.DATE);
    folder_manualExpectedDesctructionDate.setUndeletable(true);
    folder_manualExpectedDesctructionDate.setEnabled(false);
    MetadataBuilder folder_manualExpectedTransferDate = folderSchema.create("manualExpectedTransferDate").setType(MetadataValueType.DATE);
    folder_manualExpectedTransferDate.setUndeletable(true);
    folder_manualExpectedTransferDate.setEnabled(false);
    MetadataBuilder folder_manualTokens = folderSchema.create("manualTokens").setType(MetadataValueType.STRING);
    folder_manualTokens.setMultivalue(true);
    folder_manualTokens.setSystemReserved(true);
    folder_manualTokens.setUndeletable(true);
    folder_manualTokens.setEssential(true);
    folder_manualTokens.setMultiLingual(false);
    folder_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder folder_markedForParsing = folderSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    folder_markedForParsing.setSystemReserved(true);
    folder_markedForParsing.setUndeletable(true);
    folder_markedForParsing.setEssential(true);
    folder_markedForParsing.setMultiLingual(false);
    MetadataBuilder folder_markedForPreviewConversion = folderSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    folder_markedForPreviewConversion.setSystemReserved(true);
    folder_markedForPreviewConversion.setUndeletable(true);
    folder_markedForPreviewConversion.setEssential(true);
    folder_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder folder_markedForReindexing = folderSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    folder_markedForReindexing.setSystemReserved(true);
    folder_markedForReindexing.setUndeletable(true);
    folder_markedForReindexing.setEssential(true);
    folder_markedForReindexing.setMultiLingual(false);
    MetadataBuilder folder_mediaType = folderSchema.create("mediaType").setType(MetadataValueType.ENUM);
    folder_mediaType.setUndeletable(true);
    folder_mediaType.setEssential(true);
    folder_mediaType.setEssentialInSummary(true);
    folder_mediaType.defineAsEnum(FolderMediaType.class);
    MetadataBuilder folder_mediumTypes = folderSchema.create("mediumTypes").setType(MetadataValueType.REFERENCE);
    folder_mediumTypes.setMultivalue(true);
    folder_mediumTypes.setUndeletable(true);
    folder_mediumTypes.setEssential(true);
    folder_mediumTypes.setDuplicable(true);
    folder_mediumTypes.defineReferencesTo(types.getSchemaType("ddvMediumType"));
    MetadataBuilder folder_migrationDataVersion = folderSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    folder_migrationDataVersion.setSystemReserved(true);
    folder_migrationDataVersion.setUndeletable(true);
    folder_migrationDataVersion.setEssential(true);
    folder_migrationDataVersion.setMultiLingual(false);
    folder_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder folder_modifiedBy = folderSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    folder_modifiedBy.setSystemReserved(true);
    folder_modifiedBy.setUndeletable(true);
    folder_modifiedBy.setEssential(true);
    folder_modifiedBy.setMultiLingual(false);
    folder_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_modifiedOn = folderSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    folder_modifiedOn.setSystemReserved(true);
    folder_modifiedOn.setUndeletable(true);
    folder_modifiedOn.setEssential(true);
    folder_modifiedOn.setMultiLingual(false);
    folder_modifiedOn.setSortable(true);
    MetadataBuilder folder_openingDate = folderSchema.create("openingDate").setType(MetadataValueType.DATE);
    folder_openingDate.setDefaultRequirement(true);
    folder_openingDate.setUndeletable(true);
    folder_openingDate.setEssential(true);
    folder_openingDate.setDuplicable(true);
    MetadataBuilder folder_parentFolder = folderSchema.create("parentFolder").setType(MetadataValueType.REFERENCE);
    folder_parentFolder.setUndeletable(true);
    folder_parentFolder.setEssential(true);
    folder_parentFolder.setDuplicable(true);
    folder_parentFolder.defineChildOfRelationshipToType(types.getSchemaType("folder"));
    MetadataBuilder folder_path = folderSchema.create("path").setType(MetadataValueType.STRING);
    folder_path.setMultivalue(true);
    folder_path.setSystemReserved(true);
    folder_path.setUndeletable(true);
    folder_path.setEssential(true);
    folder_path.setMultiLingual(false);
    MetadataBuilder folder_pathParts = folderSchema.create("pathParts").setType(MetadataValueType.STRING);
    folder_pathParts.setMultivalue(true);
    folder_pathParts.setSystemReserved(true);
    folder_pathParts.setUndeletable(true);
    folder_pathParts.setEssential(true);
    folder_pathParts.setMultiLingual(false);
    MetadataBuilder folder_permissionStatus = folderSchema.create("permissionStatus").setType(MetadataValueType.ENUM);
    folder_permissionStatus.setSystemReserved(true);
    folder_permissionStatus.setUndeletable(true);
    folder_permissionStatus.defineAsEnum(FolderStatus.class);
    MetadataBuilder folder_previousDepositDates = folderSchema.create("previousDepositDates").setType(MetadataValueType.DATE);
    folder_previousDepositDates.setMultivalue(true);
    folder_previousDepositDates.setUndeletable(true);
    MetadataBuilder folder_previousTransferDates = folderSchema.create("previousTransferDates").setType(MetadataValueType.DATE);
    folder_previousTransferDates.setMultivalue(true);
    folder_previousTransferDates.setUndeletable(true);
    MetadataBuilder folder_principalpath = folderSchema.create("principalpath").setType(MetadataValueType.STRING);
    folder_principalpath.setSystemReserved(true);
    folder_principalpath.setUndeletable(true);
    folder_principalpath.setEssential(true);
    folder_principalpath.setMultiLingual(false);
    MetadataBuilder folder_reactivationDates = folderSchema.create("reactivationDates").setType(MetadataValueType.DATE);
    folder_reactivationDates.setMultivalue(true);
    folder_reactivationDates.setUndeletable(true);
    MetadataBuilder folder_reactivationDecommissioningDate = folderSchema.create("reactivationDecommissioningDate").setType(MetadataValueType.DATE);
    folder_reactivationDecommissioningDate.setUndeletable(true);
    MetadataBuilder folder_reactivationUsers = folderSchema.create("reactivationUsers").setType(MetadataValueType.REFERENCE);
    folder_reactivationUsers.setMultivalue(true);
    folder_reactivationUsers.setUndeletable(true);
    folder_reactivationUsers.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder folder_removedauthorizations = folderSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    folder_removedauthorizations.setMultivalue(true);
    folder_removedauthorizations.setSystemReserved(true);
    folder_removedauthorizations.setUndeletable(true);
    folder_removedauthorizations.setEssential(true);
    folder_removedauthorizations.setMultiLingual(false);
    MetadataBuilder folder_retentionRule = folderSchema.create("retentionRule").setType(MetadataValueType.REFERENCE);
    folder_retentionRule.setDefaultRequirement(true);
    folder_retentionRule.setUndeletable(true);
    folder_retentionRule.setEssential(true);
    folder_retentionRule.defineReferencesTo(types.getSchemaType("retentionRule"));
    MetadataBuilder folder_retentionRuleEntered = folderSchema.create("retentionRuleEntered").setType(MetadataValueType.REFERENCE);
    folder_retentionRuleEntered.setUndeletable(true);
    folder_retentionRuleEntered.setEssential(true);
    folder_retentionRuleEntered.setDuplicable(true);
    folder_retentionRuleEntered.defineReferencesTo(types.getSchemaType("retentionRule"));
    MetadataBuilder folder_ruleAdminUnit = folderSchema.create("ruleAdminUnit").setType(MetadataValueType.REFERENCE);
    folder_ruleAdminUnit.setMultivalue(true);
    folder_ruleAdminUnit.setMarkedForDeletion(true);
    folder_ruleAdminUnit.setUndeletable(true);
    folder_ruleAdminUnit.setEnabled(false);
    folder_ruleAdminUnit.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder folder_schema = folderSchema.create("schema").setType(MetadataValueType.STRING);
    folder_schema.setDefaultRequirement(true);
    folder_schema.setSystemReserved(true);
    folder_schema.setUndeletable(true);
    folder_schema.setEssential(true);
    folder_schema.setMultiLingual(false);
    MetadataBuilder folder_semiactiveRetentionPeriodCode = folderSchema.create("semiactiveRetentionPeriodCode").setType(MetadataValueType.STRING);
    folder_semiactiveRetentionPeriodCode.setUndeletable(true);
    MetadataBuilder folder_semiactiveRetentionType = folderSchema.create("semiactiveRetentionType").setType(MetadataValueType.ENUM);
    folder_semiactiveRetentionType.setUndeletable(true);
    folder_semiactiveRetentionType.setEssential(true);
    folder_semiactiveRetentionType.defineAsEnum(RetentionType.class);
    MetadataBuilder folder_shareDenyTokens = folderSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    folder_shareDenyTokens.setMultivalue(true);
    folder_shareDenyTokens.setSystemReserved(true);
    folder_shareDenyTokens.setUndeletable(true);
    folder_shareDenyTokens.setEssential(true);
    folder_shareDenyTokens.setMultiLingual(false);
    folder_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder folder_shareTokens = folderSchema.create("shareTokens").setType(MetadataValueType.STRING);
    folder_shareTokens.setMultivalue(true);
    folder_shareTokens.setSystemReserved(true);
    folder_shareTokens.setUndeletable(true);
    folder_shareTokens.setEssential(true);
    folder_shareTokens.setMultiLingual(false);
    folder_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder folder_subFoldersTokens = folderSchema.create("subFoldersTokens").setType(MetadataValueType.STRING);
    folder_subFoldersTokens.setMultivalue(true);
    MetadataBuilder folder_summary = folderSchema.create("summary").setType(MetadataValueType.TEXT);
    folder_summary.setUndeletable(true);
    MetadataBuilder folder_timerange = folderSchema.create("timerange").setType(MetadataValueType.STRING);
    folder_timerange.setInputMask("9999-9999");
    folder_timerange.setEnabled(false);
    MetadataBuilder folder_title = folderSchema.create("title").setType(MetadataValueType.STRING);
    folder_title.setDefaultRequirement(true);
    folder_title.setUndeletable(true);
    folder_title.setEssential(true);
    folder_title.setMultiLingual(false);
    folder_title.setSchemaAutocomplete(true);
    folder_title.setSearchable(true);
    folder_title.setSortable(true);
    folder_title.setDuplicable(true);
    MetadataBuilder folder_tokens = folderSchema.create("tokens").setType(MetadataValueType.STRING);
    folder_tokens.setMultivalue(true);
    folder_tokens.setSystemReserved(true);
    folder_tokens.setUndeletable(true);
    folder_tokens.setEssential(true);
    folder_tokens.setMultiLingual(false);
    MetadataBuilder folder_tokensHierarchy = folderSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    folder_tokensHierarchy.setMultivalue(true);
    folder_tokensHierarchy.setSystemReserved(true);
    folder_tokensHierarchy.setUndeletable(true);
    folder_tokensHierarchy.setEssential(true);
    folder_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder folder_type = folderSchema.create("type").setType(MetadataValueType.REFERENCE);
    folder_type.setUndeletable(true);
    folder_type.setEssential(true);
    folder_type.setDuplicable(true);
    folder_type.defineReferencesTo(types.getSchemaType("ddvFolderType"));
    MetadataBuilder folder_uniformSubdivision = folderSchema.create("uniformSubdivision").setType(MetadataValueType.REFERENCE);
    folder_uniformSubdivision.setUndeletable(true);
    folder_uniformSubdivision.setEssential(true);
    folder_uniformSubdivision.defineReferencesTo(types.getSchemaType("uniformSubdivision"));
    MetadataBuilder folder_uniformSubdivisionEntered = folderSchema.create("uniformSubdivisionEntered").setType(MetadataValueType.REFERENCE);
    folder_uniformSubdivisionEntered.setUndeletable(true);
    folder_uniformSubdivisionEntered.setEssential(true);
    folder_uniformSubdivisionEntered.setDuplicable(true);
    folder_uniformSubdivisionEntered.defineReferencesTo(types.getSchemaType("uniformSubdivision"));
    MetadataBuilder folder_uniqueKey = folderSchema.create("uniqueKey").setType(MetadataValueType.STRING);
    folder_uniqueKey.setSystemReserved(true);
    folder_uniqueKey.setUndeletable(true);
    folder_uniqueKey.setUniqueValue(true);
    MetadataBuilder folder_visibleInTrees = folderSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    folder_visibleInTrees.setSystemReserved(true);
    folder_visibleInTrees.setUndeletable(true);
    folder_visibleInTrees.setEssential(true);
    folder_visibleInTrees.setMultiLingual(false);
  }

  private void createTaskSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder taskSchemaType, MetadataSchemaBuilder task_approvalSchema, MetadataSchemaBuilder taskSchema) {
    MetadataBuilder task_approval_allReferences = task_approvalSchema.get("allReferences");
    MetadataBuilder task_approval_allRemovedAuths = task_approvalSchema.get("allRemovedAuths");
    MetadataBuilder task_approval_assignCandidates = task_approvalSchema.get("assignCandidates");
    MetadataBuilder task_approval_assignedOn = task_approvalSchema.get("assignedOn");
    MetadataBuilder task_approval_assignedTo = task_approvalSchema.get("assignedTo");
    MetadataBuilder task_approval_attachedAncestors = task_approvalSchema.get("attachedAncestors");
    MetadataBuilder task_approval_autocomplete = task_approvalSchema.get("autocomplete");
    MetadataBuilder task_approval_caption = task_approvalSchema.get("caption");
    MetadataBuilder task_approval_createdBy = task_approvalSchema.get("createdBy");
    MetadataBuilder task_approval_createdOn = task_approvalSchema.get("createdOn");
    MetadataBuilder task_approval_deleted = task_approvalSchema.get("deleted");
    MetadataBuilder task_approval_denyTokens = task_approvalSchema.get("denyTokens");
    MetadataBuilder task_approval_detachedauthorizations = task_approvalSchema.get("detachedauthorizations");
    MetadataBuilder task_approval_dueDate = task_approvalSchema.get("dueDate");
    MetadataBuilder task_approval_errorOnPhysicalDeletion = task_approvalSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder task_approval_estimatedSize = task_approvalSchema.get("estimatedSize");
    MetadataBuilder task_approval_finishedBy = task_approvalSchema.get("finishedBy");
    MetadataBuilder task_approval_finishedOn = task_approvalSchema.get("finishedOn");
    MetadataBuilder task_approval_id = task_approvalSchema.get("id");
    MetadataBuilder task_approval_legacyIdentifier = task_approvalSchema.get("legacyIdentifier");
    MetadataBuilder task_approval_logicallyDeletedOn = task_approvalSchema.get("logicallyDeletedOn");
    MetadataBuilder task_approval_manualTokens = task_approvalSchema.get("manualTokens");
    MetadataBuilder task_approval_markedForParsing = task_approvalSchema.get("markedForParsing");
    MetadataBuilder task_approval_markedForPreviewConversion = task_approvalSchema.get("markedForPreviewConversion");
    MetadataBuilder task_approval_markedForReindexing = task_approvalSchema.get("markedForReindexing");
    MetadataBuilder task_approval_migrationDataVersion = task_approvalSchema.get("migrationDataVersion");
    MetadataBuilder task_approval_modifiedBy = task_approvalSchema.get("modifiedBy");
    MetadataBuilder task_approval_modifiedOn = task_approvalSchema.get("modifiedOn");
    MetadataBuilder task_approval_path = task_approvalSchema.get("path");
    MetadataBuilder task_approval_pathParts = task_approvalSchema.get("pathParts");
    MetadataBuilder task_approval_principalpath = task_approvalSchema.get("principalpath");
    MetadataBuilder task_approval_removedauthorizations = task_approvalSchema.get("removedauthorizations");
    MetadataBuilder task_approval_schema = task_approvalSchema.get("schema");
    MetadataBuilder task_approval_shareDenyTokens = task_approvalSchema.get("shareDenyTokens");
    MetadataBuilder task_approval_shareTokens = task_approvalSchema.get("shareTokens");
    MetadataBuilder task_approval_title = task_approvalSchema.get("title");
    MetadataBuilder task_approval_tokens = task_approvalSchema.get("tokens");
    MetadataBuilder task_approval_tokensHierarchy = task_approvalSchema.get("tokensHierarchy");
    MetadataBuilder task_approval_visibleInTrees = task_approvalSchema.get("visibleInTrees");
    MetadataBuilder task_approval_workflowIdentifier = task_approvalSchema.get("workflowIdentifier");
    MetadataBuilder task_approval_workflowRecordIdentifiers = task_approvalSchema.get("workflowRecordIdentifiers");
  }

  private void createDdvTaskStatusSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvTaskStatusSchemaType, MetadataSchemaBuilder ddvTaskStatusSchema) {
  }

  private void createUserFolderSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userFolderSchemaType, MetadataSchemaBuilder userFolderSchema) {
    MetadataBuilder userFolder_administrativeUnit = userFolderSchema.create("administrativeUnit").setType(MetadataValueType.REFERENCE);
    userFolder_administrativeUnit.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder userFolder_category = userFolderSchema.create("category").setType(MetadataValueType.REFERENCE);
    userFolder_category.defineReferencesTo(types.getSchemaType("category"));
    MetadataBuilder userFolder_parentFolder = userFolderSchema.create("parentFolder").setType(MetadataValueType.REFERENCE);
    userFolder_parentFolder.defineReferencesTo(types.getSchemaType("folder"));
    MetadataBuilder userFolder_retentionRule = userFolderSchema.create("retentionRule").setType(MetadataValueType.REFERENCE);
    userFolder_retentionRule.defineReferencesTo(types.getSchemaType("retentionRule"));
  }

  private void createContainerRecordSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder containerRecordSchemaType, MetadataSchemaBuilder containerRecordSchema) {
    MetadataBuilder containerRecord_administrativeUnits = containerRecordSchema.create("administrativeUnits").setType(MetadataValueType.REFERENCE);
    containerRecord_administrativeUnits.setMultivalue(true);
    containerRecord_administrativeUnits.setDefaultRequirement(true);
    containerRecord_administrativeUnits.setUndeletable(true);
    containerRecord_administrativeUnits.setEssential(true);
    containerRecord_administrativeUnits.defineTaxonomyRelationshipToType(types.getSchemaType("administrativeUnit"));
    MetadataBuilder containerRecord_allReferences = containerRecordSchema.create("allReferences").setType(MetadataValueType.STRING);
    containerRecord_allReferences.setMultivalue(true);
    containerRecord_allReferences.setSystemReserved(true);
    containerRecord_allReferences.setUndeletable(true);
    containerRecord_allReferences.setEssential(true);
    containerRecord_allReferences.setMultiLingual(false);
    MetadataBuilder containerRecord_allRemovedAuths = containerRecordSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    containerRecord_allRemovedAuths.setMultivalue(true);
    containerRecord_allRemovedAuths.setSystemReserved(true);
    containerRecord_allRemovedAuths.setUndeletable(true);
    containerRecord_allRemovedAuths.setEssential(true);
    containerRecord_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder containerRecord_attachedAncestors = containerRecordSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    containerRecord_attachedAncestors.setMultivalue(true);
    containerRecord_attachedAncestors.setSystemReserved(true);
    containerRecord_attachedAncestors.setUndeletable(true);
    containerRecord_attachedAncestors.setEssential(true);
    containerRecord_attachedAncestors.setMultiLingual(false);
    MetadataBuilder containerRecord_autocomplete = containerRecordSchema.create("autocomplete").setType(MetadataValueType.STRING);
    containerRecord_autocomplete.setMultivalue(true);
    containerRecord_autocomplete.setSystemReserved(true);
    containerRecord_autocomplete.setUndeletable(true);
    containerRecord_autocomplete.setEssential(true);
    containerRecord_autocomplete.setMultiLingual(true);
    MetadataBuilder containerRecord_availableSize = containerRecordSchema.create("availableSize").setType(MetadataValueType.NUMBER);
    containerRecord_availableSize.setUndeletable(true);
    MetadataBuilder containerRecord_borrowDate = containerRecordSchema.create("borrowDate").setType(MetadataValueType.DATE);
    containerRecord_borrowDate.setUndeletable(true);
    MetadataBuilder containerRecord_borrowReturnDate = containerRecordSchema.create("borrowReturnDate").setType(MetadataValueType.DATE_TIME);
    containerRecord_borrowReturnDate.setUndeletable(true);
    MetadataBuilder containerRecord_borrowed = containerRecordSchema.create("borrowed").setType(MetadataValueType.BOOLEAN);
    containerRecord_borrowed.setUndeletable(true);
    MetadataBuilder containerRecord_borrower = containerRecordSchema.create("borrower").setType(MetadataValueType.REFERENCE);
    containerRecord_borrower.setUndeletable(true);
    containerRecord_borrower.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder containerRecord_capacity = containerRecordSchema.create("capacity").setType(MetadataValueType.NUMBER);
    containerRecord_capacity.setUndeletable(true);
    MetadataBuilder containerRecord_caption = containerRecordSchema.create("caption").setType(MetadataValueType.STRING);
    containerRecord_caption.setSystemReserved(true);
    containerRecord_caption.setUndeletable(true);
    containerRecord_caption.setEssential(true);
    containerRecord_caption.setMultiLingual(false);
    containerRecord_caption.setSortable(true);
    MetadataBuilder containerRecord_comments = containerRecordSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    containerRecord_comments.setMultivalue(true);
    containerRecord_comments.setUndeletable(true);
    containerRecord_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder containerRecord_completionDate = containerRecordSchema.create("completionDate").setType(MetadataValueType.DATE);
    containerRecord_completionDate.setUndeletable(true);
    MetadataBuilder containerRecord_createdBy = containerRecordSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    containerRecord_createdBy.setSystemReserved(true);
    containerRecord_createdBy.setUndeletable(true);
    containerRecord_createdBy.setEssential(true);
    containerRecord_createdBy.setMultiLingual(false);
    containerRecord_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder containerRecord_createdOn = containerRecordSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    containerRecord_createdOn.setSystemReserved(true);
    containerRecord_createdOn.setUndeletable(true);
    containerRecord_createdOn.setEssential(true);
    containerRecord_createdOn.setMultiLingual(false);
    containerRecord_createdOn.setSortable(true);
    MetadataBuilder containerRecord_decommissioningType = containerRecordSchema.create("decommissioningType").setType(MetadataValueType.ENUM);
    containerRecord_decommissioningType.setDefaultRequirement(true);
    containerRecord_decommissioningType.setUndeletable(true);
    containerRecord_decommissioningType.setEssential(true);
    containerRecord_decommissioningType.defineAsEnum(DecommissioningType.class);
    MetadataBuilder containerRecord_deleted = containerRecordSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    containerRecord_deleted.setSystemReserved(true);
    containerRecord_deleted.setUndeletable(true);
    containerRecord_deleted.setEssential(true);
    containerRecord_deleted.setMultiLingual(false);
    containerRecord_deleted.setEssentialInSummary(true);
    MetadataBuilder containerRecord_denyTokens = containerRecordSchema.create("denyTokens").setType(MetadataValueType.STRING);
    containerRecord_denyTokens.setMultivalue(true);
    containerRecord_denyTokens.setSystemReserved(true);
    containerRecord_denyTokens.setUndeletable(true);
    containerRecord_denyTokens.setEssential(true);
    containerRecord_denyTokens.setMultiLingual(false);
    containerRecord_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder containerRecord_description = containerRecordSchema.create("description").setType(MetadataValueType.STRING);
    containerRecord_description.setUndeletable(true);
    containerRecord_description.setEssentialInSummary(true);
    containerRecord_description.setSearchable(true);
    MetadataBuilder containerRecord_detachedauthorizations = containerRecordSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    containerRecord_detachedauthorizations.setSystemReserved(true);
    containerRecord_detachedauthorizations.setUndeletable(true);
    containerRecord_detachedauthorizations.setEssential(true);
    containerRecord_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder containerRecord_documentResponsible = containerRecordSchema.create("documentResponsible").setType(MetadataValueType.REFERENCE);
    containerRecord_documentResponsible.setSystemReserved(true);
    containerRecord_documentResponsible.setUndeletable(true);
    containerRecord_documentResponsible.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder containerRecord_errorOnPhysicalDeletion = containerRecordSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    containerRecord_errorOnPhysicalDeletion.setSystemReserved(true);
    containerRecord_errorOnPhysicalDeletion.setUndeletable(true);
    containerRecord_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder containerRecord_estimatedSize = containerRecordSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  containerRecord_estimatedSize.setSystemReserved(true);
	  containerRecord_estimatedSize.setUndeletable(true);
	  containerRecord_estimatedSize.setEssential(true);
	  containerRecord_estimatedSize.setMultiLingual(false);
    MetadataBuilder containerRecord_favorites = containerRecordSchema.create("favorites").setType(MetadataValueType.STRING);
    containerRecord_favorites.setMultivalue(true);
    containerRecord_favorites.setDefaultRequirement(true);
    containerRecord_favorites.setSystemReserved(true);
    containerRecord_favorites.setUndeletable(true);
    MetadataBuilder containerRecord_filingSpace = containerRecordSchema.create("filingSpace").setType(MetadataValueType.REFERENCE);
    containerRecord_filingSpace.setUndeletable(true);
    containerRecord_filingSpace.defineReferencesTo(types.getSchemaType("filingSpace"));
    MetadataBuilder containerRecord_fillRatioEntered = containerRecordSchema.create("fillRatioEntered").setType(MetadataValueType.NUMBER);
    containerRecord_fillRatioEntered.setUndeletable(true);
    containerRecord_fillRatioEntered.setEnabled(false);
    MetadataBuilder containerRecord_firstDepositReportDate = containerRecordSchema.create("firstDepositReportDate").setType(MetadataValueType.DATE);
    containerRecord_firstDepositReportDate.setSystemReserved(true);
    containerRecord_firstDepositReportDate.setUndeletable(true);
    MetadataBuilder containerRecord_firstTransferReportDate = containerRecordSchema.create("firstTransferReportDate").setType(MetadataValueType.DATE);
    containerRecord_firstTransferReportDate.setSystemReserved(true);
    containerRecord_firstTransferReportDate.setUndeletable(true);
    MetadataBuilder containerRecord_full = containerRecordSchema.create("full").setType(MetadataValueType.BOOLEAN);
    containerRecord_full.setUndeletable(true);
    containerRecord_full.setEssential(true);
    MetadataBuilder containerRecord_id = containerRecordSchema.create("id").setType(MetadataValueType.STRING);
    containerRecord_id.setDefaultRequirement(true);
    containerRecord_id.setSystemReserved(true);
    containerRecord_id.setUndeletable(true);
    containerRecord_id.setEssential(true);
    containerRecord_id.setMultiLingual(false);
    containerRecord_id.setSearchable(true);
    containerRecord_id.setSortable(true);
    containerRecord_id.setUniqueValue(true);
    containerRecord_id.setUnmodifiable(true);
    MetadataBuilder containerRecord_identifier = containerRecordSchema.create("identifier").setType(MetadataValueType.STRING);
    containerRecord_identifier.setUndeletable(true);
    containerRecord_identifier.setEssential(true);
    containerRecord_identifier.setSearchable(true);
    MetadataBuilder containerRecord_legacyIdentifier = containerRecordSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    containerRecord_legacyIdentifier.setDefaultRequirement(true);
    containerRecord_legacyIdentifier.setSystemReserved(true);
    containerRecord_legacyIdentifier.setUndeletable(true);
    containerRecord_legacyIdentifier.setEssential(true);
    containerRecord_legacyIdentifier.setMultiLingual(false);
    containerRecord_legacyIdentifier.setSearchable(true);
    containerRecord_legacyIdentifier.setUniqueValue(true);
    containerRecord_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder containerRecord_linearSize = containerRecordSchema.create("linearSize").setType(MetadataValueType.NUMBER);
    containerRecord_linearSize.setUndeletable(true);
    MetadataBuilder containerRecord_linearSizeEntered = containerRecordSchema.create("linearSizeEntered").setType(MetadataValueType.NUMBER);
    containerRecord_linearSizeEntered.setUndeletable(true);
    MetadataBuilder containerRecord_linearSizeSum = containerRecordSchema.create("linearSizeSum").setType(MetadataValueType.NUMBER);
    containerRecord_linearSizeSum.setUndeletable(true);
    MetadataBuilder containerRecord_localization = containerRecordSchema.create("localization").setType(MetadataValueType.STRING);
    MetadataBuilder containerRecord_logicallyDeletedOn = containerRecordSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    containerRecord_logicallyDeletedOn.setSystemReserved(true);
    containerRecord_logicallyDeletedOn.setUndeletable(true);
    containerRecord_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder containerRecord_manualTokens = containerRecordSchema.create("manualTokens").setType(MetadataValueType.STRING);
    containerRecord_manualTokens.setMultivalue(true);
    containerRecord_manualTokens.setSystemReserved(true);
    containerRecord_manualTokens.setUndeletable(true);
    containerRecord_manualTokens.setEssential(true);
    containerRecord_manualTokens.setMultiLingual(false);
    containerRecord_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder containerRecord_markedForParsing = containerRecordSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    containerRecord_markedForParsing.setSystemReserved(true);
    containerRecord_markedForParsing.setUndeletable(true);
    containerRecord_markedForParsing.setEssential(true);
    containerRecord_markedForParsing.setMultiLingual(false);
    MetadataBuilder containerRecord_markedForPreviewConversion = containerRecordSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    containerRecord_markedForPreviewConversion.setSystemReserved(true);
    containerRecord_markedForPreviewConversion.setUndeletable(true);
    containerRecord_markedForPreviewConversion.setEssential(true);
    containerRecord_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder containerRecord_markedForReindexing = containerRecordSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    containerRecord_markedForReindexing.setSystemReserved(true);
    containerRecord_markedForReindexing.setUndeletable(true);
    containerRecord_markedForReindexing.setEssential(true);
    containerRecord_markedForReindexing.setMultiLingual(false);
    MetadataBuilder containerRecord_migrationDataVersion = containerRecordSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    containerRecord_migrationDataVersion.setSystemReserved(true);
    containerRecord_migrationDataVersion.setUndeletable(true);
    containerRecord_migrationDataVersion.setEssential(true);
    containerRecord_migrationDataVersion.setMultiLingual(false);
    containerRecord_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder containerRecord_modifiedBy = containerRecordSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    containerRecord_modifiedBy.setSystemReserved(true);
    containerRecord_modifiedBy.setUndeletable(true);
    containerRecord_modifiedBy.setEssential(true);
    containerRecord_modifiedBy.setMultiLingual(false);
    containerRecord_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder containerRecord_modifiedOn = containerRecordSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    containerRecord_modifiedOn.setSystemReserved(true);
    containerRecord_modifiedOn.setUndeletable(true);
    containerRecord_modifiedOn.setEssential(true);
    containerRecord_modifiedOn.setMultiLingual(false);
    containerRecord_modifiedOn.setSortable(true);
    MetadataBuilder containerRecord_path = containerRecordSchema.create("path").setType(MetadataValueType.STRING);
    containerRecord_path.setMultivalue(true);
    containerRecord_path.setSystemReserved(true);
    containerRecord_path.setUndeletable(true);
    containerRecord_path.setEssential(true);
    containerRecord_path.setMultiLingual(false);
    MetadataBuilder containerRecord_pathParts = containerRecordSchema.create("pathParts").setType(MetadataValueType.STRING);
    containerRecord_pathParts.setMultivalue(true);
    containerRecord_pathParts.setSystemReserved(true);
    containerRecord_pathParts.setUndeletable(true);
    containerRecord_pathParts.setEssential(true);
    containerRecord_pathParts.setMultiLingual(false);
    MetadataBuilder containerRecord_planifiedReturnDate = containerRecordSchema.create("planifiedReturnDate").setType(MetadataValueType.DATE);
    containerRecord_planifiedReturnDate.setUndeletable(true);
    MetadataBuilder containerRecord_position = containerRecordSchema.create("position").setType(MetadataValueType.STRING);
    containerRecord_position.setUndeletable(true);
    containerRecord_position.setSearchable(true);
    MetadataBuilder containerRecord_principalpath = containerRecordSchema.create("principalpath").setType(MetadataValueType.STRING);
    containerRecord_principalpath.setSystemReserved(true);
    containerRecord_principalpath.setUndeletable(true);
    containerRecord_principalpath.setEssential(true);
    containerRecord_principalpath.setMultiLingual(false);
    MetadataBuilder containerRecord_realDepositDate = containerRecordSchema.create("realDepositDate").setType(MetadataValueType.DATE);
    containerRecord_realDepositDate.setUndeletable(true);
    MetadataBuilder containerRecord_realReturnDate = containerRecordSchema.create("realReturnDate").setType(MetadataValueType.DATE);
    containerRecord_realReturnDate.setUndeletable(true);
    MetadataBuilder containerRecord_realTransferDate = containerRecordSchema.create("realTransferDate").setType(MetadataValueType.DATE);
    containerRecord_realTransferDate.setUndeletable(true);
    MetadataBuilder containerRecord_removedauthorizations = containerRecordSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    containerRecord_removedauthorizations.setMultivalue(true);
    containerRecord_removedauthorizations.setSystemReserved(true);
    containerRecord_removedauthorizations.setUndeletable(true);
    containerRecord_removedauthorizations.setEssential(true);
    containerRecord_removedauthorizations.setMultiLingual(false);
    MetadataBuilder containerRecord_schema = containerRecordSchema.create("schema").setType(MetadataValueType.STRING);
    containerRecord_schema.setDefaultRequirement(true);
    containerRecord_schema.setSystemReserved(true);
    containerRecord_schema.setUndeletable(true);
    containerRecord_schema.setEssential(true);
    containerRecord_schema.setMultiLingual(false);
    MetadataBuilder containerRecord_shareDenyTokens = containerRecordSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    containerRecord_shareDenyTokens.setMultivalue(true);
    containerRecord_shareDenyTokens.setSystemReserved(true);
    containerRecord_shareDenyTokens.setUndeletable(true);
    containerRecord_shareDenyTokens.setEssential(true);
    containerRecord_shareDenyTokens.setMultiLingual(false);
    containerRecord_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder containerRecord_shareTokens = containerRecordSchema.create("shareTokens").setType(MetadataValueType.STRING);
    containerRecord_shareTokens.setMultivalue(true);
    containerRecord_shareTokens.setSystemReserved(true);
    containerRecord_shareTokens.setUndeletable(true);
    containerRecord_shareTokens.setEssential(true);
    containerRecord_shareTokens.setMultiLingual(false);
    containerRecord_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder containerRecord_storageSpace = containerRecordSchema.create("storageSpace").setType(MetadataValueType.REFERENCE);
    containerRecord_storageSpace.setUndeletable(true);
    containerRecord_storageSpace.setEssential(true);
    containerRecord_storageSpace.defineTaxonomyRelationshipToType(types.getSchemaType("storageSpace"));
    MetadataBuilder containerRecord_temporaryIdentifier = containerRecordSchema.create("temporaryIdentifier").setType(MetadataValueType.STRING);
    containerRecord_temporaryIdentifier.setUndeletable(true);
    containerRecord_temporaryIdentifier.setSearchable(true);
    MetadataBuilder containerRecord_title = containerRecordSchema.create("title").setType(MetadataValueType.STRING);
    containerRecord_title.setDefaultRequirement(true);
    containerRecord_title.setUndeletable(true);
    containerRecord_title.setEssential(true);
    containerRecord_title.setMultiLingual(false);
    containerRecord_title.setSchemaAutocomplete(true);
    containerRecord_title.setSearchable(true);
    MetadataBuilder containerRecord_tokens = containerRecordSchema.create("tokens").setType(MetadataValueType.STRING);
    containerRecord_tokens.setMultivalue(true);
    containerRecord_tokens.setSystemReserved(true);
    containerRecord_tokens.setUndeletable(true);
    containerRecord_tokens.setEssential(true);
    containerRecord_tokens.setMultiLingual(false);
    MetadataBuilder containerRecord_tokensHierarchy = containerRecordSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    containerRecord_tokensHierarchy.setMultivalue(true);
    containerRecord_tokensHierarchy.setSystemReserved(true);
    containerRecord_tokensHierarchy.setUndeletable(true);
    containerRecord_tokensHierarchy.setEssential(true);
    containerRecord_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder containerRecord_type = containerRecordSchema.create("type").setType(MetadataValueType.REFERENCE);
    containerRecord_type.setDefaultRequirement(true);
    containerRecord_type.setUndeletable(true);
    containerRecord_type.setEssential(true);
    containerRecord_type.defineReferencesTo(types.getSchemaType("ddvContainerRecordType"));
    MetadataBuilder containerRecord_visibleInTrees = containerRecordSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    containerRecord_visibleInTrees.setSystemReserved(true);
    containerRecord_visibleInTrees.setUndeletable(true);
    containerRecord_visibleInTrees.setEssential(true);
    containerRecord_visibleInTrees.setMultiLingual(false);
  }

  private void createReportSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder reportSchemaType, MetadataSchemaBuilder reportSchema) {
  }

  private void createCategorySchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder categorySchemaType, MetadataSchemaBuilder categorySchema) {
    MetadataBuilder category_allReferences = categorySchema.create("allReferences").setType(MetadataValueType.STRING);
    category_allReferences.setMultivalue(true);
    category_allReferences.setSystemReserved(true);
    category_allReferences.setUndeletable(true);
    category_allReferences.setEssential(true);
    category_allReferences.setMultiLingual(false);
    MetadataBuilder category_allRemovedAuths = categorySchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    category_allRemovedAuths.setMultivalue(true);
    category_allRemovedAuths.setSystemReserved(true);
    category_allRemovedAuths.setUndeletable(true);
    category_allRemovedAuths.setEssential(true);
    category_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder category_attachedAncestors = categorySchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    category_attachedAncestors.setMultivalue(true);
    category_attachedAncestors.setSystemReserved(true);
    category_attachedAncestors.setUndeletable(true);
    category_attachedAncestors.setEssential(true);
    category_attachedAncestors.setMultiLingual(false);
    MetadataBuilder category_autocomplete = categorySchema.create("autocomplete").setType(MetadataValueType.STRING);
    category_autocomplete.setMultivalue(true);
    category_autocomplete.setSystemReserved(true);
    category_autocomplete.setUndeletable(true);
    category_autocomplete.setEssential(true);
    category_autocomplete.setMultiLingual(true);
    MetadataBuilder category_caption = categorySchema.create("caption").setType(MetadataValueType.STRING);
    category_caption.setSystemReserved(true);
    category_caption.setUndeletable(true);
    category_caption.setEssential(true);
    category_caption.setMultiLingual(false);
    category_caption.setSortable(true);
    MetadataBuilder category_code = categorySchema.create("code").setType(MetadataValueType.STRING);
    category_code.setDefaultRequirement(true);
    category_code.setUndeletable(true);
    category_code.setEssential(true);
    category_code.setSchemaAutocomplete(true);
    category_code.setSearchable(true);
    category_code.setUniqueValue(true);
    MetadataBuilder category_comments = categorySchema.create("comments").setType(MetadataValueType.STRUCTURE);
    category_comments.setMultivalue(true);
    category_comments.setUndeletable(true);
    category_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder category_copyRetentionRulesOnDocumentTypes = categorySchema.create("copyRetentionRulesOnDocumentTypes").setType(MetadataValueType.STRUCTURE);
    category_copyRetentionRulesOnDocumentTypes.setMultivalue(true);
    category_copyRetentionRulesOnDocumentTypes.defineStructureFactory(CopyRetentionRuleInRuleFactory.class);
    MetadataBuilder category_createdBy = categorySchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    category_createdBy.setSystemReserved(true);
    category_createdBy.setUndeletable(true);
    category_createdBy.setEssential(true);
    category_createdBy.setMultiLingual(false);
    category_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder category_createdOn = categorySchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    category_createdOn.setSystemReserved(true);
    category_createdOn.setUndeletable(true);
    category_createdOn.setEssential(true);
    category_createdOn.setMultiLingual(false);
    category_createdOn.setSortable(true);
    MetadataBuilder category_deactivate = categorySchema.create("deactivate").setType(MetadataValueType.BOOLEAN);
    MetadataBuilder category_deleted = categorySchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    category_deleted.setSystemReserved(true);
    category_deleted.setUndeletable(true);
    category_deleted.setEssential(true);
    category_deleted.setMultiLingual(false);
    MetadataBuilder category_denyTokens = categorySchema.create("denyTokens").setType(MetadataValueType.STRING);
    category_denyTokens.setMultivalue(true);
    category_denyTokens.setSystemReserved(true);
    category_denyTokens.setUndeletable(true);
    category_denyTokens.setEssential(true);
    category_denyTokens.setMultiLingual(false);
    category_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder category_description = categorySchema.create("description").setType(MetadataValueType.TEXT);
    category_description.setMultiLingual(true);
    MetadataBuilder category_detachedauthorizations = categorySchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    category_detachedauthorizations.setSystemReserved(true);
    category_detachedauthorizations.setUndeletable(true);
    category_detachedauthorizations.setEssential(true);
    category_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder category_errorOnPhysicalDeletion = categorySchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    category_errorOnPhysicalDeletion.setSystemReserved(true);
    category_errorOnPhysicalDeletion.setUndeletable(true);
    category_errorOnPhysicalDeletion.setMultiLingual(false);
	  MetadataBuilder category_estimatedSize = categorySchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
	  category_estimatedSize.setSystemReserved(true);
	  category_estimatedSize.setUndeletable(true);
	  category_estimatedSize.setEssential(true);
	  category_estimatedSize.setMultiLingual(false);
    MetadataBuilder category_id = categorySchema.create("id").setType(MetadataValueType.STRING);
    category_id.setDefaultRequirement(true);
    category_id.setSystemReserved(true);
    category_id.setUndeletable(true);
    category_id.setEssential(true);
    category_id.setMultiLingual(false);
    category_id.setSearchable(true);
    category_id.setSortable(true);
    category_id.setUniqueValue(true);
    category_id.setUnmodifiable(true);
    MetadataBuilder category_keywords = categorySchema.create("keywords").setType(MetadataValueType.STRING);
    category_keywords.setMultivalue(true);
    category_keywords.setUndeletable(true);
    category_keywords.setMultiLingual(true);
    category_keywords.setSchemaAutocomplete(true);
    category_keywords.setSearchable(true);
    MetadataBuilder category_legacyIdentifier = categorySchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    category_legacyIdentifier.setDefaultRequirement(true);
    category_legacyIdentifier.setSystemReserved(true);
    category_legacyIdentifier.setUndeletable(true);
    category_legacyIdentifier.setEssential(true);
    category_legacyIdentifier.setMultiLingual(false);
    category_legacyIdentifier.setSearchable(true);
    category_legacyIdentifier.setUniqueValue(true);
    category_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder category_level = categorySchema.create("level").setType(MetadataValueType.NUMBER);
    MetadataBuilder category_linkable = categorySchema.create("linkable").setType(MetadataValueType.BOOLEAN);
    category_linkable.setUndeletable(true);
    category_linkable.setEssential(true);
    MetadataBuilder category_logicallyDeletedOn = categorySchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    category_logicallyDeletedOn.setSystemReserved(true);
    category_logicallyDeletedOn.setUndeletable(true);
    category_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder category_manualTokens = categorySchema.create("manualTokens").setType(MetadataValueType.STRING);
    category_manualTokens.setMultivalue(true);
    category_manualTokens.setSystemReserved(true);
    category_manualTokens.setUndeletable(true);
    category_manualTokens.setEssential(true);
    category_manualTokens.setMultiLingual(false);
    category_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder category_markedForParsing = categorySchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    category_markedForParsing.setSystemReserved(true);
    category_markedForParsing.setUndeletable(true);
    category_markedForParsing.setEssential(true);
    category_markedForParsing.setMultiLingual(false);
    MetadataBuilder category_markedForPreviewConversion = categorySchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    category_markedForPreviewConversion.setSystemReserved(true);
    category_markedForPreviewConversion.setUndeletable(true);
    category_markedForPreviewConversion.setEssential(true);
    category_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder category_markedForReindexing = categorySchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    category_markedForReindexing.setSystemReserved(true);
    category_markedForReindexing.setUndeletable(true);
    category_markedForReindexing.setEssential(true);
    category_markedForReindexing.setMultiLingual(false);
    MetadataBuilder category_migrationDataVersion = categorySchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    category_migrationDataVersion.setSystemReserved(true);
    category_migrationDataVersion.setUndeletable(true);
    category_migrationDataVersion.setEssential(true);
    category_migrationDataVersion.setMultiLingual(false);
    category_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder category_modifiedBy = categorySchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    category_modifiedBy.setSystemReserved(true);
    category_modifiedBy.setUndeletable(true);
    category_modifiedBy.setEssential(true);
    category_modifiedBy.setMultiLingual(false);
    category_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder category_modifiedOn = categorySchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    category_modifiedOn.setSystemReserved(true);
    category_modifiedOn.setUndeletable(true);
    category_modifiedOn.setEssential(true);
    category_modifiedOn.setMultiLingual(false);
    category_modifiedOn.setSortable(true);
    MetadataBuilder category_parent = categorySchema.create("parent").setType(MetadataValueType.REFERENCE);
    category_parent.setUndeletable(true);
    category_parent.setEssential(true);
    category_parent.defineChildOfRelationshipToType(types.getSchemaType("category"));
    MetadataBuilder category_path = categorySchema.create("path").setType(MetadataValueType.STRING);
    category_path.setMultivalue(true);
    category_path.setSystemReserved(true);
    category_path.setUndeletable(true);
    category_path.setEssential(true);
    category_path.setMultiLingual(false);
    MetadataBuilder category_pathParts = categorySchema.create("pathParts").setType(MetadataValueType.STRING);
    category_pathParts.setMultivalue(true);
    category_pathParts.setSystemReserved(true);
    category_pathParts.setUndeletable(true);
    category_pathParts.setEssential(true);
    category_pathParts.setMultiLingual(false);
    MetadataBuilder category_principalpath = categorySchema.create("principalpath").setType(MetadataValueType.STRING);
    category_principalpath.setSystemReserved(true);
    category_principalpath.setUndeletable(true);
    category_principalpath.setEssential(true);
    category_principalpath.setMultiLingual(false);
    MetadataBuilder category_removedauthorizations = categorySchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    category_removedauthorizations.setMultivalue(true);
    category_removedauthorizations.setSystemReserved(true);
    category_removedauthorizations.setUndeletable(true);
    category_removedauthorizations.setEssential(true);
    category_removedauthorizations.setMultiLingual(false);
    MetadataBuilder category_retentionRules = categorySchema.create("retentionRules").setType(MetadataValueType.REFERENCE);
    category_retentionRules.setMultivalue(true);
    category_retentionRules.setUndeletable(true);
    category_retentionRules.setEssential(true);
    category_retentionRules.defineReferencesTo(types.getSchemaType("retentionRule"));
    MetadataBuilder category_schema = categorySchema.create("schema").setType(MetadataValueType.STRING);
    category_schema.setDefaultRequirement(true);
    category_schema.setSystemReserved(true);
    category_schema.setUndeletable(true);
    category_schema.setEssential(true);
    category_schema.setMultiLingual(false);
    MetadataBuilder category_shareDenyTokens = categorySchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    category_shareDenyTokens.setMultivalue(true);
    category_shareDenyTokens.setSystemReserved(true);
    category_shareDenyTokens.setUndeletable(true);
    category_shareDenyTokens.setEssential(true);
    category_shareDenyTokens.setMultiLingual(false);
    category_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder category_shareTokens = categorySchema.create("shareTokens").setType(MetadataValueType.STRING);
    category_shareTokens.setMultivalue(true);
    category_shareTokens.setSystemReserved(true);
    category_shareTokens.setUndeletable(true);
    category_shareTokens.setEssential(true);
    category_shareTokens.setMultiLingual(false);
    category_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder category_title = categorySchema.create("title").setType(MetadataValueType.STRING);
    category_title.setDefaultRequirement(true);
    category_title.setUndeletable(true);
    category_title.setEssential(true);
    category_title.setMultiLingual(true);
    category_title.setSchemaAutocomplete(true);
    category_title.setSearchable(true);
    MetadataBuilder category_tokens = categorySchema.create("tokens").setType(MetadataValueType.STRING);
    category_tokens.setMultivalue(true);
    category_tokens.setSystemReserved(true);
    category_tokens.setUndeletable(true);
    category_tokens.setEssential(true);
    category_tokens.setMultiLingual(false);
    MetadataBuilder category_tokensHierarchy = categorySchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    category_tokensHierarchy.setMultivalue(true);
    category_tokensHierarchy.setSystemReserved(true);
    category_tokensHierarchy.setUndeletable(true);
    category_tokensHierarchy.setEssential(true);
    category_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder category_visibleInTrees = categorySchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    category_visibleInTrees.setSystemReserved(true);
    category_visibleInTrees.setUndeletable(true);
    category_visibleInTrees.setEssential(true);
    category_visibleInTrees.setMultiLingual(false);
  }

  private void createSearchEventSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder searchEventSchemaType, MetadataSchemaBuilder searchEventSchema) {
  }

  private void createTemporaryRecordSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder temporaryRecordSchemaType, MetadataSchemaBuilder temporaryRecord_ConsolidatedPdfSchema, MetadataSchemaBuilder temporaryRecord_batchProcessReportSchema, MetadataSchemaBuilder temporaryRecord_exportAuditSchema, MetadataSchemaBuilder temporaryRecord_importAuditSchema, MetadataSchemaBuilder temporaryRecord_scriptReportSchema, MetadataSchemaBuilder temporaryRecord_sipArchiveSchema, MetadataSchemaBuilder temporaryRecord_vaultScanReportSchema, MetadataSchemaBuilder temporaryRecordSchema) {
    MetadataBuilder temporaryRecord_sipArchive_creationDate = temporaryRecord_sipArchiveSchema.create("creationDate").setType(MetadataValueType.DATE_TIME);
    temporaryRecord_sipArchive_creationDate.setUndeletable(true);
    temporaryRecord_sipArchive_creationDate.setEssential(true);
    MetadataBuilder temporaryRecord_sipArchive_name = temporaryRecord_sipArchiveSchema.create("name").setType(MetadataValueType.STRING);
    temporaryRecord_sipArchive_name.setUndeletable(true);
    MetadataBuilder temporaryRecord_sipArchive_user = temporaryRecord_sipArchiveSchema.create("user").setType(MetadataValueType.REFERENCE);
    temporaryRecord_sipArchive_user.setUndeletable(true);
    temporaryRecord_sipArchive_user.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder temporaryRecord_ConsolidatedPdf_allReferences = temporaryRecord_ConsolidatedPdfSchema.get("allReferences");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_allRemovedAuths = temporaryRecord_ConsolidatedPdfSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_attachedAncestors = temporaryRecord_ConsolidatedPdfSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_autocomplete = temporaryRecord_ConsolidatedPdfSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_caption = temporaryRecord_ConsolidatedPdfSchema.get("caption");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_content = temporaryRecord_ConsolidatedPdfSchema.get("content");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_createdBy = temporaryRecord_ConsolidatedPdfSchema.get("createdBy");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_createdOn = temporaryRecord_ConsolidatedPdfSchema.get("createdOn");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_daysBeforeDestruction = temporaryRecord_ConsolidatedPdfSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_deleted = temporaryRecord_ConsolidatedPdfSchema.get("deleted");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_denyTokens = temporaryRecord_ConsolidatedPdfSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_destructionDate = temporaryRecord_ConsolidatedPdfSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_detachedauthorizations = temporaryRecord_ConsolidatedPdfSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_errorOnPhysicalDeletion = temporaryRecord_ConsolidatedPdfSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder temporaryRecord_ConsolidatedPdf_estimatedSize = temporaryRecord_ConsolidatedPdfSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_id = temporaryRecord_ConsolidatedPdfSchema.get("id");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_legacyIdentifier = temporaryRecord_ConsolidatedPdfSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_logicallyDeletedOn = temporaryRecord_ConsolidatedPdfSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_manualTokens = temporaryRecord_ConsolidatedPdfSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_markedForParsing = temporaryRecord_ConsolidatedPdfSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_markedForPreviewConversion = temporaryRecord_ConsolidatedPdfSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_markedForReindexing = temporaryRecord_ConsolidatedPdfSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_migrationDataVersion = temporaryRecord_ConsolidatedPdfSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_modifiedBy = temporaryRecord_ConsolidatedPdfSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_modifiedOn = temporaryRecord_ConsolidatedPdfSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_path = temporaryRecord_ConsolidatedPdfSchema.get("path");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_pathParts = temporaryRecord_ConsolidatedPdfSchema.get("pathParts");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_principalpath = temporaryRecord_ConsolidatedPdfSchema.get("principalpath");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_removedauthorizations = temporaryRecord_ConsolidatedPdfSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_schema = temporaryRecord_ConsolidatedPdfSchema.get("schema");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_shareDenyTokens = temporaryRecord_ConsolidatedPdfSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_shareTokens = temporaryRecord_ConsolidatedPdfSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_title = temporaryRecord_ConsolidatedPdfSchema.get("title");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_tokens = temporaryRecord_ConsolidatedPdfSchema.get("tokens");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_tokensHierarchy = temporaryRecord_ConsolidatedPdfSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_ConsolidatedPdf_visibleInTrees = temporaryRecord_ConsolidatedPdfSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_batchProcessReport_allReferences = temporaryRecord_batchProcessReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_batchProcessReport_allRemovedAuths = temporaryRecord_batchProcessReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_batchProcessReport_attachedAncestors = temporaryRecord_batchProcessReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_batchProcessReport_autocomplete = temporaryRecord_batchProcessReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_batchProcessReport_caption = temporaryRecord_batchProcessReportSchema.get("caption");
    MetadataBuilder temporaryRecord_batchProcessReport_content = temporaryRecord_batchProcessReportSchema.get("content");
    MetadataBuilder temporaryRecord_batchProcessReport_createdBy = temporaryRecord_batchProcessReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_batchProcessReport_createdOn = temporaryRecord_batchProcessReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_batchProcessReport_daysBeforeDestruction = temporaryRecord_batchProcessReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_batchProcessReport_deleted = temporaryRecord_batchProcessReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_batchProcessReport_denyTokens = temporaryRecord_batchProcessReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_destructionDate = temporaryRecord_batchProcessReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_batchProcessReport_detachedauthorizations = temporaryRecord_batchProcessReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_batchProcessReport_errorOnPhysicalDeletion = temporaryRecord_batchProcessReportSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder temporaryRecord_batchProcessReport_estimatedSize = temporaryRecord_batchProcessReportSchema
			  .get("estimatedSize");
    MetadataBuilder temporaryRecord_batchProcessReport_id = temporaryRecord_batchProcessReportSchema.get("id");
    MetadataBuilder temporaryRecord_batchProcessReport_legacyIdentifier = temporaryRecord_batchProcessReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_batchProcessReport_logicallyDeletedOn = temporaryRecord_batchProcessReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_batchProcessReport_manualTokens = temporaryRecord_batchProcessReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForParsing = temporaryRecord_batchProcessReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForPreviewConversion = temporaryRecord_batchProcessReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForReindexing = temporaryRecord_batchProcessReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_batchProcessReport_migrationDataVersion = temporaryRecord_batchProcessReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_batchProcessReport_modifiedBy = temporaryRecord_batchProcessReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_batchProcessReport_modifiedOn = temporaryRecord_batchProcessReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_batchProcessReport_path = temporaryRecord_batchProcessReportSchema.get("path");
    MetadataBuilder temporaryRecord_batchProcessReport_pathParts = temporaryRecord_batchProcessReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_batchProcessReport_principalpath = temporaryRecord_batchProcessReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_batchProcessReport_removedauthorizations = temporaryRecord_batchProcessReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_batchProcessReport_schema = temporaryRecord_batchProcessReportSchema.get("schema");
    MetadataBuilder temporaryRecord_batchProcessReport_shareDenyTokens = temporaryRecord_batchProcessReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_shareTokens = temporaryRecord_batchProcessReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_title = temporaryRecord_batchProcessReportSchema.get("title");
    MetadataBuilder temporaryRecord_batchProcessReport_tokens = temporaryRecord_batchProcessReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_batchProcessReport_tokensHierarchy = temporaryRecord_batchProcessReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_batchProcessReport_visibleInTrees = temporaryRecord_batchProcessReportSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_exportAudit_allReferences = temporaryRecord_exportAuditSchema.get("allReferences");
    MetadataBuilder temporaryRecord_exportAudit_allRemovedAuths = temporaryRecord_exportAuditSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_exportAudit_attachedAncestors = temporaryRecord_exportAuditSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_exportAudit_autocomplete = temporaryRecord_exportAuditSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_exportAudit_caption = temporaryRecord_exportAuditSchema.get("caption");
    MetadataBuilder temporaryRecord_exportAudit_content = temporaryRecord_exportAuditSchema.get("content");
    MetadataBuilder temporaryRecord_exportAudit_createdBy = temporaryRecord_exportAuditSchema.get("createdBy");
    MetadataBuilder temporaryRecord_exportAudit_createdOn = temporaryRecord_exportAuditSchema.get("createdOn");
    MetadataBuilder temporaryRecord_exportAudit_daysBeforeDestruction = temporaryRecord_exportAuditSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_exportAudit_deleted = temporaryRecord_exportAuditSchema.get("deleted");
    MetadataBuilder temporaryRecord_exportAudit_denyTokens = temporaryRecord_exportAuditSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_exportAudit_destructionDate = temporaryRecord_exportAuditSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_exportAudit_detachedauthorizations = temporaryRecord_exportAuditSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_exportAudit_errorOnPhysicalDeletion = temporaryRecord_exportAuditSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder temporaryRecord_exportAudit_estimatedSize = temporaryRecord_exportAuditSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_exportAudit_id = temporaryRecord_exportAuditSchema.get("id");
    MetadataBuilder temporaryRecord_exportAudit_legacyIdentifier = temporaryRecord_exportAuditSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_exportAudit_logicallyDeletedOn = temporaryRecord_exportAuditSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_exportAudit_manualTokens = temporaryRecord_exportAuditSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_exportAudit_markedForParsing = temporaryRecord_exportAuditSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_exportAudit_markedForPreviewConversion = temporaryRecord_exportAuditSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_exportAudit_markedForReindexing = temporaryRecord_exportAuditSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_exportAudit_migrationDataVersion = temporaryRecord_exportAuditSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_exportAudit_modifiedBy = temporaryRecord_exportAuditSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_exportAudit_modifiedOn = temporaryRecord_exportAuditSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_exportAudit_path = temporaryRecord_exportAuditSchema.get("path");
    MetadataBuilder temporaryRecord_exportAudit_pathParts = temporaryRecord_exportAuditSchema.get("pathParts");
    MetadataBuilder temporaryRecord_exportAudit_principalpath = temporaryRecord_exportAuditSchema.get("principalpath");
    MetadataBuilder temporaryRecord_exportAudit_removedauthorizations = temporaryRecord_exportAuditSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_exportAudit_schema = temporaryRecord_exportAuditSchema.get("schema");
    MetadataBuilder temporaryRecord_exportAudit_shareDenyTokens = temporaryRecord_exportAuditSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_exportAudit_shareTokens = temporaryRecord_exportAuditSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_exportAudit_title = temporaryRecord_exportAuditSchema.get("title");
    MetadataBuilder temporaryRecord_exportAudit_tokens = temporaryRecord_exportAuditSchema.get("tokens");
    MetadataBuilder temporaryRecord_exportAudit_tokensHierarchy = temporaryRecord_exportAuditSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_exportAudit_visibleInTrees = temporaryRecord_exportAuditSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_importAudit_allReferences = temporaryRecord_importAuditSchema.get("allReferences");
    MetadataBuilder temporaryRecord_importAudit_allRemovedAuths = temporaryRecord_importAuditSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_importAudit_attachedAncestors = temporaryRecord_importAuditSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_importAudit_autocomplete = temporaryRecord_importAuditSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_importAudit_caption = temporaryRecord_importAuditSchema.get("caption");
    MetadataBuilder temporaryRecord_importAudit_content = temporaryRecord_importAuditSchema.get("content");
    MetadataBuilder temporaryRecord_importAudit_createdBy = temporaryRecord_importAuditSchema.get("createdBy");
    MetadataBuilder temporaryRecord_importAudit_createdOn = temporaryRecord_importAuditSchema.get("createdOn");
    MetadataBuilder temporaryRecord_importAudit_daysBeforeDestruction = temporaryRecord_importAuditSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_importAudit_deleted = temporaryRecord_importAuditSchema.get("deleted");
    MetadataBuilder temporaryRecord_importAudit_denyTokens = temporaryRecord_importAuditSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_importAudit_destructionDate = temporaryRecord_importAuditSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_importAudit_detachedauthorizations = temporaryRecord_importAuditSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_importAudit_errorOnPhysicalDeletion = temporaryRecord_importAuditSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder temporaryRecord_importAudit_estimatedSize = temporaryRecord_importAuditSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_importAudit_id = temporaryRecord_importAuditSchema.get("id");
    MetadataBuilder temporaryRecord_importAudit_legacyIdentifier = temporaryRecord_importAuditSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_importAudit_logicallyDeletedOn = temporaryRecord_importAuditSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_importAudit_manualTokens = temporaryRecord_importAuditSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_importAudit_markedForParsing = temporaryRecord_importAuditSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_importAudit_markedForPreviewConversion = temporaryRecord_importAuditSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_importAudit_markedForReindexing = temporaryRecord_importAuditSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_importAudit_migrationDataVersion = temporaryRecord_importAuditSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_importAudit_modifiedBy = temporaryRecord_importAuditSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_importAudit_modifiedOn = temporaryRecord_importAuditSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_importAudit_path = temporaryRecord_importAuditSchema.get("path");
    MetadataBuilder temporaryRecord_importAudit_pathParts = temporaryRecord_importAuditSchema.get("pathParts");
    MetadataBuilder temporaryRecord_importAudit_principalpath = temporaryRecord_importAuditSchema.get("principalpath");
    MetadataBuilder temporaryRecord_importAudit_removedauthorizations = temporaryRecord_importAuditSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_importAudit_schema = temporaryRecord_importAuditSchema.get("schema");
    MetadataBuilder temporaryRecord_importAudit_shareDenyTokens = temporaryRecord_importAuditSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_importAudit_shareTokens = temporaryRecord_importAuditSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_importAudit_title = temporaryRecord_importAuditSchema.get("title");
    MetadataBuilder temporaryRecord_importAudit_tokens = temporaryRecord_importAuditSchema.get("tokens");
    MetadataBuilder temporaryRecord_importAudit_tokensHierarchy = temporaryRecord_importAuditSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_importAudit_visibleInTrees = temporaryRecord_importAuditSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_scriptReport_allReferences = temporaryRecord_scriptReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_scriptReport_allRemovedAuths = temporaryRecord_scriptReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_scriptReport_attachedAncestors = temporaryRecord_scriptReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_scriptReport_autocomplete = temporaryRecord_scriptReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_scriptReport_caption = temporaryRecord_scriptReportSchema.get("caption");
    MetadataBuilder temporaryRecord_scriptReport_content = temporaryRecord_scriptReportSchema.get("content");
    MetadataBuilder temporaryRecord_scriptReport_createdBy = temporaryRecord_scriptReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_scriptReport_createdOn = temporaryRecord_scriptReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_scriptReport_daysBeforeDestruction = temporaryRecord_scriptReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_scriptReport_deleted = temporaryRecord_scriptReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_scriptReport_denyTokens = temporaryRecord_scriptReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_scriptReport_destructionDate = temporaryRecord_scriptReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_scriptReport_detachedauthorizations = temporaryRecord_scriptReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_scriptReport_errorOnPhysicalDeletion = temporaryRecord_scriptReportSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder temporaryRecord_scriptReport_estimatedSize = temporaryRecord_scriptReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_scriptReport_id = temporaryRecord_scriptReportSchema.get("id");
    MetadataBuilder temporaryRecord_scriptReport_legacyIdentifier = temporaryRecord_scriptReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_scriptReport_logicallyDeletedOn = temporaryRecord_scriptReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_scriptReport_manualTokens = temporaryRecord_scriptReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_scriptReport_markedForParsing = temporaryRecord_scriptReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_scriptReport_markedForPreviewConversion = temporaryRecord_scriptReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_scriptReport_markedForReindexing = temporaryRecord_scriptReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_scriptReport_migrationDataVersion = temporaryRecord_scriptReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_scriptReport_modifiedBy = temporaryRecord_scriptReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_scriptReport_modifiedOn = temporaryRecord_scriptReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_scriptReport_path = temporaryRecord_scriptReportSchema.get("path");
    MetadataBuilder temporaryRecord_scriptReport_pathParts = temporaryRecord_scriptReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_scriptReport_principalpath = temporaryRecord_scriptReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_scriptReport_removedauthorizations = temporaryRecord_scriptReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_scriptReport_schema = temporaryRecord_scriptReportSchema.get("schema");
    MetadataBuilder temporaryRecord_scriptReport_shareDenyTokens = temporaryRecord_scriptReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_scriptReport_shareTokens = temporaryRecord_scriptReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_scriptReport_title = temporaryRecord_scriptReportSchema.get("title");
    MetadataBuilder temporaryRecord_scriptReport_tokens = temporaryRecord_scriptReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_scriptReport_tokensHierarchy = temporaryRecord_scriptReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_scriptReport_visibleInTrees = temporaryRecord_scriptReportSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_sipArchive_allReferences = temporaryRecord_sipArchiveSchema.get("allReferences");
    MetadataBuilder temporaryRecord_sipArchive_allRemovedAuths = temporaryRecord_sipArchiveSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_sipArchive_attachedAncestors = temporaryRecord_sipArchiveSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_sipArchive_autocomplete = temporaryRecord_sipArchiveSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_sipArchive_caption = temporaryRecord_sipArchiveSchema.get("caption");
    MetadataBuilder temporaryRecord_sipArchive_content = temporaryRecord_sipArchiveSchema.get("content");
    MetadataBuilder temporaryRecord_sipArchive_createdBy = temporaryRecord_sipArchiveSchema.get("createdBy");
    MetadataBuilder temporaryRecord_sipArchive_createdOn = temporaryRecord_sipArchiveSchema.get("createdOn");
    MetadataBuilder temporaryRecord_sipArchive_daysBeforeDestruction = temporaryRecord_sipArchiveSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_sipArchive_deleted = temporaryRecord_sipArchiveSchema.get("deleted");
    MetadataBuilder temporaryRecord_sipArchive_denyTokens = temporaryRecord_sipArchiveSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_sipArchive_destructionDate = temporaryRecord_sipArchiveSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_sipArchive_detachedauthorizations = temporaryRecord_sipArchiveSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_sipArchive_errorOnPhysicalDeletion = temporaryRecord_sipArchiveSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder temporaryRecord_sipArchive_estimatedSize = temporaryRecord_sipArchiveSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_sipArchive_id = temporaryRecord_sipArchiveSchema.get("id");
    MetadataBuilder temporaryRecord_sipArchive_legacyIdentifier = temporaryRecord_sipArchiveSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_sipArchive_logicallyDeletedOn = temporaryRecord_sipArchiveSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_sipArchive_manualTokens = temporaryRecord_sipArchiveSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_sipArchive_markedForParsing = temporaryRecord_sipArchiveSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_sipArchive_markedForPreviewConversion = temporaryRecord_sipArchiveSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_sipArchive_markedForReindexing = temporaryRecord_sipArchiveSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_sipArchive_migrationDataVersion = temporaryRecord_sipArchiveSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_sipArchive_modifiedBy = temporaryRecord_sipArchiveSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_sipArchive_modifiedOn = temporaryRecord_sipArchiveSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_sipArchive_path = temporaryRecord_sipArchiveSchema.get("path");
    MetadataBuilder temporaryRecord_sipArchive_pathParts = temporaryRecord_sipArchiveSchema.get("pathParts");
    MetadataBuilder temporaryRecord_sipArchive_principalpath = temporaryRecord_sipArchiveSchema.get("principalpath");
    MetadataBuilder temporaryRecord_sipArchive_removedauthorizations = temporaryRecord_sipArchiveSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_sipArchive_schema = temporaryRecord_sipArchiveSchema.get("schema");
    MetadataBuilder temporaryRecord_sipArchive_shareDenyTokens = temporaryRecord_sipArchiveSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_sipArchive_shareTokens = temporaryRecord_sipArchiveSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_sipArchive_title = temporaryRecord_sipArchiveSchema.get("title");
    MetadataBuilder temporaryRecord_sipArchive_tokens = temporaryRecord_sipArchiveSchema.get("tokens");
    MetadataBuilder temporaryRecord_sipArchive_tokensHierarchy = temporaryRecord_sipArchiveSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_sipArchive_visibleInTrees = temporaryRecord_sipArchiveSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_vaultScanReport_allReferences = temporaryRecord_vaultScanReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_vaultScanReport_allRemovedAuths = temporaryRecord_vaultScanReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_vaultScanReport_attachedAncestors = temporaryRecord_vaultScanReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_vaultScanReport_autocomplete = temporaryRecord_vaultScanReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_vaultScanReport_caption = temporaryRecord_vaultScanReportSchema.get("caption");
    MetadataBuilder temporaryRecord_vaultScanReport_content = temporaryRecord_vaultScanReportSchema.get("content");
    MetadataBuilder temporaryRecord_vaultScanReport_createdBy = temporaryRecord_vaultScanReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_vaultScanReport_createdOn = temporaryRecord_vaultScanReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_vaultScanReport_daysBeforeDestruction = temporaryRecord_vaultScanReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_vaultScanReport_deleted = temporaryRecord_vaultScanReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_vaultScanReport_denyTokens = temporaryRecord_vaultScanReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_destructionDate = temporaryRecord_vaultScanReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_vaultScanReport_detachedauthorizations = temporaryRecord_vaultScanReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_vaultScanReport_errorOnPhysicalDeletion = temporaryRecord_vaultScanReportSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder temporaryRecord_vaultScanReport_estimatedSize = temporaryRecord_vaultScanReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_vaultScanReport_id = temporaryRecord_vaultScanReportSchema.get("id");
    MetadataBuilder temporaryRecord_vaultScanReport_legacyIdentifier = temporaryRecord_vaultScanReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_vaultScanReport_logicallyDeletedOn = temporaryRecord_vaultScanReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_vaultScanReport_manualTokens = temporaryRecord_vaultScanReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForParsing = temporaryRecord_vaultScanReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForPreviewConversion = temporaryRecord_vaultScanReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForReindexing = temporaryRecord_vaultScanReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_vaultScanReport_migrationDataVersion = temporaryRecord_vaultScanReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_vaultScanReport_modifiedBy = temporaryRecord_vaultScanReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_vaultScanReport_modifiedOn = temporaryRecord_vaultScanReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_vaultScanReport_path = temporaryRecord_vaultScanReportSchema.get("path");
    MetadataBuilder temporaryRecord_vaultScanReport_pathParts = temporaryRecord_vaultScanReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_vaultScanReport_principalpath = temporaryRecord_vaultScanReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_vaultScanReport_removedauthorizations = temporaryRecord_vaultScanReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_vaultScanReport_schema = temporaryRecord_vaultScanReportSchema.get("schema");
    MetadataBuilder temporaryRecord_vaultScanReport_shareDenyTokens = temporaryRecord_vaultScanReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_shareTokens = temporaryRecord_vaultScanReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_title = temporaryRecord_vaultScanReportSchema.get("title");
    MetadataBuilder temporaryRecord_vaultScanReport_tokens = temporaryRecord_vaultScanReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_vaultScanReport_tokensHierarchy = temporaryRecord_vaultScanReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_vaultScanReport_visibleInTrees = temporaryRecord_vaultScanReportSchema.get("visibleInTrees");
  }

  private void createUserSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userSchemaType, MetadataSchemaBuilder userSchema) {
    MetadataBuilder user_defaultAdministrativeUnit = userSchema.create("defaultAdministrativeUnit").setType(MetadataValueType.STRING);
    user_defaultAdministrativeUnit.setSystemReserved(true);
    user_defaultAdministrativeUnit.setUndeletable(true);
    MetadataBuilder user_hideNotActive = userSchema.create("hideNotActive").setType(MetadataValueType.BOOLEAN);
    user_hideNotActive.setUndeletable(true);
    user_hideNotActive.setDefaultValue(false);
  }

  private void createFacetSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder facetSchemaType, MetadataSchemaBuilder facet_fieldSchema, MetadataSchemaBuilder facet_querySchema, MetadataSchemaBuilder facetSchema) {
    MetadataBuilder facet_field_active = facet_fieldSchema.get("active");
    MetadataBuilder facet_field_allReferences = facet_fieldSchema.get("allReferences");
    MetadataBuilder facet_field_allRemovedAuths = facet_fieldSchema.get("allRemovedAuths");
    MetadataBuilder facet_field_attachedAncestors = facet_fieldSchema.get("attachedAncestors");
    MetadataBuilder facet_field_autocomplete = facet_fieldSchema.get("autocomplete");
    MetadataBuilder facet_field_caption = facet_fieldSchema.get("caption");
    MetadataBuilder facet_field_createdBy = facet_fieldSchema.get("createdBy");
    MetadataBuilder facet_field_createdOn = facet_fieldSchema.get("createdOn");
    MetadataBuilder facet_field_deleted = facet_fieldSchema.get("deleted");
    MetadataBuilder facet_field_denyTokens = facet_fieldSchema.get("denyTokens");
    MetadataBuilder facet_field_detachedauthorizations = facet_fieldSchema.get("detachedauthorizations");
    MetadataBuilder facet_field_elementPerPage = facet_fieldSchema.get("elementPerPage");
    MetadataBuilder facet_field_errorOnPhysicalDeletion = facet_fieldSchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder facet_field_estimatedSize = facet_fieldSchema.get("estimatedSize");
    MetadataBuilder facet_field_facetType = facet_fieldSchema.get("facetType");
    MetadataBuilder facet_field_fieldDatastoreCode = facet_fieldSchema.get("fieldDatastoreCode");
    MetadataBuilder facet_field_id = facet_fieldSchema.get("id");
    MetadataBuilder facet_field_legacyIdentifier = facet_fieldSchema.get("legacyIdentifier");
    MetadataBuilder facet_field_logicallyDeletedOn = facet_fieldSchema.get("logicallyDeletedOn");
    MetadataBuilder facet_field_manualTokens = facet_fieldSchema.get("manualTokens");
    MetadataBuilder facet_field_markedForParsing = facet_fieldSchema.get("markedForParsing");
    MetadataBuilder facet_field_markedForPreviewConversion = facet_fieldSchema.get("markedForPreviewConversion");
    MetadataBuilder facet_field_markedForReindexing = facet_fieldSchema.get("markedForReindexing");
    MetadataBuilder facet_field_migrationDataVersion = facet_fieldSchema.get("migrationDataVersion");
    MetadataBuilder facet_field_modifiedBy = facet_fieldSchema.get("modifiedBy");
    MetadataBuilder facet_field_modifiedOn = facet_fieldSchema.get("modifiedOn");
    MetadataBuilder facet_field_openByDefault = facet_fieldSchema.get("openByDefault");
    MetadataBuilder facet_field_order = facet_fieldSchema.get("order");
    MetadataBuilder facet_field_orderResult = facet_fieldSchema.get("orderResult");
    MetadataBuilder facet_field_pages = facet_fieldSchema.get("pages");
    MetadataBuilder facet_field_path = facet_fieldSchema.get("path");
    MetadataBuilder facet_field_pathParts = facet_fieldSchema.get("pathParts");
    MetadataBuilder facet_field_principalpath = facet_fieldSchema.get("principalpath");
    MetadataBuilder facet_field_removedauthorizations = facet_fieldSchema.get("removedauthorizations");
    MetadataBuilder facet_field_schema = facet_fieldSchema.get("schema");
    MetadataBuilder facet_field_shareDenyTokens = facet_fieldSchema.get("shareDenyTokens");
    MetadataBuilder facet_field_shareTokens = facet_fieldSchema.get("shareTokens");
    MetadataBuilder facet_field_title = facet_fieldSchema.get("title");
    MetadataBuilder facet_field_tokens = facet_fieldSchema.get("tokens");
    MetadataBuilder facet_field_tokensHierarchy = facet_fieldSchema.get("tokensHierarchy");
    MetadataBuilder facet_field_usedByModule = facet_fieldSchema.get("usedByModule");
    MetadataBuilder facet_field_visibleInTrees = facet_fieldSchema.get("visibleInTrees");
    MetadataBuilder facet_query_active = facet_querySchema.get("active");
    MetadataBuilder facet_query_allReferences = facet_querySchema.get("allReferences");
    MetadataBuilder facet_query_allRemovedAuths = facet_querySchema.get("allRemovedAuths");
    MetadataBuilder facet_query_attachedAncestors = facet_querySchema.get("attachedAncestors");
    MetadataBuilder facet_query_autocomplete = facet_querySchema.get("autocomplete");
    MetadataBuilder facet_query_caption = facet_querySchema.get("caption");
    MetadataBuilder facet_query_createdBy = facet_querySchema.get("createdBy");
    MetadataBuilder facet_query_createdOn = facet_querySchema.get("createdOn");
    MetadataBuilder facet_query_deleted = facet_querySchema.get("deleted");
    MetadataBuilder facet_query_denyTokens = facet_querySchema.get("denyTokens");
    MetadataBuilder facet_query_detachedauthorizations = facet_querySchema.get("detachedauthorizations");
    MetadataBuilder facet_query_elementPerPage = facet_querySchema.get("elementPerPage");
    MetadataBuilder facet_query_errorOnPhysicalDeletion = facet_querySchema.get("errorOnPhysicalDeletion");
	  MetadataBuilder facet_query_estimatedSize = facet_querySchema.get("estimatedSize");
    MetadataBuilder facet_query_facetType = facet_querySchema.get("facetType");
    MetadataBuilder facet_query_fieldDatastoreCode = facet_querySchema.get("fieldDatastoreCode");
    MetadataBuilder facet_query_id = facet_querySchema.get("id");
    MetadataBuilder facet_query_legacyIdentifier = facet_querySchema.get("legacyIdentifier");
    MetadataBuilder facet_query_logicallyDeletedOn = facet_querySchema.get("logicallyDeletedOn");
    MetadataBuilder facet_query_manualTokens = facet_querySchema.get("manualTokens");
    MetadataBuilder facet_query_markedForParsing = facet_querySchema.get("markedForParsing");
    MetadataBuilder facet_query_markedForPreviewConversion = facet_querySchema.get("markedForPreviewConversion");
    MetadataBuilder facet_query_markedForReindexing = facet_querySchema.get("markedForReindexing");
    MetadataBuilder facet_query_migrationDataVersion = facet_querySchema.get("migrationDataVersion");
    MetadataBuilder facet_query_modifiedBy = facet_querySchema.get("modifiedBy");
    MetadataBuilder facet_query_modifiedOn = facet_querySchema.get("modifiedOn");
    MetadataBuilder facet_query_openByDefault = facet_querySchema.get("openByDefault");
    MetadataBuilder facet_query_order = facet_querySchema.get("order");
    MetadataBuilder facet_query_orderResult = facet_querySchema.get("orderResult");
    MetadataBuilder facet_query_pages = facet_querySchema.get("pages");
    MetadataBuilder facet_query_path = facet_querySchema.get("path");
    MetadataBuilder facet_query_pathParts = facet_querySchema.get("pathParts");
    MetadataBuilder facet_query_principalpath = facet_querySchema.get("principalpath");
    MetadataBuilder facet_query_removedauthorizations = facet_querySchema.get("removedauthorizations");
    MetadataBuilder facet_query_schema = facet_querySchema.get("schema");
    MetadataBuilder facet_query_shareDenyTokens = facet_querySchema.get("shareDenyTokens");
    MetadataBuilder facet_query_shareTokens = facet_querySchema.get("shareTokens");
    MetadataBuilder facet_query_title = facet_querySchema.get("title");
    MetadataBuilder facet_query_tokens = facet_querySchema.get("tokens");
    MetadataBuilder facet_query_tokensHierarchy = facet_querySchema.get("tokensHierarchy");
    MetadataBuilder facet_query_usedByModule = facet_querySchema.get("usedByModule");
    MetadataBuilder facet_query_visibleInTrees = facet_querySchema.get("visibleInTrees");
  }

  private void createRetentionRuleSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder retentionRuleSchemaType, MetadataSchemaBuilder retentionRuleSchema) {
    MetadataBuilder retentionRule_administrativeUnits = retentionRuleSchema.create("administrativeUnits").setType(MetadataValueType.REFERENCE);
    retentionRule_administrativeUnits.setMultivalue(true);
    retentionRule_administrativeUnits.setUndeletable(true);
    retentionRule_administrativeUnits.setEssential(true);
    retentionRule_administrativeUnits.defineReferencesTo(types.getSchemaType("administrativeUnit"));
    MetadataBuilder retentionRule_allReferences = retentionRuleSchema.create("allReferences").setType(MetadataValueType.STRING);
    retentionRule_allReferences.setMultivalue(true);
    retentionRule_allReferences.setSystemReserved(true);
    retentionRule_allReferences.setUndeletable(true);
    retentionRule_allReferences.setEssential(true);
    retentionRule_allReferences.setMultiLingual(false);
    MetadataBuilder retentionRule_allRemovedAuths = retentionRuleSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    retentionRule_allRemovedAuths.setMultivalue(true);
    retentionRule_allRemovedAuths.setSystemReserved(true);
    retentionRule_allRemovedAuths.setUndeletable(true);
    retentionRule_allRemovedAuths.setEssential(true);
    retentionRule_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder retentionRule_approvalDate = retentionRuleSchema.create("approvalDate").setType(MetadataValueType.DATE);
    retentionRule_approvalDate.setUndeletable(true);
    retentionRule_approvalDate.setEssential(true);
    MetadataBuilder retentionRule_approved = retentionRuleSchema.create("approved").setType(MetadataValueType.BOOLEAN);
    retentionRule_approved.setUndeletable(true);
    retentionRule_approved.setEssential(true);
    MetadataBuilder retentionRule_attachedAncestors = retentionRuleSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    retentionRule_attachedAncestors.setMultivalue(true);
    retentionRule_attachedAncestors.setSystemReserved(true);
    retentionRule_attachedAncestors.setUndeletable(true);
    retentionRule_attachedAncestors.setEssential(true);
    retentionRule_attachedAncestors.setMultiLingual(false);
    MetadataBuilder retentionRule_autocomplete = retentionRuleSchema.create("autocomplete").setType(MetadataValueType.STRING);
    retentionRule_autocomplete.setMultivalue(true);
    retentionRule_autocomplete.setSystemReserved(true);
    retentionRule_autocomplete.setUndeletable(true);
    retentionRule_autocomplete.setEssential(true);
    retentionRule_autocomplete.setMultiLingual(true);
    MetadataBuilder retentionRule_caption = retentionRuleSchema.create("caption").setType(MetadataValueType.STRING);
    retentionRule_caption.setSystemReserved(true);
    retentionRule_caption.setUndeletable(true);
    retentionRule_caption.setEssential(true);
    retentionRule_caption.setMultiLingual(false);
    retentionRule_caption.setSortable(true);
    MetadataBuilder retentionRule_code = retentionRuleSchema.create("code").setType(MetadataValueType.STRING);
    retentionRule_code.setDefaultRequirement(true);
    retentionRule_code.setUndeletable(true);
    retentionRule_code.setEssential(true);
    retentionRule_code.setSchemaAutocomplete(true);
    retentionRule_code.setSearchable(true);
    retentionRule_code.setUniqueValue(true);
    MetadataBuilder retentionRule_confidentialDocuments = retentionRuleSchema.create("confidentialDocuments").setType(MetadataValueType.BOOLEAN);
    retentionRule_confidentialDocuments.setUndeletable(true);
    MetadataBuilder retentionRule_copyRetentionRules = retentionRuleSchema.create("copyRetentionRules").setType(MetadataValueType.STRUCTURE);
    retentionRule_copyRetentionRules.setMultivalue(true);
    retentionRule_copyRetentionRules.setUndeletable(true);
    retentionRule_copyRetentionRules.setEssential(true);
    retentionRule_copyRetentionRules.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder retentionRule_copyRulesComment = retentionRuleSchema.create("copyRulesComment").setType(MetadataValueType.TEXT);
    retentionRule_copyRulesComment.setMultivalue(true);
    retentionRule_copyRulesComment.setUndeletable(true);
    retentionRule_copyRulesComment.setEssential(true);
    retentionRule_copyRulesComment.setMultiLingual(true);
    MetadataBuilder retentionRule_corpus = retentionRuleSchema.create("corpus").setType(MetadataValueType.STRING);
    retentionRule_corpus.setUndeletable(true);
    MetadataBuilder retentionRule_corpusRuleNumber = retentionRuleSchema.create("corpusRuleNumber").setType(MetadataValueType.TEXT);
    retentionRule_corpusRuleNumber.setUndeletable(true);
    MetadataBuilder retentionRule_createdBy = retentionRuleSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    retentionRule_createdBy.setSystemReserved(true);
    retentionRule_createdBy.setUndeletable(true);
    retentionRule_createdBy.setEssential(true);
    retentionRule_createdBy.setMultiLingual(false);
    retentionRule_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder retentionRule_createdOn = retentionRuleSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    retentionRule_createdOn.setSystemReserved(true);
    retentionRule_createdOn.setUndeletable(true);
    retentionRule_createdOn.setEssential(true);
    retentionRule_createdOn.setMultiLingual(false);
    retentionRule_createdOn.setSortable(true);
    MetadataBuilder retentionRule_deleted = retentionRuleSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    retentionRule_deleted.setSystemReserved(true);
    retentionRule_deleted.setUndeletable(true);
    retentionRule_deleted.setEssential(true);
    retentionRule_deleted.setMultiLingual(false);
    MetadataBuilder retentionRule_denyTokens = retentionRuleSchema.create("denyTokens").setType(MetadataValueType.STRING);
    retentionRule_denyTokens.setMultivalue(true);
    retentionRule_denyTokens.setSystemReserved(true);
    retentionRule_denyTokens.setUndeletable(true);
    retentionRule_denyTokens.setEssential(true);
    retentionRule_denyTokens.setMultiLingual(false);
    retentionRule_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder retentionRule_description = retentionRuleSchema.create("description").setType(MetadataValueType.TEXT);
    retentionRule_description.setUndeletable(true);
    retentionRule_description.setMultiLingual(true);
    retentionRule_description.setEssentialInSummary(true);
    retentionRule_description.setSchemaAutocomplete(true);
    MetadataBuilder retentionRule_detachedauthorizations = retentionRuleSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    retentionRule_detachedauthorizations.setSystemReserved(true);
    retentionRule_detachedauthorizations.setUndeletable(true);
    retentionRule_detachedauthorizations.setEssential(true);
    retentionRule_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder retentionRule_documentCopyRetentionRules = retentionRuleSchema.create("documentCopyRetentionRules").setType(MetadataValueType.STRUCTURE);
    retentionRule_documentCopyRetentionRules.setMultivalue(true);
    retentionRule_documentCopyRetentionRules.setUndeletable(true);
    retentionRule_documentCopyRetentionRules.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder retentionRule_documentTypes = retentionRuleSchema.create("documentTypes").setType(MetadataValueType.REFERENCE);
    retentionRule_documentTypes.setMultivalue(true);
    retentionRule_documentTypes.setUndeletable(true);
    retentionRule_documentTypes.setEssential(true);
    retentionRule_documentTypes.defineReferencesTo(types.getSchemaType("ddvDocumentType"));
    MetadataBuilder retentionRule_documentTypesDetails = retentionRuleSchema.create("documentTypesDetails").setType(MetadataValueType.STRUCTURE);
    retentionRule_documentTypesDetails.setMultivalue(true);
    retentionRule_documentTypesDetails.setUndeletable(true);
    retentionRule_documentTypesDetails.setEssential(true);
    retentionRule_documentTypesDetails.defineStructureFactory(RetentionRuleDocumentTypeFactory.class);
    MetadataBuilder retentionRule_errorOnPhysicalDeletion = retentionRuleSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    retentionRule_errorOnPhysicalDeletion.setSystemReserved(true);
    retentionRule_errorOnPhysicalDeletion.setUndeletable(true);
    retentionRule_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder retentionRule_essentialDocuments = retentionRuleSchema.create("essentialDocuments").setType(MetadataValueType.BOOLEAN);
    retentionRule_essentialDocuments.setUndeletable(true);
	  MetadataBuilder retentionRule_estimatedSize = retentionRuleSchema.create("estimatedSize")
			  .setType(MetadataValueType.INTEGER);
	  retentionRule_estimatedSize.setSystemReserved(true);
	  retentionRule_estimatedSize.setUndeletable(true);
	  retentionRule_estimatedSize.setEssential(true);
	  retentionRule_estimatedSize.setMultiLingual(false);
    MetadataBuilder retentionRule_folderTypes = retentionRuleSchema.create("folderTypes").setType(MetadataValueType.REFERENCE);
    retentionRule_folderTypes.setMultivalue(true);
    retentionRule_folderTypes.defineReferencesTo(types.getSchemaType("ddvFolderType"));
    MetadataBuilder retentionRule_generalComment = retentionRuleSchema.create("generalComment").setType(MetadataValueType.TEXT);
    retentionRule_generalComment.setUndeletable(true);
    retentionRule_generalComment.setMultiLingual(true);
    MetadataBuilder retentionRule_history = retentionRuleSchema.create("history").setType(MetadataValueType.TEXT);
    retentionRule_history.setUndeletable(true);
    MetadataBuilder retentionRule_id = retentionRuleSchema.create("id").setType(MetadataValueType.STRING);
    retentionRule_id.setDefaultRequirement(true);
    retentionRule_id.setSystemReserved(true);
    retentionRule_id.setUndeletable(true);
    retentionRule_id.setEssential(true);
    retentionRule_id.setMultiLingual(false);
    retentionRule_id.setSearchable(true);
    retentionRule_id.setSortable(true);
    retentionRule_id.setUniqueValue(true);
    retentionRule_id.setUnmodifiable(true);
    MetadataBuilder retentionRule_juridicReference = retentionRuleSchema.create("juridicReference").setType(MetadataValueType.TEXT);
    retentionRule_juridicReference.setUndeletable(true);
    retentionRule_juridicReference.setMultiLingual(true);
    MetadataBuilder retentionRule_keywords = retentionRuleSchema.create("keywords").setType(MetadataValueType.STRING);
    retentionRule_keywords.setMultivalue(true);
    retentionRule_keywords.setUndeletable(true);
    retentionRule_keywords.setMultiLingual(true);
    retentionRule_keywords.setSearchable(true);
    MetadataBuilder retentionRule_legacyIdentifier = retentionRuleSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    retentionRule_legacyIdentifier.setDefaultRequirement(true);
    retentionRule_legacyIdentifier.setSystemReserved(true);
    retentionRule_legacyIdentifier.setUndeletable(true);
    retentionRule_legacyIdentifier.setEssential(true);
    retentionRule_legacyIdentifier.setMultiLingual(false);
    retentionRule_legacyIdentifier.setSearchable(true);
    retentionRule_legacyIdentifier.setUniqueValue(true);
    retentionRule_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder retentionRule_logicallyDeletedOn = retentionRuleSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    retentionRule_logicallyDeletedOn.setSystemReserved(true);
    retentionRule_logicallyDeletedOn.setUndeletable(true);
    retentionRule_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder retentionRule_manualTokens = retentionRuleSchema.create("manualTokens").setType(MetadataValueType.STRING);
    retentionRule_manualTokens.setMultivalue(true);
    retentionRule_manualTokens.setSystemReserved(true);
    retentionRule_manualTokens.setUndeletable(true);
    retentionRule_manualTokens.setEssential(true);
    retentionRule_manualTokens.setMultiLingual(false);
    retentionRule_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder retentionRule_markedForParsing = retentionRuleSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    retentionRule_markedForParsing.setSystemReserved(true);
    retentionRule_markedForParsing.setUndeletable(true);
    retentionRule_markedForParsing.setEssential(true);
    retentionRule_markedForParsing.setMultiLingual(false);
    MetadataBuilder retentionRule_markedForPreviewConversion = retentionRuleSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    retentionRule_markedForPreviewConversion.setSystemReserved(true);
    retentionRule_markedForPreviewConversion.setUndeletable(true);
    retentionRule_markedForPreviewConversion.setEssential(true);
    retentionRule_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder retentionRule_markedForReindexing = retentionRuleSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    retentionRule_markedForReindexing.setSystemReserved(true);
    retentionRule_markedForReindexing.setUndeletable(true);
    retentionRule_markedForReindexing.setEssential(true);
    retentionRule_markedForReindexing.setMultiLingual(false);
    MetadataBuilder retentionRule_migrationDataVersion = retentionRuleSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    retentionRule_migrationDataVersion.setSystemReserved(true);
    retentionRule_migrationDataVersion.setUndeletable(true);
    retentionRule_migrationDataVersion.setEssential(true);
    retentionRule_migrationDataVersion.setMultiLingual(false);
    retentionRule_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder retentionRule_modifiedBy = retentionRuleSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    retentionRule_modifiedBy.setSystemReserved(true);
    retentionRule_modifiedBy.setUndeletable(true);
    retentionRule_modifiedBy.setEssential(true);
    retentionRule_modifiedBy.setMultiLingual(false);
    retentionRule_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder retentionRule_modifiedOn = retentionRuleSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    retentionRule_modifiedOn.setSystemReserved(true);
    retentionRule_modifiedOn.setUndeletable(true);
    retentionRule_modifiedOn.setEssential(true);
    retentionRule_modifiedOn.setMultiLingual(false);
    retentionRule_modifiedOn.setSortable(true);
    MetadataBuilder retentionRule_path = retentionRuleSchema.create("path").setType(MetadataValueType.STRING);
    retentionRule_path.setMultivalue(true);
    retentionRule_path.setSystemReserved(true);
    retentionRule_path.setUndeletable(true);
    retentionRule_path.setEssential(true);
    retentionRule_path.setMultiLingual(false);
    MetadataBuilder retentionRule_pathParts = retentionRuleSchema.create("pathParts").setType(MetadataValueType.STRING);
    retentionRule_pathParts.setMultivalue(true);
    retentionRule_pathParts.setSystemReserved(true);
    retentionRule_pathParts.setUndeletable(true);
    retentionRule_pathParts.setEssential(true);
    retentionRule_pathParts.setMultiLingual(false);
    MetadataBuilder retentionRule_principalDefaultDocumentCopyRetentionRule = retentionRuleSchema.create("principalDefaultDocumentCopyRetentionRule").setType(MetadataValueType.STRUCTURE);
    retentionRule_principalDefaultDocumentCopyRetentionRule.setUndeletable(true);
    retentionRule_principalDefaultDocumentCopyRetentionRule.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder retentionRule_principalpath = retentionRuleSchema.create("principalpath").setType(MetadataValueType.STRING);
    retentionRule_principalpath.setSystemReserved(true);
    retentionRule_principalpath.setUndeletable(true);
    retentionRule_principalpath.setEssential(true);
    retentionRule_principalpath.setMultiLingual(false);
    MetadataBuilder retentionRule_removedauthorizations = retentionRuleSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    retentionRule_removedauthorizations.setMultivalue(true);
    retentionRule_removedauthorizations.setSystemReserved(true);
    retentionRule_removedauthorizations.setUndeletable(true);
    retentionRule_removedauthorizations.setEssential(true);
    retentionRule_removedauthorizations.setMultiLingual(false);
    MetadataBuilder retentionRule_responsibleAdministrativeUnits = retentionRuleSchema.create("responsibleAdministrativeUnits").setType(MetadataValueType.BOOLEAN);
    retentionRule_responsibleAdministrativeUnits.setUndeletable(true);
    retentionRule_responsibleAdministrativeUnits.setEssential(true);
    MetadataBuilder retentionRule_schema = retentionRuleSchema.create("schema").setType(MetadataValueType.STRING);
    retentionRule_schema.setDefaultRequirement(true);
    retentionRule_schema.setSystemReserved(true);
    retentionRule_schema.setUndeletable(true);
    retentionRule_schema.setEssential(true);
    retentionRule_schema.setMultiLingual(false);
    MetadataBuilder retentionRule_scope = retentionRuleSchema.create("scope").setType(MetadataValueType.ENUM);
    retentionRule_scope.setUndeletable(true);
    retentionRule_scope.defineAsEnum(RetentionRuleScope.class);
    MetadataBuilder retentionRule_secondaryDefaultDocumentCopyRetentionRule = retentionRuleSchema.create("secondaryDefaultDocumentCopyRetentionRule").setType(MetadataValueType.STRUCTURE);
    retentionRule_secondaryDefaultDocumentCopyRetentionRule.setUndeletable(true);
    retentionRule_secondaryDefaultDocumentCopyRetentionRule.defineStructureFactory(CopyRetentionRuleFactory.class);
    MetadataBuilder retentionRule_shareDenyTokens = retentionRuleSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    retentionRule_shareDenyTokens.setMultivalue(true);
    retentionRule_shareDenyTokens.setSystemReserved(true);
    retentionRule_shareDenyTokens.setUndeletable(true);
    retentionRule_shareDenyTokens.setEssential(true);
    retentionRule_shareDenyTokens.setMultiLingual(false);
    retentionRule_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder retentionRule_shareTokens = retentionRuleSchema.create("shareTokens").setType(MetadataValueType.STRING);
    retentionRule_shareTokens.setMultivalue(true);
    retentionRule_shareTokens.setSystemReserved(true);
    retentionRule_shareTokens.setUndeletable(true);
    retentionRule_shareTokens.setEssential(true);
    retentionRule_shareTokens.setMultiLingual(false);
    retentionRule_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder retentionRule_title = retentionRuleSchema.create("title").setType(MetadataValueType.STRING);
    retentionRule_title.setDefaultRequirement(true);
    retentionRule_title.setUndeletable(true);
    retentionRule_title.setEssential(true);
    retentionRule_title.setMultiLingual(true);
    retentionRule_title.setSchemaAutocomplete(true);
    retentionRule_title.setSearchable(true);
    MetadataBuilder retentionRule_tokens = retentionRuleSchema.create("tokens").setType(MetadataValueType.STRING);
    retentionRule_tokens.setMultivalue(true);
    retentionRule_tokens.setSystemReserved(true);
    retentionRule_tokens.setUndeletable(true);
    retentionRule_tokens.setEssential(true);
    retentionRule_tokens.setMultiLingual(false);
    MetadataBuilder retentionRule_tokensHierarchy = retentionRuleSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    retentionRule_tokensHierarchy.setMultivalue(true);
    retentionRule_tokensHierarchy.setSystemReserved(true);
    retentionRule_tokensHierarchy.setUndeletable(true);
    retentionRule_tokensHierarchy.setEssential(true);
    retentionRule_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder retentionRule_visibleInTrees = retentionRuleSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    retentionRule_visibleInTrees.setSystemReserved(true);
    retentionRule_visibleInTrees.setUndeletable(true);
    retentionRule_visibleInTrees.setEssential(true);
    retentionRule_visibleInTrees.setMultiLingual(false);
    MetadataBuilder retentionRule_yearTypes = retentionRuleSchema.create("yearTypes").setType(MetadataValueType.REFERENCE);
    retentionRule_yearTypes.setMultivalue(true);
    retentionRule_yearTypes.defineReferencesTo(types.getSchemaType("ddvYearType"));
    MetadataBuilder retentionRule_yearTypesYearEnd = retentionRuleSchema.create("yearTypesYearEnd").setType(MetadataValueType.STRING);
    retentionRule_yearTypesYearEnd.setMultivalue(true);
  }

  public void applySchemasDisplay(SchemasDisplayManager manager) {
    SchemaTypesDisplayTransactionBuilder transaction = manager.newTransactionBuilderFor(collection);
    SchemaTypesDisplayConfig typesConfig = manager.getTypes(collection);
    transaction.setModifiedCollectionTypes(manager.getTypes(collection).withFacetMetadataCodes(asList("folder_default_schema", "folder_default_archivisticStatus", "folder_default_category", "folder_default_administrativeUnit", "folder_default_filingSpace", "folder_default_mediumTypes", "folder_default_copyStatus")));
    transaction.add(manager.getType(collection, "administrativeUnit").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "administrativeUnit_default").withFormMetadataCodes(asList("administrativeUnit_default_code", "administrativeUnit_default_title", "administrativeUnit_default_parent", "administrativeUnit_default_decommissioningMonth", "administrativeUnit_default_adress", "administrativeUnit_default_description")).withDisplayMetadataCodes(asList("administrativeUnit_default_code", "administrativeUnit_default_title", "administrativeUnit_default_parent", "administrativeUnit_default_createdOn", "administrativeUnit_default_modifiedBy", "administrativeUnit_default_createdBy", "administrativeUnit_default_decommissioningMonth")).withSearchResultsMetadataCodes(asList("administrativeUnit_default_title", "administrativeUnit_default_modifiedOn")).withTableMetadataCodes(asList("administrativeUnit_default_title", "administrativeUnit_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "administrativeUnit_default_adress").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "administrativeUnit_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "administrativeUnit_default_description").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "administrativeUnit_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "administrativeUnit_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "administrativeUnit_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "administrativeUnit_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "bagInfo_default").withFormMetadataCodes(asList("bagInfo_default_title", "bagInfo_default_archiveTitle", "bagInfo_default_identificationOrganismeVerseurOuDonateur", "bagInfo_default_IdOrganismeVerseurOuDonateur", "bagInfo_default_regionAdministrative", "bagInfo_default_identificationResponsable", "bagInfo_default_numeroTelephoneResponsable", "bagInfo_default_courrielResponsable", "bagInfo_default_entiteResponsable", "bagInfo_default_categoryDocument", "bagInfo_default_encodage", "bagInfo_default_methodTransfere", "bagInfo_default_descriptionSommaire", "bagInfo_default_restrictionAccessibilite", "bagInfo_default_note")).withDisplayMetadataCodes(asList("bagInfo_default_title", "bagInfo_default_createdBy", "bagInfo_default_createdOn", "bagInfo_default_modifiedBy", "bagInfo_default_modifiedOn", "bagInfo_default_IdOrganismeVerseurOuDonateur", "bagInfo_default_address", "bagInfo_default_archiveTitle", "bagInfo_default_categoryDocument", "bagInfo_default_courrielResponsable", "bagInfo_default_encodage", "bagInfo_default_entiteResponsable", "bagInfo_default_identificationOrganismeVerseurOuDonateur", "bagInfo_default_identificationResponsable", "bagInfo_default_methodTransfere", "bagInfo_default_numeroTelephoneResponsable", "bagInfo_default_regionAdministrative", "bagInfo_default_restrictionAccessibilite", "bagInfo_default_descriptionSommaire", "bagInfo_default_note")).withSearchResultsMetadataCodes(asList("bagInfo_default_title", "bagInfo_default_modifiedOn")).withTableMetadataCodes(asList("bagInfo_default_title", "bagInfo_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "bagInfo_default_descriptionSommaire").withMetadataGroup("").withInputType(MetadataInputType.RICHTEXT).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "bagInfo_default_note").withMetadataGroup("").withInputType(MetadataInputType.RICHTEXT).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "bagInfo_default_restrictionAccessibilite").withMetadataGroup("").withInputType(MetadataInputType.RICHTEXT).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "cart_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "cart_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "cart_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "cart_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "category").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "category_default").withFormMetadataCodes(asList("category_default_code", "category_default_title", "category_default_description", "category_default_keywords", "category_default_parent", "category_default_retentionRules", "category_default_deactivate")).withDisplayMetadataCodes(asList("category_default_code", "category_default_title", "category_default_description", "category_default_createdOn", "category_default_modifiedBy", "category_default_createdBy", "category_default_keywords", "category_default_parent", "category_default_retentionRules", "category_default_comments", "category_default_deactivate")).withSearchResultsMetadataCodes(asList("category_default_title", "category_default_modifiedOn")).withTableMetadataCodes(asList("category_default_title", "category_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "category_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "category_default_description").withMetadataGroup("").withInputType(MetadataInputType.RICHTEXT).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "category_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "category_default_keywords").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "category_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "category_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "category_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "collection").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getType(collection, "containerRecord").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "containerRecord_default").withFormMetadataCodes(asList("containerRecord_default_type", "containerRecord_default_temporaryIdentifier", "containerRecord_default_identifier", "containerRecord_default_decommissioningType", "containerRecord_default_storageSpace", "containerRecord_default_full", "containerRecord_default_description", "containerRecord_default_position", "containerRecord_default_capacity", "containerRecord_default_administrativeUnits")).withDisplayMetadataCodes(asList("containerRecord_default_type", "containerRecord_default_temporaryIdentifier", "containerRecord_default_identifier", "containerRecord_default_full", "containerRecord_default_description", "containerRecord_default_administrativeUnits", "containerRecord_default_storageSpace", "containerRecord_default_capacity")).withSearchResultsMetadataCodes(asList("containerRecord_default_title", "containerRecord_default_modifiedOn")).withTableMetadataCodes(asList("containerRecord_default_title", "containerRecord_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_administrativeUnits").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_availableSize").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_borrowDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_borrowed").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_borrower").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_completionDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_decommissioningType").withMetadataGroup("").withInputType(MetadataInputType.DROPDOWN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_description").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_filingSpace").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_full").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_identifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_planifiedReturnDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_position").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_realDepositDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_realReturnDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_realTransferDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_storageSpace").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_temporaryIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "containerRecord_default_type").withMetadataGroup("").withInputType(MetadataInputType.DROPDOWN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getType(collection, "ddvContainerRecordType").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "ddvContainerRecordType_default").withFormMetadataCodes(asList("ddvContainerRecordType_default_title", "ddvContainerRecordType_default_code", "ddvContainerRecordType_default_description", "ddvContainerRecordType_default_linkedSchema")).withDisplayMetadataCodes(asList("ddvContainerRecordType_default_title", "ddvContainerRecordType_default_code", "ddvContainerRecordType_default_description", "ddvContainerRecordType_default_linkedSchema")).withSearchResultsMetadataCodes(asList("ddvContainerRecordType_default_title", "ddvContainerRecordType_default_modifiedOn")).withTableMetadataCodes(asList("ddvContainerRecordType_default_title", "ddvContainerRecordType_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "ddvContainerRecordType_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvContainerRecordType_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvContainerRecordType_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvContainerRecordType_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvContainerRecordType_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "ddvContainerRecordType_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "ddvDocumentType").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "ddvDocumentType_default").withFormMetadataCodes(asList("ddvDocumentType_default_title", "ddvDocumentType_default_code", "ddvDocumentType_default_description", "ddvDocumentType_default_linkedSchema", "ddvDocumentType_default_templates")).withDisplayMetadataCodes(asList("ddvDocumentType_default_title", "ddvDocumentType_default_code", "ddvDocumentType_default_description", "ddvDocumentType_default_linkedSchema", "ddvDocumentType_default_templates")).withSearchResultsMetadataCodes(asList("ddvDocumentType_default_title", "ddvDocumentType_default_modifiedOn")).withTableMetadataCodes(asList("ddvDocumentType_default_title", "ddvDocumentType_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "ddvDocumentType_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvDocumentType_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvDocumentType_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvDocumentType_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvDocumentType_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "ddvDocumentType_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "ddvFolderType").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "ddvFolderType_default").withFormMetadataCodes(asList("ddvFolderType_default_title", "ddvFolderType_default_code", "ddvFolderType_default_description", "ddvFolderType_default_linkedSchema")).withDisplayMetadataCodes(asList("ddvFolderType_default_title", "ddvFolderType_default_code", "ddvFolderType_default_description", "ddvFolderType_default_linkedSchema")).withSearchResultsMetadataCodes(asList("ddvFolderType_default_title", "ddvFolderType_default_modifiedOn")).withTableMetadataCodes(asList("ddvFolderType_default_title", "ddvFolderType_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "ddvFolderType_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvFolderType_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvFolderType_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvFolderType_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvFolderType_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "ddvFolderType_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "ddvMediumType").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "ddvMediumType_default").withFormMetadataCodes(asList("ddvMediumType_default_title", "ddvMediumType_default_code", "ddvMediumType_default_description", "ddvMediumType_default_analogical", "ddvMediumType_default_activatedOnContent")).withDisplayMetadataCodes(asList("ddvMediumType_default_title", "ddvMediumType_default_code", "ddvMediumType_default_description", "ddvMediumType_default_analogical")).withSearchResultsMetadataCodes(asList("ddvMediumType_default_title", "ddvMediumType_default_modifiedOn")).withTableMetadataCodes(asList("ddvMediumType_default_title", "ddvMediumType_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "ddvMediumType_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvMediumType_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvMediumType_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvMediumType_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvMediumType_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "ddvMediumType_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "ddvStorageSpaceType").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "ddvStorageSpaceType_default").withFormMetadataCodes(asList("ddvStorageSpaceType_default_title", "ddvStorageSpaceType_default_code", "ddvStorageSpaceType_default_description", "ddvStorageSpaceType_default_linkedSchema")).withDisplayMetadataCodes(asList("ddvStorageSpaceType_default_title", "ddvStorageSpaceType_default_code", "ddvStorageSpaceType_default_description", "ddvStorageSpaceType_default_linkedSchema")).withSearchResultsMetadataCodes(asList("ddvStorageSpaceType_default_title", "ddvStorageSpaceType_default_modifiedOn")).withTableMetadataCodes(asList("ddvStorageSpaceType_default_title", "ddvStorageSpaceType_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "ddvStorageSpaceType_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvStorageSpaceType_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvStorageSpaceType_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvStorageSpaceType_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvStorageSpaceType_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "ddvStorageSpaceType_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "ddvVariablePeriod_default").withFormMetadataCodes(asList("ddvVariablePeriod_default_code", "ddvVariablePeriod_default_title", "ddvVariablePeriod_default_description")).withDisplayMetadataCodes(asList("ddvVariablePeriod_default_code", "ddvVariablePeriod_default_title", "ddvVariablePeriod_default_createdBy", "ddvVariablePeriod_default_createdOn", "ddvVariablePeriod_default_modifiedBy", "ddvVariablePeriod_default_modifiedOn", "ddvVariablePeriod_default_description", "ddvVariablePeriod_default_comments")).withSearchResultsMetadataCodes(asList("ddvVariablePeriod_default_code", "ddvVariablePeriod_default_title", "ddvVariablePeriod_default_modifiedOn")).withTableMetadataCodes(asList("ddvVariablePeriod_default_code", "ddvVariablePeriod_default_title", "ddvVariablePeriod_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "ddvVariablePeriod_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvVariablePeriod_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvVariablePeriod_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvVariablePeriod_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvVariablePeriod_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "ddvVariablePeriod_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvYearType_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvYearType_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvYearType_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvYearType_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "ddvYearType_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "ddvYearType_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "decommissioningList").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "decommissioningList_default").withFormMetadataCodes(asList("decommissioningList_default_title", "decommissioningList_default_description", "decommissioningList_default_administrativeUnit", "decommissioningList_default_approvalRequest", "decommissioningList_default_approvalUser", "decommissioningList_default_filingSpace", "decommissioningList_default_processingUser", "decommissioningList_default_approvalDate", "decommissioningList_default_approvalRequestDate", "decommissioningList_default_processingDate", "decommissioningList_default_containerDetails", "decommissioningList_default_folderDetails")).withDisplayMetadataCodes(asList("decommissioningList_default_title", "decommissioningList_default_type", "decommissioningList_default_description", "decommissioningList_default_administrativeUnit", "decommissioningList_default_filingSpace", "decommissioningList_default_createdOn", "decommissioningList_default_createdBy", "decommissioningList_default_modifiedOn", "decommissioningList_default_modifiedBy", "decommissioningList_default_uniformCategory", "decommissioningList_default_uniformRule", "decommissioningList_default_status", "decommissioningList_default_approvalDate", "decommissioningList_default_approvalUser")).withSearchResultsMetadataCodes(asList("decommissioningList_default_title", "decommissioningList_default_modifiedOn")).withTableMetadataCodes(asList("decommissioningList_default_title", "decommissioningList_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_administrativeUnit").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_approvalDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_approvalRequest").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_approvalRequestDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_approvalUser").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_containerDetails").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_filingSpace").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_folderDetails").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_processingDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_processingUser").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_type").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_validationDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "decommissioningList_default_validationUser").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "document").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel", "classifiedInGroupLabel"))));
    transaction.add(manager.getSchema(collection, "document_email").withFormMetadataCodes(asList("document_email_folder", "document_email_type", "document_email_title", "document_email_mainCopyRuleIdEntered", "document_email_content", "document_email_keywords", "document_email_emailTo", "document_email_emailFrom", "document_email_emailInNameOf", "document_email_emailCCTo", "document_email_emailBCCTo", "document_email_emailObject", "document_email_emailAttachmentsList", "document_email_emailSentOn", "document_email_emailReceivedOn", "document_email_company", "document_email_subjectToBroadcastRule", "document_email_author", "document_email_description", "document_email_subject", "document_email_emailCompany")).withDisplayMetadataCodes(asList("document_email_title", "document_email_content", "document_email_type", "document_email_folder", "document_email_keywords", "document_email_emailTo", "document_email_emailFrom", "document_email_emailInNameOf", "document_email_emailCCTo", "document_email_emailBCCTo", "document_email_emailObject", "document_email_emailAttachmentsList", "document_email_emailSentOn", "document_email_emailReceivedOn", "document_email_company", "document_email_subjectToBroadcastRule", "document_email_author", "document_email_formCreatedBy", "document_email_formCreatedOn", "document_email_formModifiedBy", "document_email_formModifiedOn", "document_email_copyStatus", "document_email_archivisticStatus", "document_email_category", "document_email_retentionRule", "document_email_mainCopyRule", "document_email_actualTransferDate", "document_email_expectedTransferDate", "document_email_actualDepositDate", "document_email_actualDestructionDate", "document_email_expectedDepositDate", "document_email_expectedDestructionDate", "document_email_comments")).withSearchResultsMetadataCodes(asList("document_email_title", "document_email_modifiedOn")).withTableMetadataCodes(new ArrayList<String>()));
    transaction.add(manager.getMetadata(collection, "document_email_content").withMetadataGroup("").withInputType(MetadataInputType.CONTENT).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "document_email_description").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailAttachmentsList").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailBCCTo").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailCCTo").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailCompany").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailFrom").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailInNameOf").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailObject").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailReceivedOn").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailSentOn").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_emailTo").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_keywords").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "document_email_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_subject").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "document_email_subjectToBroadcastRule").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_email_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getSchema(collection, "document_default").withFormMetadataCodes(asList("document_default_folder", "document_default_type", "document_default_title", "document_default_mainCopyRuleIdEntered", "document_default_keywords", "document_default_content", "document_default_description", "document_default_author", "document_default_company", "document_default_subject")).withDisplayMetadataCodes(asList("document_default_title", "document_default_content", "document_default_folder", "document_default_type", "document_default_keywords", "document_default_description", "document_default_author", "document_default_company", "document_default_subject", "document_default_formCreatedBy", "document_default_formCreatedOn", "document_default_formModifiedBy", "document_default_formModifiedOn", "document_default_copyStatus", "document_default_archivisticStatus", "document_default_category", "document_default_retentionRule", "document_default_mainCopyRule", "document_default_actualTransferDate", "document_default_expectedTransferDate", "document_default_actualDepositDate", "document_default_actualDestructionDate", "document_default_expectedDepositDate", "document_default_expectedDestructionDate", "document_default_comments")).withSearchResultsMetadataCodes(asList("document_default_title", "document_default_modifiedOn")).withTableMetadataCodes(asList("document_default_title", "document_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "document_default_actualDepositDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_actualDestructionDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_actualTransferDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_administrativeUnit").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_archivisticStatus").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_author").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_borrowed").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_category").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_closingDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_company").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_content").withMetadataGroup("").withInputType(MetadataInputType.CONTENT).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "document_default_description").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_expectedDepositDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_expectedDestructionDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_expectedTransferDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_filingSpace").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_folder").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_formCreatedBy").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "document_default_formCreatedOn").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_formModifiedOn").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_keywords").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "document_default_openingDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_retentionRule").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_subject").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "document_default_type").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getType(collection, "event").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "event_default").withFormMetadataCodes(asList("event_default_title", "event_default_type", "event_default_delta", "event_default_eventPrincipalPath", "event_default_ip", "event_default_permissionDateRange", "event_default_permissionRoles", "event_default_permissionUsers", "event_default_reason", "event_default_recordVersion", "event_default_userRoles", "event_default_username", "event_default_negative")).withDisplayMetadataCodes(asList("event_default_title", "event_default_type", "event_default_createdBy", "event_default_createdOn", "event_default_modifiedBy", "event_default_modifiedOn", "event_default_delta", "event_default_eventPrincipalPath", "event_default_ip", "event_default_negative", "event_default_permissionDateRange", "event_default_permissionRoles", "event_default_permissionUsers", "event_default_reason", "event_default_recordIdentifier", "event_default_recordVersion", "event_default_userRoles", "event_default_username")).withSearchResultsMetadataCodes(asList("event_default_title", "event_default_modifiedOn")).withTableMetadataCodes(asList("event_default_recordIdentifier", "event_default_title", "event_default_modifiedOn", "event_default_receiverName", "event_default_task", "event_default_description")));
    transaction.add(manager.getType(collection, "filingSpace").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "filingSpace_default").withFormMetadataCodes(asList("filingSpace_default_code", "filingSpace_default_title", "filingSpace_default_administrators", "filingSpace_default_users", "filingSpace_default_description")).withDisplayMetadataCodes(asList("filingSpace_default_code", "filingSpace_default_title", "filingSpace_default_description", "filingSpace_default_users", "filingSpace_default_administrators")).withSearchResultsMetadataCodes(asList("filingSpace_default_title", "filingSpace_default_modifiedOn")).withTableMetadataCodes(asList("filingSpace_default_title", "filingSpace_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "filingSpace_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "filingSpace_default_description").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "filingSpace_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "filingSpace_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "filingSpace_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "filingSpace_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "folder").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel", "classifiedInGroupLabel"))));
    transaction.add(manager.getSchema(collection, "folder_default").withFormMetadataCodes(asList("folder_default_type", "folder_default_title", "folder_default_parentFolder", "folder_default_categoryEntered", "folder_default_uniformSubdivisionEntered", "folder_default_retentionRuleEntered", "folder_default_copyStatusEntered", "folder_default_mainCopyRuleIdEntered", "folder_default_openingDate", "folder_default_enteredClosingDate", "folder_default_administrativeUnitEntered", "folder_default_mediumTypes", "folder_default_keywords", "folder_default_description", "folder_default_container", "folder_default_actualTransferDate", "folder_default_actualDepositDate", "folder_default_actualDestructionDate", "folder_default_borrowPreviewReturnDate", "folder_default_linearSize")).withDisplayMetadataCodes(asList("folder_default_parentFolder", "folder_default_title", "folder_default_description", "folder_default_filingSpace", "folder_default_administrativeUnit", "folder_default_mediumTypes", "folder_default_copyStatus", "folder_default_archivisticStatus", "folder_default_container", "folder_default_category", "folder_default_uniformSubdivision", "folder_default_retentionRule", "folder_default_confidential", "folder_default_essential", "folder_default_mainCopyRule", "folder_default_keywords", "folder_default_openingDate", "folder_default_closingDate", "folder_default_actualTransferDate", "folder_default_expectedTransferDate", "folder_default_actualDepositDate", "folder_default_expectedDepositDate", "folder_default_actualDestructionDate", "folder_default_expectedDestructionDate", "folder_default_borrowed", "folder_default_borrowDate", "folder_default_borrowUserEntered", "folder_default_borrowPreviewReturnDate", "folder_default_borrowingType", "folder_default_linearSize", "folder_default_formCreatedBy", "folder_default_formCreatedOn", "folder_default_formModifiedBy", "folder_default_formModifiedOn", "folder_default_reactivationDates", "folder_default_reactivationUsers", "folder_default_previousTransferDates", "folder_default_previousDepositDates", "folder_default_comments")).withSearchResultsMetadataCodes(asList("folder_default_title", "folder_default_modifiedOn")).withTableMetadataCodes(asList("folder_default_title", "folder_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "folder_default_activeRetentionType").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_actualDepositDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_actualDestructionDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_actualTransferDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_administrativeUnit").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_archivisticStatus").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_borrowDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_borrowPreviewReturnDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_borrowReturnDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_borrowUser").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_borrowed").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_category").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_categoryCode").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_closingDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_container").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_copyRulesExpectedDepositDates").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_copyRulesExpectedDestructionDates").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_copyRulesExpectedTransferDates").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_copyStatus").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_expectedDepositDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_expectedDestructionDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_expectedTransferDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_filingSpace").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_filingSpaceCode").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_formCreatedBy").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "folder_default_formCreatedOn").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_formModifiedOn").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_inactiveDisposalType").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_keywords").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "folder_default_mainCopyRuleCode").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_manualDisposalType").withMetadataGroup("").withInputType(MetadataInputType.DROPDOWN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "folder_default_mediaType").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_mediumTypes").withMetadataGroup("").withInputType(MetadataInputType.CHECKBOXES).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_openingDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_parentFolder").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_retentionRule").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_ruleAdminUnit").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_semiactiveRetentionType").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_type").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "folder_default_uniformSubdivision").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getType(collection, "group").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getMetadata(collection, "printable_label_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "printable_label_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "printable_label_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "printable_label_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "printable_report").withFormMetadataCodes(asList("printable_report_title", "printable_report_jasperfile", "printable_report_recordType", "printable_report_recordSchema")).withDisplayMetadataCodes(asList("printable_report_title", "printable_report_createdBy", "printable_report_createdOn", "printable_report_modifiedBy", "printable_report_modifiedOn", "printable_report_jasperfile", "printable_report_recordSchema", "printable_report_recordType")).withSearchResultsMetadataCodes(asList("printable_report_title", "printable_report_modifiedOn")).withTableMetadataCodes(asList("printable_report_modifiedOn", "printable_report_title", "printable_report_recordSchema")));
    transaction.add(manager.getSchema(collection, "printable_default").withFormMetadataCodes(asList("printable_default_title", "printable_default_jasperfile")).withDisplayMetadataCodes(asList("printable_default_title", "printable_default_createdBy", "printable_default_createdOn", "printable_default_modifiedBy", "printable_default_modifiedOn", "printable_default_jasperfile")).withSearchResultsMetadataCodes(asList("printable_default_title", "printable_default_modifiedOn")).withTableMetadataCodes(asList("printable_default_modifiedOn", "printable_default_title")));
    transaction.add(manager.getType(collection, "retentionRule").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "retentionRule_default").withFormMetadataCodes(asList("retentionRule_default_scope", "retentionRule_default_code", "retentionRule_default_approved", "retentionRule_default_approvalDate", "retentionRule_default_title", "retentionRule_default_corpus", "retentionRule_default_corpusRuleNumber", "retentionRule_default_administrativeUnits", "retentionRule_default_responsibleAdministrativeUnits", "retentionRule_default_description", "retentionRule_default_juridicReference", "retentionRule_default_generalComment", "retentionRule_default_keywords", "retentionRule_default_history", "retentionRule_default_essentialDocuments", "retentionRule_default_confidentialDocuments", "retentionRule_default_copyRetentionRules", "retentionRule_default_principalDefaultDocumentCopyRetentionRule", "retentionRule_default_secondaryDefaultDocumentCopyRetentionRule", "retentionRule_default_documentCopyRetentionRules", "retentionRule_default_documentTypesDetails", "retentionRule_default_copyRulesComment")).withDisplayMetadataCodes(asList("retentionRule_default_code", "retentionRule_default_approved", "retentionRule_default_approvalDate", "retentionRule_default_title", "retentionRule_default_corpus", "retentionRule_default_corpusRuleNumber", "retentionRule_default_administrativeUnits", "retentionRule_default_responsibleAdministrativeUnits", "retentionRule_default_description", "retentionRule_default_juridicReference", "retentionRule_default_generalComment", "retentionRule_default_keywords", "retentionRule_default_history", "retentionRule_default_essentialDocuments", "retentionRule_default_confidentialDocuments", "retentionRule_default_copyRetentionRules", "retentionRule_default_documentTypesDetails", "retentionRule_default_copyRulesComment", "retentionRule_default_scope", "retentionRule_default_principalDefaultDocumentCopyRetentionRule", "retentionRule_default_secondaryDefaultDocumentCopyRetentionRule", "retentionRule_default_documentCopyRetentionRules")).withSearchResultsMetadataCodes(asList("retentionRule_default_code", "retentionRule_default_title", "retentionRule_default_modifiedOn")).withTableMetadataCodes(asList("retentionRule_default_code", "retentionRule_default_title", "retentionRule_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "retentionRule_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "retentionRule_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "retentionRule_default_keywords").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "retentionRule_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "retentionRule_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "retentionRule_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "storageSpace").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "storageSpace_default").withFormMetadataCodes(asList("storageSpace_default_type", "storageSpace_default_code", "storageSpace_default_title", "storageSpace_default_description", "storageSpace_default_capacity", "storageSpace_default_decommissioningType", "storageSpace_default_parentStorageSpace", "storageSpace_default_containerType")).withDisplayMetadataCodes(asList("storageSpace_default_type", "storageSpace_default_code", "storageSpace_default_title", "storageSpace_default_createdBy", "storageSpace_default_createdOn", "storageSpace_default_modifiedOn", "storageSpace_default_capacity", "storageSpace_default_decommissioningType", "storageSpace_default_parentStorageSpace", "storageSpace_default_description", "storageSpace_default_containerType")).withSearchResultsMetadataCodes(asList("storageSpace_default_title", "storageSpace_default_modifiedOn")).withTableMetadataCodes(asList("storageSpace_default_title", "storageSpace_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_availableSize").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_containerType").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_description").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_numberOfContainers").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "storageSpace_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "task").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "temporaryRecord_sipArchive").withFormMetadataCodes(asList("temporaryRecord_sipArchive_title", "temporaryRecord_sipArchive_daysBeforeDestruction", "temporaryRecord_sipArchive_name", "temporaryRecord_sipArchive_user", "temporaryRecord_sipArchive_creationDate")).withDisplayMetadataCodes(asList("temporaryRecord_sipArchive_title", "temporaryRecord_sipArchive_createdBy", "temporaryRecord_sipArchive_createdOn", "temporaryRecord_sipArchive_modifiedBy", "temporaryRecord_sipArchive_modifiedOn", "temporaryRecord_sipArchive_daysBeforeDestruction", "temporaryRecord_sipArchive_creationDate", "temporaryRecord_sipArchive_name", "temporaryRecord_sipArchive_user")).withSearchResultsMetadataCodes(asList("temporaryRecord_sipArchive_title", "temporaryRecord_sipArchive_modifiedOn")).withTableMetadataCodes(asList("temporaryRecord_sipArchive_createdBy", "temporaryRecord_sipArchive_createdOn", "temporaryRecord_sipArchive_destructionDate", "temporaryRecord_sipArchive_content")));
    transaction.add(manager.getMetadata(collection, "temporaryRecord_sipArchive_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "temporaryRecord_sipArchive_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "temporaryRecord_sipArchive_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "temporaryRecord_sipArchive_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "uniformSubdivision").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "uniformSubdivision_default").withFormMetadataCodes(asList("uniformSubdivision_default_code", "uniformSubdivision_default_title", "uniformSubdivision_default_retentionRule", "uniformSubdivision_default_description")).withDisplayMetadataCodes(asList("uniformSubdivision_default_code", "uniformSubdivision_default_title", "uniformSubdivision_default_retentionRule", "uniformSubdivision_default_description")).withSearchResultsMetadataCodes(asList("uniformSubdivision_default_title", "uniformSubdivision_default_modifiedOn")).withTableMetadataCodes(asList("uniformSubdivision_default_title", "uniformSubdivision_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "uniformSubdivision_default_code").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "uniformSubdivision_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "uniformSubdivision_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "uniformSubdivision_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "uniformSubdivision_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "user").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getType(collection, "userDocument").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:defaultGroupLabel"))));
    transaction.add(manager.getSchema(collection, "userDocument_default").withFormMetadataCodes(asList("userDocument_default_title", "userDocument_default_user", "userDocument_default_userFolder", "userDocument_default_formCreatedOn", "userDocument_default_formModifiedOn", "userDocument_default_content")).withDisplayMetadataCodes(asList("userDocument_default_title", "userDocument_default_createdOn", "userDocument_default_modifiedOn", "userDocument_default_contentSize", "userDocument_default_formCreatedOn", "userDocument_default_formModifiedOn", "userDocument_default_user", "userDocument_default_userFolder", "userDocument_default_content")).withSearchResultsMetadataCodes(asList("userDocument_default_title", "userDocument_default_modifiedOn")).withTableMetadataCodes(asList("userDocument_default_title", "userDocument_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "userTask_default_linkedContainers").withMetadataGroup("init.userTask.details").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_linkedDocuments").withMetadataGroup("init.userTask.details").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_linkedFolders").withMetadataGroup("init.userTask.details").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_reason").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    manager.execute(transaction.build());
  }

  public void applyGeneratedRoles() {
    RolesManager rolesManager = appLayerFactory.getModelLayerFactory().getRolesManager();;
    rolesManager.updateRole(rolesManager.getRole(collection, "ADM").withNewPermissions(asList("core.accessDeleteAllTemporaryRecords", "core.deleteContentVersion", "core.deletePublicSavedSearch", "core.ldapConfigurationManagement", "core.manageConnectors", "core.manageEmailServer", "core.manageExcelReport", "core.manageFacets", "core.manageLabels", "core.manageMetadataExtractor", "core.manageMetadataSchemas", "core.managePrintableReport", "core.manageSearchBoost", "core.manageSecurity", "core.manageSystemCollections", "core.manageSystemConfiguration", "core.manageSystemDataImports", "core.manageSystemGroups", "core.manageSystemGroupsActivation", "core.manageSystemUpdates", "core.manageSystemUsers", "core.manageTaxonomies", "core.manageTrash", "core.manageValueList", "core.managerTemporaryRecords", "core.modifyPublicSavedSearch", "core.seeAllTemporaryRecords", "core.useExternalAPIS", "core.viewEvents", "core.viewSystemBatchProcesses", "rm.borrowContainer", "rm.borrowFolder", "rm.borrowingFolderDirectly", "rm.borrowingRequestOnContainer", "rm.borrowingRequestOnFolder", "rm.createActiveFolderToSemiActiveDecommissioningList", "rm.createDocuments", "rm.createFolders", "rm.createInactiveDocuments", "rm.createSemiActiveDocuments", "rm.createSubFolders", "rm.createSubFoldersInInactiveFolders", "rm.createSubFoldersInSemiActiveFolders", "rm.decommissioning", "rm.deleteBorrowedDocuments", "rm.deleteContainers", "rm.deleteInactiveDocuments", "rm.deleteInactiveFolders", "rm.deletePublishedDocuments", "rm.deleteSemiActiveDocuments", "rm.deleteSemiActiveFolders", "rm.displayContainers", "rm.duplicateInactiveFolders", "rm.duplicateSemiActiveFolders", "rm.editActiveFolderToSemiActiveDecommissioningList", "rm.editDecommissioningList", "rm.generateSIPArchives", "rm.manageBagInfo", "rm.manageClassificationPlan", "rm.manageContainers", "rm.manageDocumentAuthorizations", "rm.manageFolderAuthorizations", "rm.manageReports", "rm.manageRequestOnContainer", "rm.manageRequestOnFolder", "rm.manageRetentionRule", "rm.manageStorageSpaces", "rm.manageUniformSubdivisions", "rm.modifyFolderDecomDate", "rm.modifyImportedDocuments", "rm.modifyImportedFolders", "rm.modifyInactiveBorrowedFolder", "rm.modifyInactiveDocuments", "rm.modifyInactiveFolders", "rm.modifyOpeningDateFolder", "rm.modifySemiActiveBorrowedFolder", "rm.modifySemiActiveDocuments", "rm.modifySemiActiveFolders", "rm.processDecommissioningList", "rm.publishAndUnpublishDocuments", "rm.reactivationRequestOnFolder", "rm.returnOtherUsersDocuments", "rm.returnOtherUsersFolders", "rm.shareDocuments", "rm.shareFolders", "rm.shareImportedDocuments", "rm.shareImportedFolders", "rm.shareInactiveDocuments", "rm.shareInactiveFolders", "rm.shareSemiActiveDocuments", "rm.shareSemiActiveFolders", "rm.uploadInactiveDocuments", "rm.uploadSemiActiveDocuments", "rm.useCart", "rm.viewSystemFilename", "tasks.manageWorkflows", "tasks.startWorkflows")));
    rolesManager.addRole(new Role(collection, "U", resourcesProvider.getValuesOfAllLanguagesWithSeparator("init.roles.U", " / "), asList("rm.borrowContainer", "rm.borrowFolder", "rm.borrowingRequestOnContainer", "rm.borrowingRequestOnFolder", "rm.createDocuments", "rm.createFolders", "rm.createSubFolders", "rm.deletePublishedDocuments", "rm.deleteSemiActiveDocuments", "rm.deleteSemiActiveFolders", "rm.modifySemiActiveBorrowedFolder", "rm.publishAndUnpublishDocuments", "rm.reactivationRequestOnFolder", "rm.shareDocuments", "rm.shareFolders", "rm.shareSemiActiveDocuments", "rm.shareSemiActiveFolders", "rm.uploadSemiActiveDocuments", "rm.useCart")));
    rolesManager.addRole(new Role(collection, "M", resourcesProvider.getValuesOfAllLanguagesWithSeparator("init.roles.M", " / "), asList("manageLabels", "rm.borrowContainer", "rm.borrowFolder", "rm.borrowingRequestOnContainer", "rm.borrowingRequestOnFolder", "rm.createDocuments", "rm.createFolders", "rm.createSubFolders", "rm.decommissioning", "rm.deletePublishedDocuments", "rm.deleteSemiActiveDocuments", "rm.deleteSemiActiveFolders", "rm.manageContainers", "rm.manageDocumentAuthorizations", "rm.manageFolderAuthorizations", "rm.modifyOpeningDateFolder", "rm.modifySemiActiveBorrowedFolder", "rm.publishAndUnpublishDocuments", "rm.reactivationRequestOnFolder", "rm.shareDocuments", "rm.shareFolders", "rm.shareSemiActiveDocuments", "rm.shareSemiActiveFolders", "rm.uploadSemiActiveDocuments", "rm.useCart")));
    rolesManager.addRole(new Role(collection, "RGD", resourcesProvider.getValuesOfAllLanguagesWithSeparator("init.roles.RGD", " / "), asList("core.accessDeleteAllTemporaryRecords", "core.deleteContentVersion", "core.deletePublicSavedSearch", "core.ldapConfigurationManagement", "core.manageConnectors", "core.manageEmailServer", "core.manageExcelReport", "core.manageFacets", "core.manageLabels", "core.manageMetadataExtractor", "core.manageMetadataSchemas", "core.managePrintableReport", "core.manageSearchBoost", "core.manageSecurity", "core.manageSystemCollections", "core.manageSystemConfiguration", "core.manageSystemDataImports", "core.manageSystemGroups", "core.manageSystemGroupsActivation", "core.manageSystemUpdates", "core.manageSystemUsers", "core.manageTaxonomies", "core.manageTrash", "core.manageValueList", "core.managerTemporaryRecords", "core.modifyPublicSavedSearch", "core.seeAllTemporaryRecords", "core.useExternalAPIS", "core.viewEvents", "core.viewSystemBatchProcesses", "rm.borrowContainer", "rm.borrowFolder", "rm.borrowingFolderDirectly", "rm.borrowingRequestOnContainer", "rm.borrowingRequestOnFolder", "rm.createActiveFolderToSemiActiveDecommissioningList", "rm.createDocuments", "rm.createFolders", "rm.createInactiveDocuments", "rm.createSemiActiveDocuments", "rm.createSubFolders", "rm.createSubFoldersInInactiveFolders", "rm.createSubFoldersInSemiActiveFolders", "rm.decommissioning", "rm.deleteBorrowedDocuments", "rm.deleteContainers", "rm.deleteInactiveDocuments", "rm.deleteInactiveFolders", "rm.deletePublishedDocuments", "rm.deleteSemiActiveDocuments", "rm.deleteSemiActiveFolders", "rm.displayContainers", "rm.duplicateInactiveFolders", "rm.duplicateSemiActiveFolders", "rm.editActiveFolderToSemiActiveDecommissioningList", "rm.editDecommissioningList", "rm.generateSIPArchives", "rm.manageBagInfo", "rm.manageClassificationPlan", "rm.manageContainers", "rm.manageDocumentAuthorizations", "rm.manageFolderAuthorizations", "rm.manageReports", "rm.manageRequestOnContainer", "rm.manageRequestOnFolder", "rm.manageRetentionRule", "rm.manageStorageSpaces", "rm.manageUniformSubdivisions", "rm.modifyFolderDecomDate", "rm.modifyImportedDocuments", "rm.modifyImportedFolders", "rm.modifyInactiveBorrowedFolder", "rm.modifyInactiveDocuments", "rm.modifyInactiveFolders", "rm.modifyOpeningDateFolder", "rm.modifySemiActiveBorrowedFolder", "rm.modifySemiActiveDocuments", "rm.modifySemiActiveFolders", "rm.processDecommissioningList", "rm.publishAndUnpublishDocuments", "rm.reactivationRequestOnFolder", "rm.returnOtherUsersDocuments", "rm.returnOtherUsersFolders", "rm.shareDocuments", "rm.shareFolders", "rm.shareImportedDocuments", "rm.shareImportedFolders", "rm.shareInactiveDocuments", "rm.shareInactiveFolders", "rm.shareSemiActiveDocuments", "rm.shareSemiActiveFolders", "rm.uploadInactiveDocuments", "rm.uploadSemiActiveDocuments", "rm.useCart", "rm.viewSystemFilename", "tasks.manageWorkflows", "tasks.startWorkflows")));
  }
}