package com.constellio.app.modules.es.migrations;

import com.constellio.model.entities.schemas.RecordCacheType;
import com.constellio.app.services.schemasDisplay.SchemaTypesDisplayTransactionBuilder;
import com.constellio.app.entities.schemasDisplay.SchemaTypesDisplayConfig;
import com.constellio.model.entities.schemas.MetadataTransiency;
import com.constellio.model.entities.schemas.MetadataValueType;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.constellio.model.services.security.roles.RolesManager;
import java.util.ArrayList;
import static com.constellio.data.utils.HashMapBuilder.stringObjectMap;
import static java.util.Arrays.asList;

import com.constellio.app.entities.modules.MigrationResourcesProvider;
import com.constellio.app.entities.schemasDisplay.enums.MetadataInputType;
import com.constellio.app.modules.es.connectors.smb.LastFetchedStatus;
import com.constellio.app.modules.es.connectors.smb.model.SmbFolderPathPartsCalculator;
import com.constellio.app.modules.es.model.connectors.AuthenticationScheme;
import com.constellio.app.modules.es.model.connectors.ConnectorDocumentStatus;
import com.constellio.app.modules.es.model.connectors.DocumentSmbConnectorUrlCalculator;
import com.constellio.app.modules.es.model.connectors.DocumentSmbParentConnectorUrlCalculator;
import com.constellio.app.modules.es.model.connectors.FolderSmbConnectorUrlCalculator;
import com.constellio.app.modules.es.model.connectors.FolderSmbParentConnectorUrlCalculator;
import com.constellio.app.modules.es.model.connectors.NextFetchCalculator;
import com.constellio.app.modules.es.model.connectors.http.enums.FetchFrequency;
import com.constellio.app.modules.es.model.connectors.ldap.enums.DirectoryType;
import com.constellio.app.modules.es.model.connectors.structures.TraversalScheduleFactory;
import com.constellio.app.modules.es.services.mapping.ConnectorFieldFactory;
import com.constellio.app.modules.es.services.mapping.ConnectorFieldValidator;
import com.constellio.app.services.factories.AppLayerFactory;
import com.constellio.app.services.schemasDisplay.SchemasDisplayManager;
import com.constellio.model.entities.structures.MapStringListStringStructureFactory;
import com.constellio.model.services.schemas.builders.MetadataBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypeBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypesBuilder;
import com.constellio.model.services.schemas.calculators.AllReferencesCalculator;
import com.constellio.model.services.schemas.calculators.AllRemovedAuthsCalculator;
import com.constellio.model.services.schemas.calculators.AttachedAncestorsCalculator;
import com.constellio.model.services.schemas.calculators.AutocompleteFieldCalculator;
import com.constellio.model.services.schemas.calculators.DefaultTokensOfHierarchyCalculator;
import com.constellio.model.services.schemas.calculators.PathCalculator;
import com.constellio.model.services.schemas.calculators.PathPartsCalculator;
import com.constellio.model.services.schemas.calculators.PrincipalPathCalculator;
import com.constellio.model.services.schemas.calculators.TokensCalculator4;
import com.constellio.model.services.schemas.validators.ManualTokenValidator;
import java.lang.String;

public final class GeneratedESMigrationCombo {
  String collection;

  AppLayerFactory appLayerFactory;

  MigrationResourcesProvider resourcesProvider;

  GeneratedESMigrationCombo(String collection, AppLayerFactory appLayerFactory, MigrationResourcesProvider resourcesProvider) {
    this.collection = collection;
    this.appLayerFactory = appLayerFactory;
    this.resourcesProvider = resourcesProvider;
  }

  public void applyGeneratedSchemaAlteration(MetadataSchemaTypesBuilder typesBuilder) {
    MetadataSchemaTypeBuilder collectionSchemaType = typesBuilder.getSchemaType("collection");
    MetadataSchemaBuilder collectionSchema = collectionSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder groupSchemaType = typesBuilder.getSchemaType("group");
    MetadataSchemaBuilder groupSchema = groupSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userSchemaType = typesBuilder.getSchemaType("user");
    MetadataSchemaBuilder userSchema = userSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder authorizationDetailsSchemaType = typesBuilder.getSchemaType("authorizationDetails");
    MetadataSchemaBuilder authorizationDetailsSchema = authorizationDetailsSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder capsuleSchemaType = typesBuilder.getSchemaType("capsule");
    MetadataSchemaBuilder capsuleSchema = capsuleSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvCapsuleLanguageSchemaType = typesBuilder.getSchemaType("ddvCapsuleLanguage");
    MetadataSchemaBuilder ddvCapsuleLanguageSchema = ddvCapsuleLanguageSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder emailToSendSchemaType = typesBuilder.getSchemaType("emailToSend");
    MetadataSchemaBuilder emailToSendSchema = emailToSendSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder eventSchemaType = typesBuilder.getSchemaType("event");
    MetadataSchemaBuilder eventSchema = eventSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder facetSchemaType = typesBuilder.getSchemaType("facet");
    MetadataSchemaBuilder facet_fieldSchema = facetSchemaType.getCustomSchema("field");
    MetadataSchemaBuilder facet_querySchema = facetSchemaType.getCustomSchema("query");
    MetadataSchemaBuilder facetSchema = facetSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder printableSchemaType = typesBuilder.getSchemaType("printable");
    MetadataSchemaBuilder printableSchema = printableSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder reportSchemaType = typesBuilder.getSchemaType("report");
    MetadataSchemaBuilder reportSchema = reportSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder savedSearchSchemaType = typesBuilder.getSchemaType("savedSearch");
    MetadataSchemaBuilder savedSearchSchema = savedSearchSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder searchEventSchemaType = typesBuilder.getSchemaType("searchEvent");
    MetadataSchemaBuilder searchEventSchema = searchEventSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder taskSchemaType = typesBuilder.getSchemaType("task");
    MetadataSchemaBuilder task_approvalSchema = taskSchemaType.getCustomSchema("approval");
    MetadataSchemaBuilder taskSchema = taskSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder temporaryRecordSchemaType = typesBuilder.getSchemaType("temporaryRecord");
    MetadataSchemaBuilder temporaryRecord_batchProcessReportSchema = temporaryRecordSchemaType.getCustomSchema("batchProcessReport");
    MetadataSchemaBuilder temporaryRecord_exportAuditSchema = temporaryRecordSchemaType.getCustomSchema("exportAudit");
    MetadataSchemaBuilder temporaryRecord_importAuditSchema = temporaryRecordSchemaType.getCustomSchema("importAudit");
    MetadataSchemaBuilder temporaryRecord_scriptReportSchema = temporaryRecordSchemaType.getCustomSchema("scriptReport");
    MetadataSchemaBuilder temporaryRecord_vaultScanReportSchema = temporaryRecordSchemaType.getCustomSchema("vaultScanReport");
    MetadataSchemaBuilder temporaryRecordSchema = temporaryRecordSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder thesaurusConfigSchemaType = typesBuilder.getSchemaType("thesaurusConfig");
    MetadataSchemaBuilder thesaurusConfigSchema = thesaurusConfigSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userDocumentSchemaType = typesBuilder.getSchemaType("userDocument");
    MetadataSchemaBuilder userDocumentSchema = userDocumentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userFolderSchemaType = typesBuilder.getSchemaType("userFolder");
    MetadataSchemaBuilder userFolderSchema = userFolderSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder connectorHttpDocumentSchemaType = typesBuilder.createNewSchemaType("connectorHttpDocument",false).setInTransactionLog(false).setRecordCacheType(RecordCacheType.NOT_CACHED);
    MetadataSchemaBuilder connectorHttpDocumentSchema = connectorHttpDocumentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder connectorInstanceSchemaType = typesBuilder.createNewSchemaType("connectorInstance",false);
    MetadataSchemaBuilder connectorInstance_httpSchema = connectorInstanceSchemaType.createCustomSchema("http");
    MetadataSchemaBuilder connectorInstance_ldapSchema = connectorInstanceSchemaType.createCustomSchema("ldap");
    MetadataSchemaBuilder connectorInstance_smbSchema = connectorInstanceSchemaType.createCustomSchema("smb");
    MetadataSchemaBuilder connectorInstanceSchema = connectorInstanceSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder connectorLdapUserDocumentSchemaType = typesBuilder.createNewSchemaType("connectorLdapUserDocument",false).setInTransactionLog(false);
    MetadataSchemaBuilder connectorLdapUserDocumentSchema = connectorLdapUserDocumentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder connectorSmbDocumentSchemaType = typesBuilder.createNewSchemaType("connectorSmbDocument",false).setInTransactionLog(false).setRecordCacheType(RecordCacheType.NOT_CACHED);
    MetadataSchemaBuilder connectorSmbDocumentSchema = connectorSmbDocumentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder connectorSmbFolderSchemaType = typesBuilder.createNewSchemaType("connectorSmbFolder",false).setInTransactionLog(false).setRecordCacheType(RecordCacheType.NOT_CACHED);
    MetadataSchemaBuilder connectorSmbFolderSchema = connectorSmbFolderSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder connectorTypeSchemaType = typesBuilder.createNewSchemaType("connectorType",false);
    MetadataSchemaBuilder connectorTypeSchema = connectorTypeSchemaType.getDefaultSchema();
    createCollectionSchemaTypeMetadatas(typesBuilder,collectionSchemaType, collectionSchema);
    createGroupSchemaTypeMetadatas(typesBuilder,groupSchemaType, groupSchema);
    createUserSchemaTypeMetadatas(typesBuilder,userSchemaType, userSchema);
    createAuthorizationDetailsSchemaTypeMetadatas(typesBuilder,authorizationDetailsSchemaType, authorizationDetailsSchema);
    createCapsuleSchemaTypeMetadatas(typesBuilder,capsuleSchemaType, capsuleSchema);
    createConnectorHttpDocumentSchemaTypeMetadatas(typesBuilder,connectorHttpDocumentSchemaType, connectorHttpDocumentSchema);
    createConnectorInstanceSchemaTypeMetadatas(typesBuilder,connectorInstanceSchemaType, connectorInstance_httpSchema, connectorInstance_ldapSchema, connectorInstance_smbSchema, connectorInstanceSchema);
    createConnectorLdapUserDocumentSchemaTypeMetadatas(typesBuilder,connectorLdapUserDocumentSchemaType, connectorLdapUserDocumentSchema);
    createConnectorSmbDocumentSchemaTypeMetadatas(typesBuilder,connectorSmbDocumentSchemaType, connectorSmbDocumentSchema);
    createConnectorSmbFolderSchemaTypeMetadatas(typesBuilder,connectorSmbFolderSchemaType, connectorSmbFolderSchema);
    createConnectorTypeSchemaTypeMetadatas(typesBuilder,connectorTypeSchemaType, connectorTypeSchema);
    createDdvCapsuleLanguageSchemaTypeMetadatas(typesBuilder,ddvCapsuleLanguageSchemaType, ddvCapsuleLanguageSchema);
    createEmailToSendSchemaTypeMetadatas(typesBuilder,emailToSendSchemaType, emailToSendSchema);
    createEventSchemaTypeMetadatas(typesBuilder,eventSchemaType, eventSchema);
    createFacetSchemaTypeMetadatas(typesBuilder,facetSchemaType, facet_fieldSchema, facet_querySchema, facetSchema);
    createPrintableSchemaTypeMetadatas(typesBuilder,printableSchemaType, printableSchema);
    createReportSchemaTypeMetadatas(typesBuilder,reportSchemaType, reportSchema);
    createSavedSearchSchemaTypeMetadatas(typesBuilder,savedSearchSchemaType, savedSearchSchema);
    createSearchEventSchemaTypeMetadatas(typesBuilder,searchEventSchemaType, searchEventSchema);
    createTaskSchemaTypeMetadatas(typesBuilder,taskSchemaType, task_approvalSchema, taskSchema);
    createTemporaryRecordSchemaTypeMetadatas(typesBuilder,temporaryRecordSchemaType, temporaryRecord_batchProcessReportSchema, temporaryRecord_exportAuditSchema, temporaryRecord_importAuditSchema, temporaryRecord_scriptReportSchema, temporaryRecord_vaultScanReportSchema, temporaryRecordSchema);
    createThesaurusConfigSchemaTypeMetadatas(typesBuilder,thesaurusConfigSchemaType, thesaurusConfigSchema);
    createUserDocumentSchemaTypeMetadatas(typesBuilder,userDocumentSchemaType, userDocumentSchema);
    createUserFolderSchemaTypeMetadatas(typesBuilder,userFolderSchemaType, userFolderSchema);
    connectorHttpDocumentSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    connectorHttpDocumentSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    connectorHttpDocumentSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    connectorHttpDocumentSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    connectorHttpDocumentSchema.get("nextFetch").defineDataEntry().asCalculated(NextFetchCalculator.class);
    connectorHttpDocumentSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    connectorHttpDocumentSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    connectorHttpDocumentSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    connectorHttpDocumentSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    connectorHttpDocumentSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    connectorInstanceSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    connectorInstanceSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    connectorInstanceSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    connectorInstanceSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    connectorInstanceSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    connectorInstanceSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    connectorInstanceSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    connectorInstanceSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    connectorInstanceSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    connectorLdapUserDocumentSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    connectorLdapUserDocumentSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    connectorLdapUserDocumentSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    connectorLdapUserDocumentSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    connectorLdapUserDocumentSchema.get("nextFetch").defineDataEntry().asCalculated(NextFetchCalculator.class);
    connectorLdapUserDocumentSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    connectorLdapUserDocumentSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    connectorLdapUserDocumentSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    connectorLdapUserDocumentSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    connectorLdapUserDocumentSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    connectorSmbDocumentSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    connectorSmbDocumentSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    connectorSmbDocumentSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    connectorSmbDocumentSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    connectorSmbDocumentSchema.get("connectorUrl").defineDataEntry().asCalculated(DocumentSmbConnectorUrlCalculator.class);
    connectorSmbDocumentSchema.get("nextFetch").defineDataEntry().asCalculated(NextFetchCalculator.class);
    connectorSmbDocumentSchema.get("parentConnectorUrl").defineDataEntry().asCalculated(DocumentSmbParentConnectorUrlCalculator.class);
    connectorSmbDocumentSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    connectorSmbDocumentSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    connectorSmbDocumentSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    connectorSmbDocumentSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    connectorSmbDocumentSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    connectorSmbFolderSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    connectorSmbFolderSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    connectorSmbFolderSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    connectorSmbFolderSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    connectorSmbFolderSchema.get("connectorUrl").defineDataEntry().asCalculated(FolderSmbConnectorUrlCalculator.class);
    connectorSmbFolderSchema.get("nextFetch").defineDataEntry().asCalculated(NextFetchCalculator.class);
    connectorSmbFolderSchema.get("parentConnectorUrl").defineDataEntry().asCalculated(FolderSmbParentConnectorUrlCalculator.class);
    connectorSmbFolderSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    connectorSmbFolderSchema.get("pathParts").defineDataEntry().asCalculated(SmbFolderPathPartsCalculator.class);
    connectorSmbFolderSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    connectorSmbFolderSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    connectorSmbFolderSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    connectorTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    connectorTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    connectorTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    connectorTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    connectorTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    connectorTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    connectorTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    connectorTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator4.class);
    connectorTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
  }

  private void createCapsuleSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder capsuleSchemaType, MetadataSchemaBuilder capsuleSchema) {
  }

  private void createConnectorTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder connectorTypeSchemaType, MetadataSchemaBuilder connectorTypeSchema) {
    MetadataBuilder connectorType_allReferences = connectorTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    connectorType_allReferences.setMultivalue(true);
    connectorType_allReferences.setSystemReserved(true);
    connectorType_allReferences.setUndeletable(true);
    connectorType_allReferences.setMultiLingual(false);
    MetadataBuilder connectorType_allRemovedAuths = connectorTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    connectorType_allRemovedAuths.setMultivalue(true);
    connectorType_allRemovedAuths.setSystemReserved(true);
    connectorType_allRemovedAuths.setUndeletable(true);
    connectorType_allRemovedAuths.setEssential(true);
    connectorType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder connectorType_attachedAncestors = connectorTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    connectorType_attachedAncestors.setMultivalue(true);
    connectorType_attachedAncestors.setSystemReserved(true);
    connectorType_attachedAncestors.setUndeletable(true);
    connectorType_attachedAncestors.setEssential(true);
    connectorType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder connectorType_autocomplete = connectorTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    connectorType_autocomplete.setMultivalue(true);
    connectorType_autocomplete.setSystemReserved(true);
    connectorType_autocomplete.setUndeletable(true);
    connectorType_autocomplete.setEssential(true);
    connectorType_autocomplete.setMultiLingual(true);
    MetadataBuilder connectorType_caption = connectorTypeSchema.create("caption").setType(MetadataValueType.STRING);
    connectorType_caption.setSystemReserved(true);
    connectorType_caption.setUndeletable(true);
    connectorType_caption.setMultiLingual(false);
    connectorType_caption.setSortable(true);
    MetadataBuilder connectorType_code = connectorTypeSchema.create("code").setType(MetadataValueType.STRING);
    connectorType_code.setDefaultRequirement(true);
    connectorType_code.setUndeletable(true);
    connectorType_code.setEssential(true);
    connectorType_code.setUniqueValue(true);
    MetadataBuilder connectorType_connectorClassName = connectorTypeSchema.create("connectorClassName").setType(MetadataValueType.STRING);
    connectorType_connectorClassName.setDefaultRequirement(true);
    connectorType_connectorClassName.setUndeletable(true);
    MetadataBuilder connectorType_createdBy = connectorTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    connectorType_createdBy.setSystemReserved(true);
    connectorType_createdBy.setUndeletable(true);
    connectorType_createdBy.setMultiLingual(false);
    connectorType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorType_createdOn = connectorTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    connectorType_createdOn.setSystemReserved(true);
    connectorType_createdOn.setUndeletable(true);
    connectorType_createdOn.setMultiLingual(false);
    connectorType_createdOn.setSortable(true);
    MetadataBuilder connectorType_defaultAvailableFields = connectorTypeSchema.create("defaultAvailableFields").setType(MetadataValueType.STRUCTURE);
    connectorType_defaultAvailableFields.setMultivalue(true);
    connectorType_defaultAvailableFields.setUndeletable(true);
    connectorType_defaultAvailableFields.defineStructureFactory(ConnectorFieldFactory.class);
    connectorType_defaultAvailableFields.defineValidators().add(ConnectorFieldValidator.class);
    MetadataBuilder connectorType_deleted = connectorTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    connectorType_deleted.setSystemReserved(true);
    connectorType_deleted.setUndeletable(true);
    connectorType_deleted.setMultiLingual(false);
    MetadataBuilder connectorType_denyTokens = connectorTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    connectorType_denyTokens.setMultivalue(true);
    connectorType_denyTokens.setSystemReserved(true);
    connectorType_denyTokens.setUndeletable(true);
    connectorType_denyTokens.setMultiLingual(false);
    connectorType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorType_detachedauthorizations = connectorTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    connectorType_detachedauthorizations.setSystemReserved(true);
    connectorType_detachedauthorizations.setUndeletable(true);
    connectorType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorType_errorOnPhysicalDeletion = connectorTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    connectorType_errorOnPhysicalDeletion.setSystemReserved(true);
    connectorType_errorOnPhysicalDeletion.setUndeletable(true);
    connectorType_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder connectorType_estimatedSize = connectorTypeSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    connectorType_estimatedSize.setSystemReserved(true);
    connectorType_estimatedSize.setUndeletable(true);
    connectorType_estimatedSize.setMultiLingual(false);
    MetadataBuilder connectorType_hidden = connectorTypeSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    connectorType_hidden.setSystemReserved(true);
    connectorType_hidden.setUndeletable(true);
    connectorType_hidden.setMultiLingual(false);
    MetadataBuilder connectorType_id = connectorTypeSchema.create("id").setType(MetadataValueType.STRING);
    connectorType_id.setDefaultRequirement(true);
    connectorType_id.setSystemReserved(true);
    connectorType_id.setUndeletable(true);
    connectorType_id.setMultiLingual(false);
    connectorType_id.setSearchable(true);
    connectorType_id.setSortable(true);
    connectorType_id.setUniqueValue(true);
    connectorType_id.setUnmodifiable(true);
    MetadataBuilder connectorType_legacyIdentifier = connectorTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    connectorType_legacyIdentifier.setDefaultRequirement(true);
    connectorType_legacyIdentifier.setSystemReserved(true);
    connectorType_legacyIdentifier.setUndeletable(true);
    connectorType_legacyIdentifier.setMultiLingual(false);
    connectorType_legacyIdentifier.setSearchable(true);
    connectorType_legacyIdentifier.setUniqueValue(true);
    connectorType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder connectorType_linkedSchema = connectorTypeSchema.create("linkedSchema").setType(MetadataValueType.STRING);
    connectorType_linkedSchema.setDefaultRequirement(true);
    connectorType_linkedSchema.setUndeletable(true);
    MetadataBuilder connectorType_logicallyDeletedOn = connectorTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    connectorType_logicallyDeletedOn.setSystemReserved(true);
    connectorType_logicallyDeletedOn.setUndeletable(true);
    connectorType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder connectorType_manualTokens = connectorTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    connectorType_manualTokens.setMultivalue(true);
    connectorType_manualTokens.setSystemReserved(true);
    connectorType_manualTokens.setUndeletable(true);
    connectorType_manualTokens.setMultiLingual(false);
    connectorType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorType_markedForParsing = connectorTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    connectorType_markedForParsing.setSystemReserved(true);
    connectorType_markedForParsing.setUndeletable(true);
    connectorType_markedForParsing.setMultiLingual(false);
    MetadataBuilder connectorType_markedForPreviewConversion = connectorTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    connectorType_markedForPreviewConversion.setSystemReserved(true);
    connectorType_markedForPreviewConversion.setUndeletable(true);
    connectorType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder connectorType_markedForReindexing = connectorTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    connectorType_markedForReindexing.setSystemReserved(true);
    connectorType_markedForReindexing.setUndeletable(true);
    connectorType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder connectorType_migrationDataVersion = connectorTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    connectorType_migrationDataVersion.setSystemReserved(true);
    connectorType_migrationDataVersion.setUndeletable(true);
    connectorType_migrationDataVersion.setMultiLingual(false);
    connectorType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder connectorType_modifiedBy = connectorTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    connectorType_modifiedBy.setSystemReserved(true);
    connectorType_modifiedBy.setUndeletable(true);
    connectorType_modifiedBy.setMultiLingual(false);
    connectorType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorType_modifiedOn = connectorTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    connectorType_modifiedOn.setSystemReserved(true);
    connectorType_modifiedOn.setUndeletable(true);
    connectorType_modifiedOn.setMultiLingual(false);
    connectorType_modifiedOn.setSortable(true);
    MetadataBuilder connectorType_path = connectorTypeSchema.create("path").setType(MetadataValueType.STRING);
    connectorType_path.setMultivalue(true);
    connectorType_path.setSystemReserved(true);
    connectorType_path.setUndeletable(true);
    connectorType_path.setMultiLingual(false);
    MetadataBuilder connectorType_pathParts = connectorTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    connectorType_pathParts.setMultivalue(true);
    connectorType_pathParts.setSystemReserved(true);
    connectorType_pathParts.setUndeletable(true);
    connectorType_pathParts.setMultiLingual(false);
    MetadataBuilder connectorType_principalpath = connectorTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    connectorType_principalpath.setSystemReserved(true);
    connectorType_principalpath.setUndeletable(true);
    connectorType_principalpath.setMultiLingual(false);
    MetadataBuilder connectorType_removedauthorizations = connectorTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    connectorType_removedauthorizations.setMultivalue(true);
    connectorType_removedauthorizations.setSystemReserved(true);
    connectorType_removedauthorizations.setUndeletable(true);
    connectorType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorType_schema = connectorTypeSchema.create("schema").setType(MetadataValueType.STRING);
    connectorType_schema.setDefaultRequirement(true);
    connectorType_schema.setSystemReserved(true);
    connectorType_schema.setUndeletable(true);
    connectorType_schema.setMultiLingual(false);
    MetadataBuilder connectorType_shareDenyTokens = connectorTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    connectorType_shareDenyTokens.setMultivalue(true);
    connectorType_shareDenyTokens.setSystemReserved(true);
    connectorType_shareDenyTokens.setUndeletable(true);
    connectorType_shareDenyTokens.setMultiLingual(false);
    connectorType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorType_shareTokens = connectorTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    connectorType_shareTokens.setMultivalue(true);
    connectorType_shareTokens.setSystemReserved(true);
    connectorType_shareTokens.setUndeletable(true);
    connectorType_shareTokens.setMultiLingual(false);
    connectorType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorType_title = connectorTypeSchema.create("title").setType(MetadataValueType.STRING);
    connectorType_title.setUndeletable(true);
    connectorType_title.setMultiLingual(true);
    connectorType_title.setSchemaAutocomplete(true);
    connectorType_title.setSearchable(true);
    MetadataBuilder connectorType_tokens = connectorTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    connectorType_tokens.setMultivalue(true);
    connectorType_tokens.setSystemReserved(true);
    connectorType_tokens.setUndeletable(true);
    connectorType_tokens.setMultiLingual(false);
    MetadataBuilder connectorType_tokensHierarchy = connectorTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    connectorType_tokensHierarchy.setMultivalue(true);
    connectorType_tokensHierarchy.setSystemReserved(true);
    connectorType_tokensHierarchy.setUndeletable(true);
    connectorType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder connectorType_visibleInTrees = connectorTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    connectorType_visibleInTrees.setSystemReserved(true);
    connectorType_visibleInTrees.setUndeletable(true);
    connectorType_visibleInTrees.setMultiLingual(false);
  }

  private void createCollectionSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder collectionSchemaType, MetadataSchemaBuilder collectionSchema) {
  }

  private void createConnectorHttpDocumentSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder connectorHttpDocumentSchemaType, MetadataSchemaBuilder connectorHttpDocumentSchema) {
    MetadataBuilder connectorHttpDocument_allReferences = connectorHttpDocumentSchema.create("allReferences").setType(MetadataValueType.STRING);
    connectorHttpDocument_allReferences.setMultivalue(true);
    connectorHttpDocument_allReferences.setSystemReserved(true);
    connectorHttpDocument_allReferences.setUndeletable(true);
    connectorHttpDocument_allReferences.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_allRemovedAuths = connectorHttpDocumentSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    connectorHttpDocument_allRemovedAuths.setMultivalue(true);
    connectorHttpDocument_allRemovedAuths.setSystemReserved(true);
    connectorHttpDocument_allRemovedAuths.setUndeletable(true);
    connectorHttpDocument_allRemovedAuths.setEssential(true);
    connectorHttpDocument_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_attachedAncestors = connectorHttpDocumentSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    connectorHttpDocument_attachedAncestors.setMultivalue(true);
    connectorHttpDocument_attachedAncestors.setSystemReserved(true);
    connectorHttpDocument_attachedAncestors.setUndeletable(true);
    connectorHttpDocument_attachedAncestors.setEssential(true);
    connectorHttpDocument_attachedAncestors.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_autocomplete = connectorHttpDocumentSchema.create("autocomplete").setType(MetadataValueType.STRING);
    connectorHttpDocument_autocomplete.setMultivalue(true);
    connectorHttpDocument_autocomplete.setSystemReserved(true);
    connectorHttpDocument_autocomplete.setUndeletable(true);
    connectorHttpDocument_autocomplete.setEssential(true);
    connectorHttpDocument_autocomplete.setMultiLingual(true);
    MetadataBuilder connectorHttpDocument_caption = connectorHttpDocumentSchema.create("caption").setType(MetadataValueType.STRING);
    connectorHttpDocument_caption.setSystemReserved(true);
    connectorHttpDocument_caption.setUndeletable(true);
    connectorHttpDocument_caption.setMultiLingual(false);
    connectorHttpDocument_caption.setSortable(true);
    MetadataBuilder connectorHttpDocument_charset = connectorHttpDocumentSchema.create("charset").setType(MetadataValueType.STRING);
    connectorHttpDocument_charset.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_connector = connectorHttpDocumentSchema.create("connector").setType(MetadataValueType.REFERENCE);
    connectorHttpDocument_connector.setDefaultRequirement(true);
    connectorHttpDocument_connector.setUndeletable(true);
    connectorHttpDocument_connector.defineReferencesTo(asList(types.getSchema("connectorInstance_http")));
    MetadataBuilder connectorHttpDocument_connectorType = connectorHttpDocumentSchema.create("connectorType").setType(MetadataValueType.REFERENCE);
    connectorHttpDocument_connectorType.setDefaultRequirement(true);
    connectorHttpDocument_connectorType.setUndeletable(true);
    connectorHttpDocument_connectorType.defineReferencesTo(asList(types.getSchema("connectorType_default")));
    MetadataBuilder connectorHttpDocument_contentType = connectorHttpDocumentSchema.create("contentType").setType(MetadataValueType.STRING);
    connectorHttpDocument_contentType.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_copyOf = connectorHttpDocumentSchema.create("copyOf").setType(MetadataValueType.STRING);
    connectorHttpDocument_copyOf.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_createdBy = connectorHttpDocumentSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    connectorHttpDocument_createdBy.setSystemReserved(true);
    connectorHttpDocument_createdBy.setUndeletable(true);
    connectorHttpDocument_createdBy.setMultiLingual(false);
    connectorHttpDocument_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorHttpDocument_createdOn = connectorHttpDocumentSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    connectorHttpDocument_createdOn.setSystemReserved(true);
    connectorHttpDocument_createdOn.setUndeletable(true);
    connectorHttpDocument_createdOn.setMultiLingual(false);
    connectorHttpDocument_createdOn.setSortable(true);
    MetadataBuilder connectorHttpDocument_deleted = connectorHttpDocumentSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_deleted.setSystemReserved(true);
    connectorHttpDocument_deleted.setUndeletable(true);
    connectorHttpDocument_deleted.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_denyTokens = connectorHttpDocumentSchema.create("denyTokens").setType(MetadataValueType.STRING);
    connectorHttpDocument_denyTokens.setMultivalue(true);
    connectorHttpDocument_denyTokens.setSystemReserved(true);
    connectorHttpDocument_denyTokens.setUndeletable(true);
    connectorHttpDocument_denyTokens.setMultiLingual(false);
    connectorHttpDocument_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorHttpDocument_description = connectorHttpDocumentSchema.create("description").setType(MetadataValueType.STRING);
    connectorHttpDocument_description.setSearchable(true);
    MetadataBuilder connectorHttpDocument_detachedauthorizations = connectorHttpDocumentSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_detachedauthorizations.setSystemReserved(true);
    connectorHttpDocument_detachedauthorizations.setUndeletable(true);
    connectorHttpDocument_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_digest = connectorHttpDocumentSchema.create("digest").setType(MetadataValueType.STRING);
    connectorHttpDocument_digest.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_domain = connectorHttpDocumentSchema.create("domain").setType(MetadataValueType.STRING);
    connectorHttpDocument_domain.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_downloadTime = connectorHttpDocumentSchema.create("downloadTime").setType(MetadataValueType.NUMBER);
    connectorHttpDocument_downloadTime.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_errorCode = connectorHttpDocumentSchema.create("errorCode").setType(MetadataValueType.STRING);
    connectorHttpDocument_errorCode.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_errorMessage = connectorHttpDocumentSchema.create("errorMessage").setType(MetadataValueType.STRING);
    connectorHttpDocument_errorMessage.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_errorOnPhysicalDeletion = connectorHttpDocumentSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_errorOnPhysicalDeletion.setSystemReserved(true);
    connectorHttpDocument_errorOnPhysicalDeletion.setUndeletable(true);
    connectorHttpDocument_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_errorStackTrace = connectorHttpDocumentSchema.create("errorStackTrace").setType(MetadataValueType.TEXT);
    connectorHttpDocument_errorStackTrace.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_errorsCount = connectorHttpDocumentSchema.create("errorsCount").setType(MetadataValueType.NUMBER);
    connectorHttpDocument_errorsCount.setUndeletable(true);
    connectorHttpDocument_errorsCount.setDefaultValue(0);
    MetadataBuilder connectorHttpDocument_estimatedSize = connectorHttpDocumentSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    connectorHttpDocument_estimatedSize.setSystemReserved(true);
    connectorHttpDocument_estimatedSize.setUndeletable(true);
    connectorHttpDocument_estimatedSize.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_fetchDelay = connectorHttpDocumentSchema.create("fetchDelay").setType(MetadataValueType.NUMBER);
    connectorHttpDocument_fetchDelay.setUndeletable(true);
    connectorHttpDocument_fetchDelay.setDefaultValue(10);
    MetadataBuilder connectorHttpDocument_fetched = connectorHttpDocumentSchema.create("fetched").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_fetched.setUndeletable(true);
    connectorHttpDocument_fetched.setDefaultValue(true);
    MetadataBuilder connectorHttpDocument_fetchedDateTime = connectorHttpDocumentSchema.create("fetchedDateTime").setType(MetadataValueType.DATE_TIME);
    connectorHttpDocument_fetchedDateTime.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_frequency = connectorHttpDocumentSchema.create("frequency").setType(MetadataValueType.ENUM);
    connectorHttpDocument_frequency.setUndeletable(true);
    connectorHttpDocument_frequency.defineAsEnum(FetchFrequency.class);
    MetadataBuilder connectorHttpDocument_hidden = connectorHttpDocumentSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_hidden.setSystemReserved(true);
    connectorHttpDocument_hidden.setUndeletable(true);
    connectorHttpDocument_hidden.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_id = connectorHttpDocumentSchema.create("id").setType(MetadataValueType.STRING);
    connectorHttpDocument_id.setDefaultRequirement(true);
    connectorHttpDocument_id.setSystemReserved(true);
    connectorHttpDocument_id.setUndeletable(true);
    connectorHttpDocument_id.setMultiLingual(false);
    connectorHttpDocument_id.setSearchable(true);
    connectorHttpDocument_id.setSortable(true);
    connectorHttpDocument_id.setUniqueValue(true);
    connectorHttpDocument_id.setUnmodifiable(true);
    MetadataBuilder connectorHttpDocument_inlinks = connectorHttpDocumentSchema.create("inlinks").setType(MetadataValueType.STRING);
    connectorHttpDocument_inlinks.setMultivalue(true);
    connectorHttpDocument_inlinks.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_language = connectorHttpDocumentSchema.create("language").setType(MetadataValueType.STRING);
    MetadataBuilder connectorHttpDocument_lastModified = connectorHttpDocumentSchema.create("lastModified").setType(MetadataValueType.DATE_TIME);
    connectorHttpDocument_lastModified.setUndeletable(true);
    connectorHttpDocument_lastModified.setSearchable(true);
    MetadataBuilder connectorHttpDocument_legacyIdentifier = connectorHttpDocumentSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    connectorHttpDocument_legacyIdentifier.setDefaultRequirement(true);
    connectorHttpDocument_legacyIdentifier.setSystemReserved(true);
    connectorHttpDocument_legacyIdentifier.setUndeletable(true);
    connectorHttpDocument_legacyIdentifier.setMultiLingual(false);
    connectorHttpDocument_legacyIdentifier.setSearchable(true);
    connectorHttpDocument_legacyIdentifier.setUniqueValue(true);
    connectorHttpDocument_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder connectorHttpDocument_level = connectorHttpDocumentSchema.create("level").setType(MetadataValueType.NUMBER);
    connectorHttpDocument_level.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_logicallyDeletedOn = connectorHttpDocumentSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    connectorHttpDocument_logicallyDeletedOn.setSystemReserved(true);
    connectorHttpDocument_logicallyDeletedOn.setUndeletable(true);
    connectorHttpDocument_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_manualTokens = connectorHttpDocumentSchema.create("manualTokens").setType(MetadataValueType.STRING);
    connectorHttpDocument_manualTokens.setMultivalue(true);
    connectorHttpDocument_manualTokens.setSystemReserved(true);
    connectorHttpDocument_manualTokens.setUndeletable(true);
    connectorHttpDocument_manualTokens.setMultiLingual(false);
    connectorHttpDocument_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorHttpDocument_markedForParsing = connectorHttpDocumentSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_markedForParsing.setSystemReserved(true);
    connectorHttpDocument_markedForParsing.setUndeletable(true);
    connectorHttpDocument_markedForParsing.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_markedForPreviewConversion = connectorHttpDocumentSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_markedForPreviewConversion.setSystemReserved(true);
    connectorHttpDocument_markedForPreviewConversion.setUndeletable(true);
    connectorHttpDocument_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_markedForReindexing = connectorHttpDocumentSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_markedForReindexing.setSystemReserved(true);
    connectorHttpDocument_markedForReindexing.setUndeletable(true);
    connectorHttpDocument_markedForReindexing.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_migrationDataVersion = connectorHttpDocumentSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    connectorHttpDocument_migrationDataVersion.setSystemReserved(true);
    connectorHttpDocument_migrationDataVersion.setUndeletable(true);
    connectorHttpDocument_migrationDataVersion.setMultiLingual(false);
    connectorHttpDocument_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder connectorHttpDocument_mimetype = connectorHttpDocumentSchema.create("mimetype").setType(MetadataValueType.STRING);
    connectorHttpDocument_mimetype.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_modifiedBy = connectorHttpDocumentSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    connectorHttpDocument_modifiedBy.setSystemReserved(true);
    connectorHttpDocument_modifiedBy.setUndeletable(true);
    connectorHttpDocument_modifiedBy.setMultiLingual(false);
    connectorHttpDocument_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorHttpDocument_modifiedOn = connectorHttpDocumentSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    connectorHttpDocument_modifiedOn.setSystemReserved(true);
    connectorHttpDocument_modifiedOn.setUndeletable(true);
    connectorHttpDocument_modifiedOn.setMultiLingual(false);
    connectorHttpDocument_modifiedOn.setSortable(true);
    MetadataBuilder connectorHttpDocument_neverFetch = connectorHttpDocumentSchema.create("neverFetch").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_neverFetch.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_nextFetch = connectorHttpDocumentSchema.create("nextFetch").setType(MetadataValueType.DATE_TIME);
    connectorHttpDocument_nextFetch.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_onDemand = connectorHttpDocumentSchema.create("onDemand").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_onDemand.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_outlinks = connectorHttpDocumentSchema.create("outlinks").setType(MetadataValueType.STRING);
    connectorHttpDocument_outlinks.setMultivalue(true);
    connectorHttpDocument_outlinks.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_parsedContent = connectorHttpDocumentSchema.create("parsedContent").setType(MetadataValueType.TEXT);
    connectorHttpDocument_parsedContent.setUndeletable(true);
    connectorHttpDocument_parsedContent.setSearchable(true);
    MetadataBuilder connectorHttpDocument_path = connectorHttpDocumentSchema.create("path").setType(MetadataValueType.STRING);
    connectorHttpDocument_path.setMultivalue(true);
    connectorHttpDocument_path.setSystemReserved(true);
    connectorHttpDocument_path.setUndeletable(true);
    connectorHttpDocument_path.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_pathParts = connectorHttpDocumentSchema.create("pathParts").setType(MetadataValueType.STRING);
    connectorHttpDocument_pathParts.setMultivalue(true);
    connectorHttpDocument_pathParts.setSystemReserved(true);
    connectorHttpDocument_pathParts.setUndeletable(true);
    connectorHttpDocument_pathParts.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_principalpath = connectorHttpDocumentSchema.create("principalpath").setType(MetadataValueType.STRING);
    connectorHttpDocument_principalpath.setSystemReserved(true);
    connectorHttpDocument_principalpath.setUndeletable(true);
    connectorHttpDocument_principalpath.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_priority = connectorHttpDocumentSchema.create("priority").setType(MetadataValueType.NUMBER);
    connectorHttpDocument_priority.setUndeletable(true);
    connectorHttpDocument_priority.setDefaultValue(0.5F);
    MetadataBuilder connectorHttpDocument_removedauthorizations = connectorHttpDocumentSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    connectorHttpDocument_removedauthorizations.setMultivalue(true);
    connectorHttpDocument_removedauthorizations.setSystemReserved(true);
    connectorHttpDocument_removedauthorizations.setUndeletable(true);
    connectorHttpDocument_removedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_schema = connectorHttpDocumentSchema.create("schema").setType(MetadataValueType.STRING);
    connectorHttpDocument_schema.setDefaultRequirement(true);
    connectorHttpDocument_schema.setSystemReserved(true);
    connectorHttpDocument_schema.setUndeletable(true);
    connectorHttpDocument_schema.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_searchable = connectorHttpDocumentSchema.create("searchable").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_searchable.setUndeletable(true);
    connectorHttpDocument_searchable.setDefaultValue(true);
    MetadataBuilder connectorHttpDocument_shareDenyTokens = connectorHttpDocumentSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    connectorHttpDocument_shareDenyTokens.setMultivalue(true);
    connectorHttpDocument_shareDenyTokens.setSystemReserved(true);
    connectorHttpDocument_shareDenyTokens.setUndeletable(true);
    connectorHttpDocument_shareDenyTokens.setMultiLingual(false);
    connectorHttpDocument_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorHttpDocument_shareTokens = connectorHttpDocumentSchema.create("shareTokens").setType(MetadataValueType.STRING);
    connectorHttpDocument_shareTokens.setMultivalue(true);
    connectorHttpDocument_shareTokens.setSystemReserved(true);
    connectorHttpDocument_shareTokens.setUndeletable(true);
    connectorHttpDocument_shareTokens.setMultiLingual(false);
    connectorHttpDocument_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorHttpDocument_status = connectorHttpDocumentSchema.create("status").setType(MetadataValueType.ENUM);
    connectorHttpDocument_status.setUndeletable(true);
    connectorHttpDocument_status.defineAsEnum(ConnectorDocumentStatus.class);
    MetadataBuilder connectorHttpDocument_thesaurusMatch = connectorHttpDocumentSchema.create("thesaurusMatch").setType(MetadataValueType.STRING);
    connectorHttpDocument_thesaurusMatch.setMultivalue(true);
    connectorHttpDocument_thesaurusMatch.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_title = connectorHttpDocumentSchema.create("title").setType(MetadataValueType.STRING);
    connectorHttpDocument_title.setUndeletable(true);
    connectorHttpDocument_title.setMultiLingual(false);
    connectorHttpDocument_title.setSchemaAutocomplete(true);
    connectorHttpDocument_title.setSearchable(true);
    MetadataBuilder connectorHttpDocument_tokens = connectorHttpDocumentSchema.create("tokens").setType(MetadataValueType.STRING);
    connectorHttpDocument_tokens.setMultivalue(true);
    connectorHttpDocument_tokens.setSystemReserved(true);
    connectorHttpDocument_tokens.setUndeletable(true);
    connectorHttpDocument_tokens.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_tokensHierarchy = connectorHttpDocumentSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    connectorHttpDocument_tokensHierarchy.setMultivalue(true);
    connectorHttpDocument_tokensHierarchy.setSystemReserved(true);
    connectorHttpDocument_tokensHierarchy.setUndeletable(true);
    connectorHttpDocument_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_traversalCode = connectorHttpDocumentSchema.create("traversalCode").setType(MetadataValueType.STRING);
    connectorHttpDocument_traversalCode.setDefaultRequirement(true);
    connectorHttpDocument_traversalCode.setUndeletable(true);
    MetadataBuilder connectorHttpDocument_url = connectorHttpDocumentSchema.create("url").setType(MetadataValueType.STRING);
    connectorHttpDocument_url.setDefaultRequirement(true);
    connectorHttpDocument_url.setUndeletable(true);
    connectorHttpDocument_url.setMultiLingual(false);
    MetadataBuilder connectorHttpDocument_visibleInTrees = connectorHttpDocumentSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    connectorHttpDocument_visibleInTrees.setSystemReserved(true);
    connectorHttpDocument_visibleInTrees.setUndeletable(true);
    connectorHttpDocument_visibleInTrees.setMultiLingual(false);
  }

  private void createConnectorSmbFolderSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder connectorSmbFolderSchemaType, MetadataSchemaBuilder connectorSmbFolderSchema) {
    MetadataBuilder connectorSmbFolder_allReferences = connectorSmbFolderSchema.create("allReferences").setType(MetadataValueType.STRING);
    connectorSmbFolder_allReferences.setMultivalue(true);
    connectorSmbFolder_allReferences.setSystemReserved(true);
    connectorSmbFolder_allReferences.setUndeletable(true);
    connectorSmbFolder_allReferences.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_allRemovedAuths = connectorSmbFolderSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    connectorSmbFolder_allRemovedAuths.setMultivalue(true);
    connectorSmbFolder_allRemovedAuths.setSystemReserved(true);
    connectorSmbFolder_allRemovedAuths.setUndeletable(true);
    connectorSmbFolder_allRemovedAuths.setEssential(true);
    connectorSmbFolder_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_attachedAncestors = connectorSmbFolderSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    connectorSmbFolder_attachedAncestors.setMultivalue(true);
    connectorSmbFolder_attachedAncestors.setSystemReserved(true);
    connectorSmbFolder_attachedAncestors.setUndeletable(true);
    connectorSmbFolder_attachedAncestors.setEssential(true);
    connectorSmbFolder_attachedAncestors.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_autocomplete = connectorSmbFolderSchema.create("autocomplete").setType(MetadataValueType.STRING);
    connectorSmbFolder_autocomplete.setMultivalue(true);
    connectorSmbFolder_autocomplete.setSystemReserved(true);
    connectorSmbFolder_autocomplete.setUndeletable(true);
    connectorSmbFolder_autocomplete.setEssential(true);
    connectorSmbFolder_autocomplete.setMultiLingual(true);
    MetadataBuilder connectorSmbFolder_caption = connectorSmbFolderSchema.create("caption").setType(MetadataValueType.STRING);
    connectorSmbFolder_caption.setSystemReserved(true);
    connectorSmbFolder_caption.setUndeletable(true);
    connectorSmbFolder_caption.setMultiLingual(false);
    connectorSmbFolder_caption.setSortable(true);
    MetadataBuilder connectorSmbFolder_connector = connectorSmbFolderSchema.create("connector").setType(MetadataValueType.REFERENCE);
    connectorSmbFolder_connector.setDefaultRequirement(true);
    connectorSmbFolder_connector.setUndeletable(true);
    connectorSmbFolder_connector.defineReferencesTo(asList(types.getSchema("connectorInstance_smb")));
    MetadataBuilder connectorSmbFolder_connectorType = connectorSmbFolderSchema.create("connectorType").setType(MetadataValueType.REFERENCE);
    connectorSmbFolder_connectorType.setDefaultRequirement(true);
    connectorSmbFolder_connectorType.setUndeletable(true);
    connectorSmbFolder_connectorType.defineReferencesTo(asList(types.getSchema("connectorType_default")));
    MetadataBuilder connectorSmbFolder_connectorUrl = connectorSmbFolderSchema.create("connectorUrl").setType(MetadataValueType.STRING);
    connectorSmbFolder_connectorUrl.setDefaultRequirement(true);
    connectorSmbFolder_connectorUrl.setUndeletable(true);
    connectorSmbFolder_connectorUrl.setEssentialInSummary(true);
    connectorSmbFolder_connectorUrl.setUniqueValue(true);
    MetadataBuilder connectorSmbFolder_createdBy = connectorSmbFolderSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    connectorSmbFolder_createdBy.setSystemReserved(true);
    connectorSmbFolder_createdBy.setUndeletable(true);
    connectorSmbFolder_createdBy.setMultiLingual(false);
    connectorSmbFolder_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorSmbFolder_createdOn = connectorSmbFolderSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    connectorSmbFolder_createdOn.setSystemReserved(true);
    connectorSmbFolder_createdOn.setUndeletable(true);
    connectorSmbFolder_createdOn.setMultiLingual(false);
    connectorSmbFolder_createdOn.setSortable(true);
    MetadataBuilder connectorSmbFolder_deleted = connectorSmbFolderSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_deleted.setSystemReserved(true);
    connectorSmbFolder_deleted.setUndeletable(true);
    connectorSmbFolder_deleted.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_denyTokens = connectorSmbFolderSchema.create("denyTokens").setType(MetadataValueType.STRING);
    connectorSmbFolder_denyTokens.setMultivalue(true);
    connectorSmbFolder_denyTokens.setSystemReserved(true);
    connectorSmbFolder_denyTokens.setUndeletable(true);
    connectorSmbFolder_denyTokens.setMultiLingual(false);
    connectorSmbFolder_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbFolder_detachedauthorizations = connectorSmbFolderSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_detachedauthorizations.setSystemReserved(true);
    connectorSmbFolder_detachedauthorizations.setUndeletable(true);
    connectorSmbFolder_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_errorCode = connectorSmbFolderSchema.create("errorCode").setType(MetadataValueType.STRING);
    connectorSmbFolder_errorCode.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_errorMessage = connectorSmbFolderSchema.create("errorMessage").setType(MetadataValueType.STRING);
    connectorSmbFolder_errorMessage.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_errorOnPhysicalDeletion = connectorSmbFolderSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_errorOnPhysicalDeletion.setSystemReserved(true);
    connectorSmbFolder_errorOnPhysicalDeletion.setUndeletable(true);
    connectorSmbFolder_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_errorStackTrace = connectorSmbFolderSchema.create("errorStackTrace").setType(MetadataValueType.TEXT);
    connectorSmbFolder_errorStackTrace.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_errorsCount = connectorSmbFolderSchema.create("errorsCount").setType(MetadataValueType.NUMBER);
    connectorSmbFolder_errorsCount.setUndeletable(true);
    connectorSmbFolder_errorsCount.setDefaultValue(0);
    MetadataBuilder connectorSmbFolder_estimatedSize = connectorSmbFolderSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    connectorSmbFolder_estimatedSize.setSystemReserved(true);
    connectorSmbFolder_estimatedSize.setUndeletable(true);
    connectorSmbFolder_estimatedSize.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_fetchDelay = connectorSmbFolderSchema.create("fetchDelay").setType(MetadataValueType.NUMBER);
    connectorSmbFolder_fetchDelay.setUndeletable(true);
    connectorSmbFolder_fetchDelay.setDefaultValue(10);
    MetadataBuilder connectorSmbFolder_fetched = connectorSmbFolderSchema.create("fetched").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_fetched.setUndeletable(true);
    connectorSmbFolder_fetched.setDefaultValue(true);
    MetadataBuilder connectorSmbFolder_fetchedDateTime = connectorSmbFolderSchema.create("fetchedDateTime").setType(MetadataValueType.DATE_TIME);
    connectorSmbFolder_fetchedDateTime.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_frequency = connectorSmbFolderSchema.create("frequency").setType(MetadataValueType.ENUM);
    connectorSmbFolder_frequency.setUndeletable(true);
    connectorSmbFolder_frequency.defineAsEnum(FetchFrequency.class);
    MetadataBuilder connectorSmbFolder_hidden = connectorSmbFolderSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_hidden.setSystemReserved(true);
    connectorSmbFolder_hidden.setUndeletable(true);
    connectorSmbFolder_hidden.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_id = connectorSmbFolderSchema.create("id").setType(MetadataValueType.STRING);
    connectorSmbFolder_id.setDefaultRequirement(true);
    connectorSmbFolder_id.setSystemReserved(true);
    connectorSmbFolder_id.setUndeletable(true);
    connectorSmbFolder_id.setMultiLingual(false);
    connectorSmbFolder_id.setSearchable(true);
    connectorSmbFolder_id.setSortable(true);
    connectorSmbFolder_id.setUniqueValue(true);
    connectorSmbFolder_id.setUnmodifiable(true);
    MetadataBuilder connectorSmbFolder_lastFetchAttempt = connectorSmbFolderSchema.create("lastFetchAttempt").setType(MetadataValueType.DATE_TIME);
    connectorSmbFolder_lastFetchAttempt.setUndeletable(true);
    connectorSmbFolder_lastFetchAttempt.setSearchable(true);
    MetadataBuilder connectorSmbFolder_lastFetchedStatus = connectorSmbFolderSchema.create("lastFetchedStatus").setType(MetadataValueType.ENUM);
    connectorSmbFolder_lastFetchedStatus.setUndeletable(true);
    connectorSmbFolder_lastFetchedStatus.setSearchable(true);
    connectorSmbFolder_lastFetchedStatus.defineAsEnum(LastFetchedStatus.class);
    MetadataBuilder connectorSmbFolder_lastModified = connectorSmbFolderSchema.create("lastModified").setType(MetadataValueType.DATE_TIME);
    connectorSmbFolder_lastModified.setUndeletable(true);
    connectorSmbFolder_lastModified.setSearchable(true);
    MetadataBuilder connectorSmbFolder_legacyIdentifier = connectorSmbFolderSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    connectorSmbFolder_legacyIdentifier.setDefaultRequirement(true);
    connectorSmbFolder_legacyIdentifier.setSystemReserved(true);
    connectorSmbFolder_legacyIdentifier.setUndeletable(true);
    connectorSmbFolder_legacyIdentifier.setMultiLingual(false);
    connectorSmbFolder_legacyIdentifier.setSearchable(true);
    connectorSmbFolder_legacyIdentifier.setUniqueValue(true);
    connectorSmbFolder_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder connectorSmbFolder_logicallyDeletedOn = connectorSmbFolderSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    connectorSmbFolder_logicallyDeletedOn.setSystemReserved(true);
    connectorSmbFolder_logicallyDeletedOn.setUndeletable(true);
    connectorSmbFolder_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_manualTokens = connectorSmbFolderSchema.create("manualTokens").setType(MetadataValueType.STRING);
    connectorSmbFolder_manualTokens.setMultivalue(true);
    connectorSmbFolder_manualTokens.setSystemReserved(true);
    connectorSmbFolder_manualTokens.setUndeletable(true);
    connectorSmbFolder_manualTokens.setMultiLingual(false);
    connectorSmbFolder_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbFolder_markedForParsing = connectorSmbFolderSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_markedForParsing.setSystemReserved(true);
    connectorSmbFolder_markedForParsing.setUndeletable(true);
    connectorSmbFolder_markedForParsing.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_markedForPreviewConversion = connectorSmbFolderSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_markedForPreviewConversion.setSystemReserved(true);
    connectorSmbFolder_markedForPreviewConversion.setUndeletable(true);
    connectorSmbFolder_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_markedForReindexing = connectorSmbFolderSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_markedForReindexing.setSystemReserved(true);
    connectorSmbFolder_markedForReindexing.setUndeletable(true);
    connectorSmbFolder_markedForReindexing.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_migrationDataVersion = connectorSmbFolderSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    connectorSmbFolder_migrationDataVersion.setSystemReserved(true);
    connectorSmbFolder_migrationDataVersion.setUndeletable(true);
    connectorSmbFolder_migrationDataVersion.setMultiLingual(false);
    connectorSmbFolder_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder connectorSmbFolder_mimetype = connectorSmbFolderSchema.create("mimetype").setType(MetadataValueType.STRING);
    connectorSmbFolder_mimetype.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_modifiedBy = connectorSmbFolderSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    connectorSmbFolder_modifiedBy.setSystemReserved(true);
    connectorSmbFolder_modifiedBy.setUndeletable(true);
    connectorSmbFolder_modifiedBy.setMultiLingual(false);
    connectorSmbFolder_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorSmbFolder_modifiedOn = connectorSmbFolderSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    connectorSmbFolder_modifiedOn.setSystemReserved(true);
    connectorSmbFolder_modifiedOn.setUndeletable(true);
    connectorSmbFolder_modifiedOn.setMultiLingual(false);
    connectorSmbFolder_modifiedOn.setSortable(true);
    MetadataBuilder connectorSmbFolder_neverFetch = connectorSmbFolderSchema.create("neverFetch").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_neverFetch.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_nextFetch = connectorSmbFolderSchema.create("nextFetch").setType(MetadataValueType.DATE_TIME);
    connectorSmbFolder_nextFetch.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_parentConnectorUrl = connectorSmbFolderSchema.create("parentConnectorUrl").setType(MetadataValueType.STRING);
    connectorSmbFolder_parentConnectorUrl.setUndeletable(true);
    connectorSmbFolder_parentConnectorUrl.setEssentialInSummary(true);
    MetadataBuilder connectorSmbFolder_parentUrl = connectorSmbFolderSchema.create("parentUrl").setType(MetadataValueType.STRING);
    connectorSmbFolder_parentUrl.setSystemReserved(true);
    connectorSmbFolder_parentUrl.setUndeletable(true);
    connectorSmbFolder_parentUrl.setEssentialInSummary(true);
    connectorSmbFolder_parentUrl.setSearchable(true);
    MetadataBuilder connectorSmbFolder_path = connectorSmbFolderSchema.create("path").setType(MetadataValueType.STRING);
    connectorSmbFolder_path.setMultivalue(true);
    connectorSmbFolder_path.setSystemReserved(true);
    connectorSmbFolder_path.setUndeletable(true);
    connectorSmbFolder_path.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_pathParts = connectorSmbFolderSchema.create("pathParts").setType(MetadataValueType.STRING);
    connectorSmbFolder_pathParts.setMultivalue(true);
    connectorSmbFolder_pathParts.setSystemReserved(true);
    connectorSmbFolder_pathParts.setUndeletable(true);
    connectorSmbFolder_pathParts.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_permissionsHash = connectorSmbFolderSchema.create("permissionsHash").setType(MetadataValueType.STRING);
    connectorSmbFolder_permissionsHash.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_principalpath = connectorSmbFolderSchema.create("principalpath").setType(MetadataValueType.STRING);
    connectorSmbFolder_principalpath.setSystemReserved(true);
    connectorSmbFolder_principalpath.setUndeletable(true);
    connectorSmbFolder_principalpath.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_removedauthorizations = connectorSmbFolderSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    connectorSmbFolder_removedauthorizations.setMultivalue(true);
    connectorSmbFolder_removedauthorizations.setSystemReserved(true);
    connectorSmbFolder_removedauthorizations.setUndeletable(true);
    connectorSmbFolder_removedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_schema = connectorSmbFolderSchema.create("schema").setType(MetadataValueType.STRING);
    connectorSmbFolder_schema.setDefaultRequirement(true);
    connectorSmbFolder_schema.setSystemReserved(true);
    connectorSmbFolder_schema.setUndeletable(true);
    connectorSmbFolder_schema.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_searchable = connectorSmbFolderSchema.create("searchable").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_searchable.setUndeletable(true);
    connectorSmbFolder_searchable.setDefaultValue(true);
    MetadataBuilder connectorSmbFolder_shareDenyTokens = connectorSmbFolderSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    connectorSmbFolder_shareDenyTokens.setMultivalue(true);
    connectorSmbFolder_shareDenyTokens.setSystemReserved(true);
    connectorSmbFolder_shareDenyTokens.setUndeletable(true);
    connectorSmbFolder_shareDenyTokens.setMultiLingual(false);
    connectorSmbFolder_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbFolder_shareTokens = connectorSmbFolderSchema.create("shareTokens").setType(MetadataValueType.STRING);
    connectorSmbFolder_shareTokens.setMultivalue(true);
    connectorSmbFolder_shareTokens.setSystemReserved(true);
    connectorSmbFolder_shareTokens.setUndeletable(true);
    connectorSmbFolder_shareTokens.setMultiLingual(false);
    connectorSmbFolder_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbFolder_status = connectorSmbFolderSchema.create("status").setType(MetadataValueType.ENUM);
    connectorSmbFolder_status.setUndeletable(true);
    connectorSmbFolder_status.defineAsEnum(ConnectorDocumentStatus.class);
    MetadataBuilder connectorSmbFolder_title = connectorSmbFolderSchema.create("title").setType(MetadataValueType.STRING);
    connectorSmbFolder_title.setUndeletable(true);
    connectorSmbFolder_title.setMultiLingual(false);
    connectorSmbFolder_title.setSchemaAutocomplete(true);
    connectorSmbFolder_title.setSearchable(true);
    MetadataBuilder connectorSmbFolder_tokens = connectorSmbFolderSchema.create("tokens").setType(MetadataValueType.STRING);
    connectorSmbFolder_tokens.setMultivalue(true);
    connectorSmbFolder_tokens.setSystemReserved(true);
    connectorSmbFolder_tokens.setUndeletable(true);
    connectorSmbFolder_tokens.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_tokensHierarchy = connectorSmbFolderSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    connectorSmbFolder_tokensHierarchy.setMultivalue(true);
    connectorSmbFolder_tokensHierarchy.setSystemReserved(true);
    connectorSmbFolder_tokensHierarchy.setUndeletable(true);
    connectorSmbFolder_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_traversalCode = connectorSmbFolderSchema.create("traversalCode").setType(MetadataValueType.STRING);
    connectorSmbFolder_traversalCode.setDefaultRequirement(true);
    connectorSmbFolder_traversalCode.setUndeletable(true);
    MetadataBuilder connectorSmbFolder_url = connectorSmbFolderSchema.create("url").setType(MetadataValueType.STRING);
    connectorSmbFolder_url.setDefaultRequirement(true);
    connectorSmbFolder_url.setUndeletable(true);
    connectorSmbFolder_url.setMultiLingual(false);
    MetadataBuilder connectorSmbFolder_visibleInTrees = connectorSmbFolderSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    connectorSmbFolder_visibleInTrees.setSystemReserved(true);
    connectorSmbFolder_visibleInTrees.setUndeletable(true);
    connectorSmbFolder_visibleInTrees.setMultiLingual(false);
  }

  private void createPrintableSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder printableSchemaType, MetadataSchemaBuilder printableSchema) {
  }

  private void createThesaurusConfigSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder thesaurusConfigSchemaType, MetadataSchemaBuilder thesaurusConfigSchema) {
  }

  private void createConnectorInstanceSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder connectorInstanceSchemaType, MetadataSchemaBuilder connectorInstance_httpSchema, MetadataSchemaBuilder connectorInstance_ldapSchema, MetadataSchemaBuilder connectorInstance_smbSchema, MetadataSchemaBuilder connectorInstanceSchema) {
    MetadataBuilder connectorInstance_http_authenticationScheme = connectorInstance_httpSchema.create("authenticationScheme").setType(MetadataValueType.ENUM);
    connectorInstance_http_authenticationScheme.setUndeletable(true);
    connectorInstance_http_authenticationScheme.defineAsEnum(AuthenticationScheme.class);
    MetadataBuilder connectorInstance_http_daysBeforeRefetching = connectorInstance_httpSchema.create("daysBeforeRefetching").setType(MetadataValueType.NUMBER);
    connectorInstance_http_daysBeforeRefetching.setDefaultRequirement(true);
    connectorInstance_http_daysBeforeRefetching.setUndeletable(true);
    connectorInstance_http_daysBeforeRefetching.setDefaultValue(5);
    MetadataBuilder connectorInstance_http_documentsPerJobs = connectorInstance_httpSchema.create("documentsPerJobs").setType(MetadataValueType.NUMBER);
    connectorInstance_http_documentsPerJobs.setDefaultRequirement(true);
    connectorInstance_http_documentsPerJobs.setUndeletable(true);
    connectorInstance_http_documentsPerJobs.setDefaultValue(10);
    MetadataBuilder connectorInstance_http_domain = connectorInstance_httpSchema.create("domain").setType(MetadataValueType.STRING);
    connectorInstance_http_domain.setUndeletable(true);
    MetadataBuilder connectorInstance_http_excludePatterns = connectorInstance_httpSchema.create("excludePatterns").setType(MetadataValueType.TEXT);
    connectorInstance_http_excludePatterns.setUndeletable(true);
    MetadataBuilder connectorInstance_http_includePatterns = connectorInstance_httpSchema.create("includePatterns").setType(MetadataValueType.TEXT);
    connectorInstance_http_includePatterns.setUndeletable(true);
    MetadataBuilder connectorInstance_http_jobsInParallel = connectorInstance_httpSchema.create("jobsInParallel").setType(MetadataValueType.NUMBER);
    connectorInstance_http_jobsInParallel.setDefaultRequirement(true);
    connectorInstance_http_jobsInParallel.setUndeletable(true);
    connectorInstance_http_jobsInParallel.setDefaultValue(1);
    MetadataBuilder connectorInstance_http_maxLevel = connectorInstance_httpSchema.create("maxLevel").setType(MetadataValueType.NUMBER);
    connectorInstance_http_maxLevel.setDefaultRequirement(true);
    connectorInstance_http_maxLevel.setUndeletable(true);
    connectorInstance_http_maxLevel.setDefaultValue(5);
    MetadataBuilder connectorInstance_http_onDemands = connectorInstance_httpSchema.create("onDemands").setType(MetadataValueType.TEXT);
    connectorInstance_http_onDemands.setUndeletable(true);
    MetadataBuilder connectorInstance_http_password = connectorInstance_httpSchema.create("password").setType(MetadataValueType.STRING);
    connectorInstance_http_password.setUndeletable(true);
    connectorInstance_http_password.setEncrypted(true);
    MetadataBuilder connectorInstance_http_seeds = connectorInstance_httpSchema.create("seeds").setType(MetadataValueType.TEXT);
    connectorInstance_http_seeds.setDefaultRequirement(true);
    connectorInstance_http_seeds.setUndeletable(true);
    MetadataBuilder connectorInstance_http_username = connectorInstance_httpSchema.create("username").setType(MetadataValueType.STRING);
    connectorInstance_http_username.setUndeletable(true);
    MetadataBuilder connectorInstance_ldap_address = connectorInstance_ldapSchema.create("address").setType(MetadataValueType.STRING);
    connectorInstance_ldap_address.setMultivalue(true);
    connectorInstance_ldap_address.setUndeletable(true);
    connectorInstance_ldap_address.setDefaultValue(asList("physicalDeliveryOfficeName", "streetAddress", "l", "postalCode", "st", "co", "c"));
    MetadataBuilder connectorInstance_ldap_company = connectorInstance_ldapSchema.create("company").setType(MetadataValueType.STRING);
    connectorInstance_ldap_company.setUndeletable(true);
    connectorInstance_ldap_company.setDefaultValue("company");
    MetadataBuilder connectorInstance_ldap_connectionUsername = connectorInstance_ldapSchema.create("connectionUsername").setType(MetadataValueType.STRING);
    connectorInstance_ldap_connectionUsername.setDefaultRequirement(true);
    connectorInstance_ldap_connectionUsername.setUndeletable(true);
    MetadataBuilder connectorInstance_ldap_department = connectorInstance_ldapSchema.create("department").setType(MetadataValueType.STRING);
    connectorInstance_ldap_department.setUndeletable(true);
    connectorInstance_ldap_department.setDefaultValue("department");
    MetadataBuilder connectorInstance_ldap_directoryType = connectorInstance_ldapSchema.create("directoryType").setType(MetadataValueType.ENUM);
    connectorInstance_ldap_directoryType.setDefaultRequirement(true);
    connectorInstance_ldap_directoryType.setSystemReserved(true);
    connectorInstance_ldap_directoryType.setUndeletable(true);
    connectorInstance_ldap_directoryType.setDefaultValue(DirectoryType.ACTIVE_DIRECTORY);
    connectorInstance_ldap_directoryType.defineAsEnum(DirectoryType.class);
    MetadataBuilder connectorInstance_ldap_displayName = connectorInstance_ldapSchema.create("displayName").setType(MetadataValueType.STRING);
    connectorInstance_ldap_displayName.setUndeletable(true);
    connectorInstance_ldap_displayName.setDefaultValue("cn");
    MetadataBuilder connectorInstance_ldap_dn = connectorInstance_ldapSchema.create("dn").setType(MetadataValueType.STRING);
    connectorInstance_ldap_dn.setDefaultRequirement(true);
    connectorInstance_ldap_dn.setUndeletable(true);
    connectorInstance_ldap_dn.setDefaultValue("distinguishedName");
    MetadataBuilder connectorInstance_ldap_documentsPerJob = connectorInstance_ldapSchema.create("documentsPerJob").setType(MetadataValueType.NUMBER);
    connectorInstance_ldap_documentsPerJob.setUndeletable(true);
    connectorInstance_ldap_documentsPerJob.setDefaultValue(10);
    MetadataBuilder connectorInstance_ldap_email = connectorInstance_ldapSchema.create("email").setType(MetadataValueType.STRING);
    connectorInstance_ldap_email.setUndeletable(true);
    connectorInstance_ldap_email.setDefaultValue("mail");
    MetadataBuilder connectorInstance_ldap_excludeRegex = connectorInstance_ldapSchema.create("excludeRegex").setType(MetadataValueType.STRING);
    connectorInstance_ldap_excludeRegex.setUndeletable(true);
    MetadataBuilder connectorInstance_ldap_fetchComputers = connectorInstance_ldapSchema.create("fetchComputers").setType(MetadataValueType.BOOLEAN);
    connectorInstance_ldap_fetchComputers.setSystemReserved(true);
    connectorInstance_ldap_fetchComputers.setUndeletable(true);
    MetadataBuilder connectorInstance_ldap_fetchGroups = connectorInstance_ldapSchema.create("fetchGroups").setType(MetadataValueType.BOOLEAN);
    connectorInstance_ldap_fetchGroups.setSystemReserved(true);
    connectorInstance_ldap_fetchGroups.setUndeletable(true);
    MetadataBuilder connectorInstance_ldap_fetchUsers = connectorInstance_ldapSchema.create("fetchUsers").setType(MetadataValueType.BOOLEAN);
    connectorInstance_ldap_fetchUsers.setSystemReserved(true);
    connectorInstance_ldap_fetchUsers.setUndeletable(true);
    connectorInstance_ldap_fetchUsers.setDefaultValue(true);
    MetadataBuilder connectorInstance_ldap_firstName = connectorInstance_ldapSchema.create("firstName").setType(MetadataValueType.STRING);
    connectorInstance_ldap_firstName.setUndeletable(true);
    connectorInstance_ldap_firstName.setDefaultValue("givenName");
    MetadataBuilder connectorInstance_ldap_followReferences = connectorInstance_ldapSchema.create("followReferences").setType(MetadataValueType.BOOLEAN);
    connectorInstance_ldap_followReferences.setUndeletable(true);
    MetadataBuilder connectorInstance_ldap_includeRegex = connectorInstance_ldapSchema.create("includeRegex").setType(MetadataValueType.STRING);
    connectorInstance_ldap_includeRegex.setUndeletable(true);
    MetadataBuilder connectorInstance_ldap_jobTitle = connectorInstance_ldapSchema.create("jobTitle").setType(MetadataValueType.STRING);
    connectorInstance_ldap_jobTitle.setUndeletable(true);
    connectorInstance_ldap_jobTitle.setDefaultValue("title");
    MetadataBuilder connectorInstance_ldap_jobsInParallel = connectorInstance_ldapSchema.create("jobsInParallel").setType(MetadataValueType.NUMBER);
    connectorInstance_ldap_jobsInParallel.setUndeletable(true);
    connectorInstance_ldap_jobsInParallel.setDefaultValue(1);
    MetadataBuilder connectorInstance_ldap_lastName = connectorInstance_ldapSchema.create("lastName").setType(MetadataValueType.STRING);
    connectorInstance_ldap_lastName.setUndeletable(true);
    connectorInstance_ldap_lastName.setDefaultValue("sn");
    MetadataBuilder connectorInstance_ldap_manager = connectorInstance_ldapSchema.create("manager").setType(MetadataValueType.STRING);
    connectorInstance_ldap_manager.setUndeletable(true);
    connectorInstance_ldap_manager.setDefaultValue("manager");
    MetadataBuilder connectorInstance_ldap_password = connectorInstance_ldapSchema.create("password").setType(MetadataValueType.STRING);
    connectorInstance_ldap_password.setDefaultRequirement(true);
    connectorInstance_ldap_password.setUndeletable(true);
    connectorInstance_ldap_password.setEncrypted(true);
    MetadataBuilder connectorInstance_ldap_telephone = connectorInstance_ldapSchema.create("telephone").setType(MetadataValueType.STRING);
    connectorInstance_ldap_telephone.setMultivalue(true);
    connectorInstance_ldap_telephone.setUndeletable(true);
    connectorInstance_ldap_telephone.setDefaultValue(asList("telephoneNumber", "mobile", "ipPhone"));
    MetadataBuilder connectorInstance_ldap_url = connectorInstance_ldapSchema.create("url").setType(MetadataValueType.STRING);
    connectorInstance_ldap_url.setMultivalue(true);
    connectorInstance_ldap_url.setDefaultRequirement(true);
    connectorInstance_ldap_url.setUndeletable(true);
    connectorInstance_ldap_url.setMultiLingual(false);
    MetadataBuilder connectorInstance_ldap_username = connectorInstance_ldapSchema.create("username").setType(MetadataValueType.STRING);
    connectorInstance_ldap_username.setUndeletable(true);
    connectorInstance_ldap_username.setDefaultValue("sAMAccountName");
    MetadataBuilder connectorInstance_ldap_usersBaseContextList = connectorInstance_ldapSchema.create("usersBaseContextList").setType(MetadataValueType.STRING);
    connectorInstance_ldap_usersBaseContextList.setMultivalue(true);
    connectorInstance_ldap_usersBaseContextList.setDefaultRequirement(true);
    connectorInstance_ldap_usersBaseContextList.setUndeletable(true);
    MetadataBuilder connectorInstance_smb_domain = connectorInstance_smbSchema.create("domain").setType(MetadataValueType.STRING);
    connectorInstance_smb_domain.setUndeletable(true);
    MetadataBuilder connectorInstance_smb_exclusions = connectorInstance_smbSchema.create("exclusions").setType(MetadataValueType.STRING);
    connectorInstance_smb_exclusions.setMultivalue(true);
    connectorInstance_smb_exclusions.setUndeletable(true);
    MetadataBuilder connectorInstance_smb_inclusions = connectorInstance_smbSchema.create("inclusions").setType(MetadataValueType.STRING);
    connectorInstance_smb_inclusions.setMultivalue(true);
    connectorInstance_smb_inclusions.setUndeletable(true);
    MetadataBuilder connectorInstance_smb_password = connectorInstance_smbSchema.create("password").setType(MetadataValueType.STRING);
    connectorInstance_smb_password.setUndeletable(true);
    connectorInstance_smb_password.setEncrypted(true);
    MetadataBuilder connectorInstance_smb_resumeUrl = connectorInstance_smbSchema.create("resumeUrl").setType(MetadataValueType.STRING);
    connectorInstance_smb_resumeUrl.setUndeletable(true);
    MetadataBuilder connectorInstance_smb_skipContentAndACL = connectorInstance_smbSchema.create("skipContentAndACL").setType(MetadataValueType.BOOLEAN);
    connectorInstance_smb_skipContentAndACL.setDefaultValue(false);
    MetadataBuilder connectorInstance_smb_skipShareAccessControl = connectorInstance_smbSchema.create("skipShareAccessControl").setType(MetadataValueType.BOOLEAN);
    connectorInstance_smb_skipShareAccessControl.setDefaultValue(false);
    MetadataBuilder connectorInstance_smb_smbSeeds = connectorInstance_smbSchema.create("smbSeeds").setType(MetadataValueType.STRING);
    connectorInstance_smb_smbSeeds.setMultivalue(true);
    connectorInstance_smb_smbSeeds.setDefaultRequirement(true);
    connectorInstance_smb_smbSeeds.setUndeletable(true);
    MetadataBuilder connectorInstance_smb_username = connectorInstance_smbSchema.create("username").setType(MetadataValueType.STRING);
    connectorInstance_smb_username.setDefaultRequirement(true);
    connectorInstance_smb_username.setUndeletable(true);
    MetadataBuilder connectorInstance_allReferences = connectorInstanceSchema.create("allReferences").setType(MetadataValueType.STRING);
    connectorInstance_allReferences.setMultivalue(true);
    connectorInstance_allReferences.setSystemReserved(true);
    connectorInstance_allReferences.setUndeletable(true);
    connectorInstance_allReferences.setMultiLingual(false);
    MetadataBuilder connectorInstance_allRemovedAuths = connectorInstanceSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    connectorInstance_allRemovedAuths.setMultivalue(true);
    connectorInstance_allRemovedAuths.setSystemReserved(true);
    connectorInstance_allRemovedAuths.setUndeletable(true);
    connectorInstance_allRemovedAuths.setEssential(true);
    connectorInstance_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder connectorInstance_attachedAncestors = connectorInstanceSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    connectorInstance_attachedAncestors.setMultivalue(true);
    connectorInstance_attachedAncestors.setSystemReserved(true);
    connectorInstance_attachedAncestors.setUndeletable(true);
    connectorInstance_attachedAncestors.setEssential(true);
    connectorInstance_attachedAncestors.setMultiLingual(false);
    MetadataBuilder connectorInstance_autocomplete = connectorInstanceSchema.create("autocomplete").setType(MetadataValueType.STRING);
    connectorInstance_autocomplete.setMultivalue(true);
    connectorInstance_autocomplete.setSystemReserved(true);
    connectorInstance_autocomplete.setUndeletable(true);
    connectorInstance_autocomplete.setEssential(true);
    connectorInstance_autocomplete.setMultiLingual(true);
    MetadataBuilder connectorInstance_availableFields = connectorInstanceSchema.create("availableFields").setType(MetadataValueType.STRUCTURE);
    connectorInstance_availableFields.setMultivalue(true);
    connectorInstance_availableFields.setUndeletable(true);
    connectorInstance_availableFields.defineStructureFactory(ConnectorFieldFactory.class);
    connectorInstance_availableFields.defineValidators().add(ConnectorFieldValidator.class);
    MetadataBuilder connectorInstance_caption = connectorInstanceSchema.create("caption").setType(MetadataValueType.STRING);
    connectorInstance_caption.setSystemReserved(true);
    connectorInstance_caption.setUndeletable(true);
    connectorInstance_caption.setMultiLingual(false);
    connectorInstance_caption.setSortable(true);
    MetadataBuilder connectorInstance_code = connectorInstanceSchema.create("code").setType(MetadataValueType.STRING);
    connectorInstance_code.setDefaultRequirement(true);
    connectorInstance_code.setUndeletable(true);
    connectorInstance_code.setEssential(true);
    connectorInstance_code.setUniqueValue(true);
    MetadataBuilder connectorInstance_connectorType = connectorInstanceSchema.create("connectorType").setType(MetadataValueType.REFERENCE);
    connectorInstance_connectorType.setDefaultRequirement(true);
    connectorInstance_connectorType.setUndeletable(true);
    connectorInstance_connectorType.defineReferencesTo(types.getSchemaType("connectorType"));
    MetadataBuilder connectorInstance_createdBy = connectorInstanceSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    connectorInstance_createdBy.setSystemReserved(true);
    connectorInstance_createdBy.setUndeletable(true);
    connectorInstance_createdBy.setMultiLingual(false);
    connectorInstance_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorInstance_createdOn = connectorInstanceSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    connectorInstance_createdOn.setSystemReserved(true);
    connectorInstance_createdOn.setUndeletable(true);
    connectorInstance_createdOn.setMultiLingual(false);
    connectorInstance_createdOn.setSortable(true);
    MetadataBuilder connectorInstance_deleted = connectorInstanceSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    connectorInstance_deleted.setSystemReserved(true);
    connectorInstance_deleted.setUndeletable(true);
    connectorInstance_deleted.setMultiLingual(false);
    MetadataBuilder connectorInstance_denyTokens = connectorInstanceSchema.create("denyTokens").setType(MetadataValueType.STRING);
    connectorInstance_denyTokens.setMultivalue(true);
    connectorInstance_denyTokens.setSystemReserved(true);
    connectorInstance_denyTokens.setUndeletable(true);
    connectorInstance_denyTokens.setMultiLingual(false);
    connectorInstance_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorInstance_detachedauthorizations = connectorInstanceSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    connectorInstance_detachedauthorizations.setSystemReserved(true);
    connectorInstance_detachedauthorizations.setUndeletable(true);
    connectorInstance_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorInstance_enabled = connectorInstanceSchema.create("enabled").setType(MetadataValueType.BOOLEAN);
    connectorInstance_enabled.setUndeletable(true);
    connectorInstance_enabled.setDefaultValue(true);
    MetadataBuilder connectorInstance_errorOnPhysicalDeletion = connectorInstanceSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    connectorInstance_errorOnPhysicalDeletion.setSystemReserved(true);
    connectorInstance_errorOnPhysicalDeletion.setUndeletable(true);
    connectorInstance_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder connectorInstance_estimatedSize = connectorInstanceSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    connectorInstance_estimatedSize.setSystemReserved(true);
    connectorInstance_estimatedSize.setUndeletable(true);
    connectorInstance_estimatedSize.setMultiLingual(false);
    MetadataBuilder connectorInstance_hidden = connectorInstanceSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    connectorInstance_hidden.setSystemReserved(true);
    connectorInstance_hidden.setUndeletable(true);
    connectorInstance_hidden.setMultiLingual(false);
    MetadataBuilder connectorInstance_id = connectorInstanceSchema.create("id").setType(MetadataValueType.STRING);
    connectorInstance_id.setDefaultRequirement(true);
    connectorInstance_id.setSystemReserved(true);
    connectorInstance_id.setUndeletable(true);
    connectorInstance_id.setMultiLingual(false);
    connectorInstance_id.setSearchable(true);
    connectorInstance_id.setSortable(true);
    connectorInstance_id.setUniqueValue(true);
    connectorInstance_id.setUnmodifiable(true);
    MetadataBuilder connectorInstance_lastTraversalOn = connectorInstanceSchema.create("lastTraversalOn").setType(MetadataValueType.DATE_TIME);
    connectorInstance_lastTraversalOn.setUndeletable(true);
    MetadataBuilder connectorInstance_legacyIdentifier = connectorInstanceSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    connectorInstance_legacyIdentifier.setDefaultRequirement(true);
    connectorInstance_legacyIdentifier.setSystemReserved(true);
    connectorInstance_legacyIdentifier.setUndeletable(true);
    connectorInstance_legacyIdentifier.setMultiLingual(false);
    connectorInstance_legacyIdentifier.setSearchable(true);
    connectorInstance_legacyIdentifier.setUniqueValue(true);
    connectorInstance_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder connectorInstance_logicallyDeletedOn = connectorInstanceSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    connectorInstance_logicallyDeletedOn.setSystemReserved(true);
    connectorInstance_logicallyDeletedOn.setUndeletable(true);
    connectorInstance_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder connectorInstance_manualTokens = connectorInstanceSchema.create("manualTokens").setType(MetadataValueType.STRING);
    connectorInstance_manualTokens.setMultivalue(true);
    connectorInstance_manualTokens.setSystemReserved(true);
    connectorInstance_manualTokens.setUndeletable(true);
    connectorInstance_manualTokens.setMultiLingual(false);
    connectorInstance_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorInstance_markedForParsing = connectorInstanceSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    connectorInstance_markedForParsing.setSystemReserved(true);
    connectorInstance_markedForParsing.setUndeletable(true);
    connectorInstance_markedForParsing.setMultiLingual(false);
    MetadataBuilder connectorInstance_markedForPreviewConversion = connectorInstanceSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    connectorInstance_markedForPreviewConversion.setSystemReserved(true);
    connectorInstance_markedForPreviewConversion.setUndeletable(true);
    connectorInstance_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder connectorInstance_markedForReindexing = connectorInstanceSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    connectorInstance_markedForReindexing.setSystemReserved(true);
    connectorInstance_markedForReindexing.setUndeletable(true);
    connectorInstance_markedForReindexing.setMultiLingual(false);
    MetadataBuilder connectorInstance_migrationDataVersion = connectorInstanceSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    connectorInstance_migrationDataVersion.setSystemReserved(true);
    connectorInstance_migrationDataVersion.setUndeletable(true);
    connectorInstance_migrationDataVersion.setMultiLingual(false);
    connectorInstance_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder connectorInstance_modifiedBy = connectorInstanceSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    connectorInstance_modifiedBy.setSystemReserved(true);
    connectorInstance_modifiedBy.setUndeletable(true);
    connectorInstance_modifiedBy.setMultiLingual(false);
    connectorInstance_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorInstance_modifiedOn = connectorInstanceSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    connectorInstance_modifiedOn.setSystemReserved(true);
    connectorInstance_modifiedOn.setUndeletable(true);
    connectorInstance_modifiedOn.setMultiLingual(false);
    connectorInstance_modifiedOn.setSortable(true);
    MetadataBuilder connectorInstance_path = connectorInstanceSchema.create("path").setType(MetadataValueType.STRING);
    connectorInstance_path.setMultivalue(true);
    connectorInstance_path.setSystemReserved(true);
    connectorInstance_path.setUndeletable(true);
    connectorInstance_path.setMultiLingual(false);
    MetadataBuilder connectorInstance_pathParts = connectorInstanceSchema.create("pathParts").setType(MetadataValueType.STRING);
    connectorInstance_pathParts.setMultivalue(true);
    connectorInstance_pathParts.setSystemReserved(true);
    connectorInstance_pathParts.setUndeletable(true);
    connectorInstance_pathParts.setMultiLingual(false);
    MetadataBuilder connectorInstance_principalpath = connectorInstanceSchema.create("principalpath").setType(MetadataValueType.STRING);
    connectorInstance_principalpath.setSystemReserved(true);
    connectorInstance_principalpath.setUndeletable(true);
    connectorInstance_principalpath.setMultiLingual(false);
    MetadataBuilder connectorInstance_propertiesMapping = connectorInstanceSchema.create("propertiesMapping").setType(MetadataValueType.STRUCTURE);
    connectorInstance_propertiesMapping.setUndeletable(true);
    connectorInstance_propertiesMapping.defineStructureFactory(MapStringListStringStructureFactory.class);
    MetadataBuilder connectorInstance_removedauthorizations = connectorInstanceSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    connectorInstance_removedauthorizations.setMultivalue(true);
    connectorInstance_removedauthorizations.setSystemReserved(true);
    connectorInstance_removedauthorizations.setUndeletable(true);
    connectorInstance_removedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorInstance_schema = connectorInstanceSchema.create("schema").setType(MetadataValueType.STRING);
    connectorInstance_schema.setDefaultRequirement(true);
    connectorInstance_schema.setSystemReserved(true);
    connectorInstance_schema.setUndeletable(true);
    connectorInstance_schema.setMultiLingual(false);
    MetadataBuilder connectorInstance_shareDenyTokens = connectorInstanceSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    connectorInstance_shareDenyTokens.setMultivalue(true);
    connectorInstance_shareDenyTokens.setSystemReserved(true);
    connectorInstance_shareDenyTokens.setUndeletable(true);
    connectorInstance_shareDenyTokens.setMultiLingual(false);
    connectorInstance_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorInstance_shareTokens = connectorInstanceSchema.create("shareTokens").setType(MetadataValueType.STRING);
    connectorInstance_shareTokens.setMultivalue(true);
    connectorInstance_shareTokens.setSystemReserved(true);
    connectorInstance_shareTokens.setUndeletable(true);
    connectorInstance_shareTokens.setMultiLingual(false);
    connectorInstance_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorInstance_title = connectorInstanceSchema.create("title").setType(MetadataValueType.STRING);
    connectorInstance_title.setDefaultRequirement(true);
    connectorInstance_title.setUndeletable(true);
    connectorInstance_title.setMultiLingual(true);
    connectorInstance_title.setSchemaAutocomplete(true);
    connectorInstance_title.setSearchable(true);
    MetadataBuilder connectorInstance_tokens = connectorInstanceSchema.create("tokens").setType(MetadataValueType.STRING);
    connectorInstance_tokens.setMultivalue(true);
    connectorInstance_tokens.setSystemReserved(true);
    connectorInstance_tokens.setUndeletable(true);
    connectorInstance_tokens.setMultiLingual(false);
    MetadataBuilder connectorInstance_tokensHierarchy = connectorInstanceSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    connectorInstance_tokensHierarchy.setMultivalue(true);
    connectorInstance_tokensHierarchy.setSystemReserved(true);
    connectorInstance_tokensHierarchy.setUndeletable(true);
    connectorInstance_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder connectorInstance_traversalCode = connectorInstanceSchema.create("traversalCode").setType(MetadataValueType.STRING);
    connectorInstance_traversalCode.setUndeletable(true);
    MetadataBuilder connectorInstance_traversalSchedule = connectorInstanceSchema.create("traversalSchedule").setType(MetadataValueType.STRUCTURE);
    connectorInstance_traversalSchedule.setMultivalue(true);
    connectorInstance_traversalSchedule.setUndeletable(true);
    connectorInstance_traversalSchedule.defineStructureFactory(TraversalScheduleFactory.class);
    MetadataBuilder connectorInstance_visibleInTrees = connectorInstanceSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    connectorInstance_visibleInTrees.setSystemReserved(true);
    connectorInstance_visibleInTrees.setUndeletable(true);
    connectorInstance_visibleInTrees.setMultiLingual(false);
    MetadataBuilder connectorInstance_http_allReferences = connectorInstance_httpSchema.get("allReferences");
    MetadataBuilder connectorInstance_http_allRemovedAuths = connectorInstance_httpSchema.get("allRemovedAuths");
    MetadataBuilder connectorInstance_http_attachedAncestors = connectorInstance_httpSchema.get("attachedAncestors");
    MetadataBuilder connectorInstance_http_autocomplete = connectorInstance_httpSchema.get("autocomplete");
    MetadataBuilder connectorInstance_http_availableFields = connectorInstance_httpSchema.get("availableFields");
    MetadataBuilder connectorInstance_http_caption = connectorInstance_httpSchema.get("caption");
    MetadataBuilder connectorInstance_http_code = connectorInstance_httpSchema.get("code");
    MetadataBuilder connectorInstance_http_connectorType = connectorInstance_httpSchema.get("connectorType");
    MetadataBuilder connectorInstance_http_createdBy = connectorInstance_httpSchema.get("createdBy");
    MetadataBuilder connectorInstance_http_createdOn = connectorInstance_httpSchema.get("createdOn");
    MetadataBuilder connectorInstance_http_deleted = connectorInstance_httpSchema.get("deleted");
    MetadataBuilder connectorInstance_http_denyTokens = connectorInstance_httpSchema.get("denyTokens");
    MetadataBuilder connectorInstance_http_detachedauthorizations = connectorInstance_httpSchema.get("detachedauthorizations");
    MetadataBuilder connectorInstance_http_enabled = connectorInstance_httpSchema.get("enabled");
    MetadataBuilder connectorInstance_http_errorOnPhysicalDeletion = connectorInstance_httpSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder connectorInstance_http_estimatedSize = connectorInstance_httpSchema.get("estimatedSize");
    MetadataBuilder connectorInstance_http_hidden = connectorInstance_httpSchema.get("hidden");
    MetadataBuilder connectorInstance_http_id = connectorInstance_httpSchema.get("id");
    MetadataBuilder connectorInstance_http_lastTraversalOn = connectorInstance_httpSchema.get("lastTraversalOn");
    MetadataBuilder connectorInstance_http_legacyIdentifier = connectorInstance_httpSchema.get("legacyIdentifier");
    MetadataBuilder connectorInstance_http_logicallyDeletedOn = connectorInstance_httpSchema.get("logicallyDeletedOn");
    MetadataBuilder connectorInstance_http_manualTokens = connectorInstance_httpSchema.get("manualTokens");
    MetadataBuilder connectorInstance_http_markedForParsing = connectorInstance_httpSchema.get("markedForParsing");
    MetadataBuilder connectorInstance_http_markedForPreviewConversion = connectorInstance_httpSchema.get("markedForPreviewConversion");
    MetadataBuilder connectorInstance_http_markedForReindexing = connectorInstance_httpSchema.get("markedForReindexing");
    MetadataBuilder connectorInstance_http_migrationDataVersion = connectorInstance_httpSchema.get("migrationDataVersion");
    MetadataBuilder connectorInstance_http_modifiedBy = connectorInstance_httpSchema.get("modifiedBy");
    MetadataBuilder connectorInstance_http_modifiedOn = connectorInstance_httpSchema.get("modifiedOn");
    MetadataBuilder connectorInstance_http_path = connectorInstance_httpSchema.get("path");
    MetadataBuilder connectorInstance_http_pathParts = connectorInstance_httpSchema.get("pathParts");
    MetadataBuilder connectorInstance_http_principalpath = connectorInstance_httpSchema.get("principalpath");
    MetadataBuilder connectorInstance_http_propertiesMapping = connectorInstance_httpSchema.get("propertiesMapping");
    MetadataBuilder connectorInstance_http_removedauthorizations = connectorInstance_httpSchema.get("removedauthorizations");
    MetadataBuilder connectorInstance_http_schema = connectorInstance_httpSchema.get("schema");
    MetadataBuilder connectorInstance_http_shareDenyTokens = connectorInstance_httpSchema.get("shareDenyTokens");
    MetadataBuilder connectorInstance_http_shareTokens = connectorInstance_httpSchema.get("shareTokens");
    MetadataBuilder connectorInstance_http_title = connectorInstance_httpSchema.get("title");
    MetadataBuilder connectorInstance_http_tokens = connectorInstance_httpSchema.get("tokens");
    MetadataBuilder connectorInstance_http_tokensHierarchy = connectorInstance_httpSchema.get("tokensHierarchy");
    MetadataBuilder connectorInstance_http_traversalCode = connectorInstance_httpSchema.get("traversalCode");
    MetadataBuilder connectorInstance_http_traversalSchedule = connectorInstance_httpSchema.get("traversalSchedule");
    MetadataBuilder connectorInstance_http_visibleInTrees = connectorInstance_httpSchema.get("visibleInTrees");
    MetadataBuilder connectorInstance_ldap_allReferences = connectorInstance_ldapSchema.get("allReferences");
    MetadataBuilder connectorInstance_ldap_allRemovedAuths = connectorInstance_ldapSchema.get("allRemovedAuths");
    MetadataBuilder connectorInstance_ldap_attachedAncestors = connectorInstance_ldapSchema.get("attachedAncestors");
    MetadataBuilder connectorInstance_ldap_autocomplete = connectorInstance_ldapSchema.get("autocomplete");
    MetadataBuilder connectorInstance_ldap_availableFields = connectorInstance_ldapSchema.get("availableFields");
    MetadataBuilder connectorInstance_ldap_caption = connectorInstance_ldapSchema.get("caption");
    MetadataBuilder connectorInstance_ldap_code = connectorInstance_ldapSchema.get("code");
    MetadataBuilder connectorInstance_ldap_connectorType = connectorInstance_ldapSchema.get("connectorType");
    MetadataBuilder connectorInstance_ldap_createdBy = connectorInstance_ldapSchema.get("createdBy");
    MetadataBuilder connectorInstance_ldap_createdOn = connectorInstance_ldapSchema.get("createdOn");
    MetadataBuilder connectorInstance_ldap_deleted = connectorInstance_ldapSchema.get("deleted");
    MetadataBuilder connectorInstance_ldap_denyTokens = connectorInstance_ldapSchema.get("denyTokens");
    MetadataBuilder connectorInstance_ldap_detachedauthorizations = connectorInstance_ldapSchema.get("detachedauthorizations");
    MetadataBuilder connectorInstance_ldap_enabled = connectorInstance_ldapSchema.get("enabled");
    MetadataBuilder connectorInstance_ldap_errorOnPhysicalDeletion = connectorInstance_ldapSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder connectorInstance_ldap_estimatedSize = connectorInstance_ldapSchema.get("estimatedSize");
    MetadataBuilder connectorInstance_ldap_hidden = connectorInstance_ldapSchema.get("hidden");
    MetadataBuilder connectorInstance_ldap_id = connectorInstance_ldapSchema.get("id");
    MetadataBuilder connectorInstance_ldap_lastTraversalOn = connectorInstance_ldapSchema.get("lastTraversalOn");
    MetadataBuilder connectorInstance_ldap_legacyIdentifier = connectorInstance_ldapSchema.get("legacyIdentifier");
    MetadataBuilder connectorInstance_ldap_logicallyDeletedOn = connectorInstance_ldapSchema.get("logicallyDeletedOn");
    MetadataBuilder connectorInstance_ldap_manualTokens = connectorInstance_ldapSchema.get("manualTokens");
    MetadataBuilder connectorInstance_ldap_markedForParsing = connectorInstance_ldapSchema.get("markedForParsing");
    MetadataBuilder connectorInstance_ldap_markedForPreviewConversion = connectorInstance_ldapSchema.get("markedForPreviewConversion");
    MetadataBuilder connectorInstance_ldap_markedForReindexing = connectorInstance_ldapSchema.get("markedForReindexing");
    MetadataBuilder connectorInstance_ldap_migrationDataVersion = connectorInstance_ldapSchema.get("migrationDataVersion");
    MetadataBuilder connectorInstance_ldap_modifiedBy = connectorInstance_ldapSchema.get("modifiedBy");
    MetadataBuilder connectorInstance_ldap_modifiedOn = connectorInstance_ldapSchema.get("modifiedOn");
    MetadataBuilder connectorInstance_ldap_path = connectorInstance_ldapSchema.get("path");
    MetadataBuilder connectorInstance_ldap_pathParts = connectorInstance_ldapSchema.get("pathParts");
    MetadataBuilder connectorInstance_ldap_principalpath = connectorInstance_ldapSchema.get("principalpath");
    MetadataBuilder connectorInstance_ldap_propertiesMapping = connectorInstance_ldapSchema.get("propertiesMapping");
    MetadataBuilder connectorInstance_ldap_removedauthorizations = connectorInstance_ldapSchema.get("removedauthorizations");
    MetadataBuilder connectorInstance_ldap_schema = connectorInstance_ldapSchema.get("schema");
    MetadataBuilder connectorInstance_ldap_shareDenyTokens = connectorInstance_ldapSchema.get("shareDenyTokens");
    MetadataBuilder connectorInstance_ldap_shareTokens = connectorInstance_ldapSchema.get("shareTokens");
    MetadataBuilder connectorInstance_ldap_title = connectorInstance_ldapSchema.get("title");
    MetadataBuilder connectorInstance_ldap_tokens = connectorInstance_ldapSchema.get("tokens");
    MetadataBuilder connectorInstance_ldap_tokensHierarchy = connectorInstance_ldapSchema.get("tokensHierarchy");
    MetadataBuilder connectorInstance_ldap_traversalCode = connectorInstance_ldapSchema.get("traversalCode");
    MetadataBuilder connectorInstance_ldap_traversalSchedule = connectorInstance_ldapSchema.get("traversalSchedule");
    MetadataBuilder connectorInstance_ldap_visibleInTrees = connectorInstance_ldapSchema.get("visibleInTrees");
    MetadataBuilder connectorInstance_smb_allReferences = connectorInstance_smbSchema.get("allReferences");
    MetadataBuilder connectorInstance_smb_allRemovedAuths = connectorInstance_smbSchema.get("allRemovedAuths");
    MetadataBuilder connectorInstance_smb_attachedAncestors = connectorInstance_smbSchema.get("attachedAncestors");
    MetadataBuilder connectorInstance_smb_autocomplete = connectorInstance_smbSchema.get("autocomplete");
    MetadataBuilder connectorInstance_smb_availableFields = connectorInstance_smbSchema.get("availableFields");
    MetadataBuilder connectorInstance_smb_caption = connectorInstance_smbSchema.get("caption");
    MetadataBuilder connectorInstance_smb_code = connectorInstance_smbSchema.get("code");
    MetadataBuilder connectorInstance_smb_connectorType = connectorInstance_smbSchema.get("connectorType");
    MetadataBuilder connectorInstance_smb_createdBy = connectorInstance_smbSchema.get("createdBy");
    MetadataBuilder connectorInstance_smb_createdOn = connectorInstance_smbSchema.get("createdOn");
    MetadataBuilder connectorInstance_smb_deleted = connectorInstance_smbSchema.get("deleted");
    MetadataBuilder connectorInstance_smb_denyTokens = connectorInstance_smbSchema.get("denyTokens");
    MetadataBuilder connectorInstance_smb_detachedauthorizations = connectorInstance_smbSchema.get("detachedauthorizations");
    MetadataBuilder connectorInstance_smb_enabled = connectorInstance_smbSchema.get("enabled");
    MetadataBuilder connectorInstance_smb_errorOnPhysicalDeletion = connectorInstance_smbSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder connectorInstance_smb_estimatedSize = connectorInstance_smbSchema.get("estimatedSize");
    MetadataBuilder connectorInstance_smb_hidden = connectorInstance_smbSchema.get("hidden");
    MetadataBuilder connectorInstance_smb_id = connectorInstance_smbSchema.get("id");
    MetadataBuilder connectorInstance_smb_lastTraversalOn = connectorInstance_smbSchema.get("lastTraversalOn");
    MetadataBuilder connectorInstance_smb_legacyIdentifier = connectorInstance_smbSchema.get("legacyIdentifier");
    MetadataBuilder connectorInstance_smb_logicallyDeletedOn = connectorInstance_smbSchema.get("logicallyDeletedOn");
    MetadataBuilder connectorInstance_smb_manualTokens = connectorInstance_smbSchema.get("manualTokens");
    MetadataBuilder connectorInstance_smb_markedForParsing = connectorInstance_smbSchema.get("markedForParsing");
    MetadataBuilder connectorInstance_smb_markedForPreviewConversion = connectorInstance_smbSchema.get("markedForPreviewConversion");
    MetadataBuilder connectorInstance_smb_markedForReindexing = connectorInstance_smbSchema.get("markedForReindexing");
    MetadataBuilder connectorInstance_smb_migrationDataVersion = connectorInstance_smbSchema.get("migrationDataVersion");
    MetadataBuilder connectorInstance_smb_modifiedBy = connectorInstance_smbSchema.get("modifiedBy");
    MetadataBuilder connectorInstance_smb_modifiedOn = connectorInstance_smbSchema.get("modifiedOn");
    MetadataBuilder connectorInstance_smb_path = connectorInstance_smbSchema.get("path");
    MetadataBuilder connectorInstance_smb_pathParts = connectorInstance_smbSchema.get("pathParts");
    MetadataBuilder connectorInstance_smb_principalpath = connectorInstance_smbSchema.get("principalpath");
    MetadataBuilder connectorInstance_smb_propertiesMapping = connectorInstance_smbSchema.get("propertiesMapping");
    MetadataBuilder connectorInstance_smb_removedauthorizations = connectorInstance_smbSchema.get("removedauthorizations");
    MetadataBuilder connectorInstance_smb_schema = connectorInstance_smbSchema.get("schema");
    MetadataBuilder connectorInstance_smb_shareDenyTokens = connectorInstance_smbSchema.get("shareDenyTokens");
    MetadataBuilder connectorInstance_smb_shareTokens = connectorInstance_smbSchema.get("shareTokens");
    MetadataBuilder connectorInstance_smb_title = connectorInstance_smbSchema.get("title");
    MetadataBuilder connectorInstance_smb_tokens = connectorInstance_smbSchema.get("tokens");
    MetadataBuilder connectorInstance_smb_tokensHierarchy = connectorInstance_smbSchema.get("tokensHierarchy");
    MetadataBuilder connectorInstance_smb_traversalCode = connectorInstance_smbSchema.get("traversalCode");
    MetadataBuilder connectorInstance_smb_traversalSchedule = connectorInstance_smbSchema.get("traversalSchedule");
    MetadataBuilder connectorInstance_smb_visibleInTrees = connectorInstance_smbSchema.get("visibleInTrees");
  }

  private void createSavedSearchSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder savedSearchSchemaType, MetadataSchemaBuilder savedSearchSchema) {
  }

  private void createAuthorizationDetailsSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder authorizationDetailsSchemaType, MetadataSchemaBuilder authorizationDetailsSchema) {
  }

  private void createConnectorLdapUserDocumentSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder connectorLdapUserDocumentSchemaType, MetadataSchemaBuilder connectorLdapUserDocumentSchema) {
    MetadataBuilder connectorLdapUserDocument_address = connectorLdapUserDocumentSchema.create("address").setType(MetadataValueType.TEXT);
    connectorLdapUserDocument_address.setUndeletable(true);
    connectorLdapUserDocument_address.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_allReferences = connectorLdapUserDocumentSchema.create("allReferences").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_allReferences.setMultivalue(true);
    connectorLdapUserDocument_allReferences.setSystemReserved(true);
    connectorLdapUserDocument_allReferences.setUndeletable(true);
    connectorLdapUserDocument_allReferences.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_allRemovedAuths = connectorLdapUserDocumentSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_allRemovedAuths.setMultivalue(true);
    connectorLdapUserDocument_allRemovedAuths.setSystemReserved(true);
    connectorLdapUserDocument_allRemovedAuths.setUndeletable(true);
    connectorLdapUserDocument_allRemovedAuths.setEssential(true);
    connectorLdapUserDocument_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_attachedAncestors = connectorLdapUserDocumentSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_attachedAncestors.setMultivalue(true);
    connectorLdapUserDocument_attachedAncestors.setSystemReserved(true);
    connectorLdapUserDocument_attachedAncestors.setUndeletable(true);
    connectorLdapUserDocument_attachedAncestors.setEssential(true);
    connectorLdapUserDocument_attachedAncestors.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_autocomplete = connectorLdapUserDocumentSchema.create("autocomplete").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_autocomplete.setMultivalue(true);
    connectorLdapUserDocument_autocomplete.setSystemReserved(true);
    connectorLdapUserDocument_autocomplete.setUndeletable(true);
    connectorLdapUserDocument_autocomplete.setEssential(true);
    connectorLdapUserDocument_autocomplete.setMultiLingual(true);
    MetadataBuilder connectorLdapUserDocument_caption = connectorLdapUserDocumentSchema.create("caption").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_caption.setSystemReserved(true);
    connectorLdapUserDocument_caption.setUndeletable(true);
    connectorLdapUserDocument_caption.setMultiLingual(false);
    connectorLdapUserDocument_caption.setSortable(true);
    MetadataBuilder connectorLdapUserDocument_company = connectorLdapUserDocumentSchema.create("company").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_company.setUndeletable(true);
    connectorLdapUserDocument_company.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_connector = connectorLdapUserDocumentSchema.create("connector").setType(MetadataValueType.REFERENCE);
    connectorLdapUserDocument_connector.setDefaultRequirement(true);
    connectorLdapUserDocument_connector.setUndeletable(true);
    connectorLdapUserDocument_connector.defineReferencesTo(asList(types.getSchema("connectorInstance_ldap")));
    MetadataBuilder connectorLdapUserDocument_connectorType = connectorLdapUserDocumentSchema.create("connectorType").setType(MetadataValueType.REFERENCE);
    connectorLdapUserDocument_connectorType.setDefaultRequirement(true);
    connectorLdapUserDocument_connectorType.setUndeletable(true);
    connectorLdapUserDocument_connectorType.defineReferencesTo(asList(types.getSchema("connectorType_default")));
    MetadataBuilder connectorLdapUserDocument_createdBy = connectorLdapUserDocumentSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    connectorLdapUserDocument_createdBy.setSystemReserved(true);
    connectorLdapUserDocument_createdBy.setUndeletable(true);
    connectorLdapUserDocument_createdBy.setMultiLingual(false);
    connectorLdapUserDocument_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorLdapUserDocument_createdOn = connectorLdapUserDocumentSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    connectorLdapUserDocument_createdOn.setSystemReserved(true);
    connectorLdapUserDocument_createdOn.setUndeletable(true);
    connectorLdapUserDocument_createdOn.setMultiLingual(false);
    connectorLdapUserDocument_createdOn.setSortable(true);
    MetadataBuilder connectorLdapUserDocument_deleted = connectorLdapUserDocumentSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_deleted.setSystemReserved(true);
    connectorLdapUserDocument_deleted.setUndeletable(true);
    connectorLdapUserDocument_deleted.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_denyTokens = connectorLdapUserDocumentSchema.create("denyTokens").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_denyTokens.setMultivalue(true);
    connectorLdapUserDocument_denyTokens.setSystemReserved(true);
    connectorLdapUserDocument_denyTokens.setUndeletable(true);
    connectorLdapUserDocument_denyTokens.setMultiLingual(false);
    connectorLdapUserDocument_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorLdapUserDocument_department = connectorLdapUserDocumentSchema.create("department").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_department.setUndeletable(true);
    connectorLdapUserDocument_department.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_detachedauthorizations = connectorLdapUserDocumentSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_detachedauthorizations.setSystemReserved(true);
    connectorLdapUserDocument_detachedauthorizations.setUndeletable(true);
    connectorLdapUserDocument_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_displayName = connectorLdapUserDocumentSchema.create("displayName").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_displayName.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_distinguishedName = connectorLdapUserDocumentSchema.create("distinguishedName").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_distinguishedName.setSystemReserved(true);
    connectorLdapUserDocument_distinguishedName.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_email = connectorLdapUserDocumentSchema.create("email").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_email.setUndeletable(true);
    connectorLdapUserDocument_email.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_enabled = connectorLdapUserDocumentSchema.create("enabled").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_enabled.setUndeletable(true);
    connectorLdapUserDocument_enabled.setDefaultValue(true);
    MetadataBuilder connectorLdapUserDocument_errorCode = connectorLdapUserDocumentSchema.create("errorCode").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_errorCode.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_errorMessage = connectorLdapUserDocumentSchema.create("errorMessage").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_errorMessage.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_errorOnPhysicalDeletion = connectorLdapUserDocumentSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_errorOnPhysicalDeletion.setSystemReserved(true);
    connectorLdapUserDocument_errorOnPhysicalDeletion.setUndeletable(true);
    connectorLdapUserDocument_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_errorStackTrace = connectorLdapUserDocumentSchema.create("errorStackTrace").setType(MetadataValueType.TEXT);
    connectorLdapUserDocument_errorStackTrace.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_errorsCount = connectorLdapUserDocumentSchema.create("errorsCount").setType(MetadataValueType.NUMBER);
    connectorLdapUserDocument_errorsCount.setUndeletable(true);
    connectorLdapUserDocument_errorsCount.setDefaultValue(0);
    MetadataBuilder connectorLdapUserDocument_estimatedSize = connectorLdapUserDocumentSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    connectorLdapUserDocument_estimatedSize.setSystemReserved(true);
    connectorLdapUserDocument_estimatedSize.setUndeletable(true);
    connectorLdapUserDocument_estimatedSize.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_fetchDelay = connectorLdapUserDocumentSchema.create("fetchDelay").setType(MetadataValueType.NUMBER);
    connectorLdapUserDocument_fetchDelay.setUndeletable(true);
    connectorLdapUserDocument_fetchDelay.setDefaultValue(10);
    MetadataBuilder connectorLdapUserDocument_fetched = connectorLdapUserDocumentSchema.create("fetched").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_fetched.setUndeletable(true);
    connectorLdapUserDocument_fetched.setDefaultValue(true);
    MetadataBuilder connectorLdapUserDocument_fetchedDateTime = connectorLdapUserDocumentSchema.create("fetchedDateTime").setType(MetadataValueType.DATE_TIME);
    connectorLdapUserDocument_fetchedDateTime.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_firstName = connectorLdapUserDocumentSchema.create("firstName").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_firstName.setUndeletable(true);
    connectorLdapUserDocument_firstName.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_frequency = connectorLdapUserDocumentSchema.create("frequency").setType(MetadataValueType.ENUM);
    connectorLdapUserDocument_frequency.setUndeletable(true);
    connectorLdapUserDocument_frequency.defineAsEnum(FetchFrequency.class);
    MetadataBuilder connectorLdapUserDocument_hidden = connectorLdapUserDocumentSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_hidden.setSystemReserved(true);
    connectorLdapUserDocument_hidden.setUndeletable(true);
    connectorLdapUserDocument_hidden.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_id = connectorLdapUserDocumentSchema.create("id").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_id.setDefaultRequirement(true);
    connectorLdapUserDocument_id.setSystemReserved(true);
    connectorLdapUserDocument_id.setUndeletable(true);
    connectorLdapUserDocument_id.setMultiLingual(false);
    connectorLdapUserDocument_id.setSearchable(true);
    connectorLdapUserDocument_id.setSortable(true);
    connectorLdapUserDocument_id.setUniqueValue(true);
    connectorLdapUserDocument_id.setUnmodifiable(true);
    MetadataBuilder connectorLdapUserDocument_lastModified = connectorLdapUserDocumentSchema.create("lastModified").setType(MetadataValueType.DATE_TIME);
    connectorLdapUserDocument_lastModified.setUndeletable(true);
    connectorLdapUserDocument_lastModified.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_lastName = connectorLdapUserDocumentSchema.create("lastName").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_lastName.setUndeletable(true);
    connectorLdapUserDocument_lastName.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_legacyIdentifier = connectorLdapUserDocumentSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_legacyIdentifier.setDefaultRequirement(true);
    connectorLdapUserDocument_legacyIdentifier.setSystemReserved(true);
    connectorLdapUserDocument_legacyIdentifier.setUndeletable(true);
    connectorLdapUserDocument_legacyIdentifier.setMultiLingual(false);
    connectorLdapUserDocument_legacyIdentifier.setSearchable(true);
    connectorLdapUserDocument_legacyIdentifier.setUniqueValue(true);
    connectorLdapUserDocument_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder connectorLdapUserDocument_logicallyDeletedOn = connectorLdapUserDocumentSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    connectorLdapUserDocument_logicallyDeletedOn.setSystemReserved(true);
    connectorLdapUserDocument_logicallyDeletedOn.setUndeletable(true);
    connectorLdapUserDocument_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_manager = connectorLdapUserDocumentSchema.create("manager").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_manager.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_manualTokens = connectorLdapUserDocumentSchema.create("manualTokens").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_manualTokens.setMultivalue(true);
    connectorLdapUserDocument_manualTokens.setSystemReserved(true);
    connectorLdapUserDocument_manualTokens.setUndeletable(true);
    connectorLdapUserDocument_manualTokens.setMultiLingual(false);
    connectorLdapUserDocument_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorLdapUserDocument_markedForParsing = connectorLdapUserDocumentSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_markedForParsing.setSystemReserved(true);
    connectorLdapUserDocument_markedForParsing.setUndeletable(true);
    connectorLdapUserDocument_markedForParsing.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_markedForPreviewConversion = connectorLdapUserDocumentSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_markedForPreviewConversion.setSystemReserved(true);
    connectorLdapUserDocument_markedForPreviewConversion.setUndeletable(true);
    connectorLdapUserDocument_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_markedForReindexing = connectorLdapUserDocumentSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_markedForReindexing.setSystemReserved(true);
    connectorLdapUserDocument_markedForReindexing.setUndeletable(true);
    connectorLdapUserDocument_markedForReindexing.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_migrationDataVersion = connectorLdapUserDocumentSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    connectorLdapUserDocument_migrationDataVersion.setSystemReserved(true);
    connectorLdapUserDocument_migrationDataVersion.setUndeletable(true);
    connectorLdapUserDocument_migrationDataVersion.setMultiLingual(false);
    connectorLdapUserDocument_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder connectorLdapUserDocument_mimetype = connectorLdapUserDocumentSchema.create("mimetype").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_mimetype.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_modifiedBy = connectorLdapUserDocumentSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    connectorLdapUserDocument_modifiedBy.setSystemReserved(true);
    connectorLdapUserDocument_modifiedBy.setUndeletable(true);
    connectorLdapUserDocument_modifiedBy.setMultiLingual(false);
    connectorLdapUserDocument_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorLdapUserDocument_modifiedOn = connectorLdapUserDocumentSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    connectorLdapUserDocument_modifiedOn.setSystemReserved(true);
    connectorLdapUserDocument_modifiedOn.setUndeletable(true);
    connectorLdapUserDocument_modifiedOn.setMultiLingual(false);
    connectorLdapUserDocument_modifiedOn.setSortable(true);
    MetadataBuilder connectorLdapUserDocument_neverFetch = connectorLdapUserDocumentSchema.create("neverFetch").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_neverFetch.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_nextFetch = connectorLdapUserDocumentSchema.create("nextFetch").setType(MetadataValueType.DATE_TIME);
    connectorLdapUserDocument_nextFetch.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_path = connectorLdapUserDocumentSchema.create("path").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_path.setMultivalue(true);
    connectorLdapUserDocument_path.setSystemReserved(true);
    connectorLdapUserDocument_path.setUndeletable(true);
    connectorLdapUserDocument_path.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_pathParts = connectorLdapUserDocumentSchema.create("pathParts").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_pathParts.setMultivalue(true);
    connectorLdapUserDocument_pathParts.setSystemReserved(true);
    connectorLdapUserDocument_pathParts.setUndeletable(true);
    connectorLdapUserDocument_pathParts.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_principalpath = connectorLdapUserDocumentSchema.create("principalpath").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_principalpath.setSystemReserved(true);
    connectorLdapUserDocument_principalpath.setUndeletable(true);
    connectorLdapUserDocument_principalpath.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_removedauthorizations = connectorLdapUserDocumentSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_removedauthorizations.setMultivalue(true);
    connectorLdapUserDocument_removedauthorizations.setSystemReserved(true);
    connectorLdapUserDocument_removedauthorizations.setUndeletable(true);
    connectorLdapUserDocument_removedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_schema = connectorLdapUserDocumentSchema.create("schema").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_schema.setDefaultRequirement(true);
    connectorLdapUserDocument_schema.setSystemReserved(true);
    connectorLdapUserDocument_schema.setUndeletable(true);
    connectorLdapUserDocument_schema.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_searchable = connectorLdapUserDocumentSchema.create("searchable").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_searchable.setUndeletable(true);
    connectorLdapUserDocument_searchable.setDefaultValue(true);
    MetadataBuilder connectorLdapUserDocument_shareDenyTokens = connectorLdapUserDocumentSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_shareDenyTokens.setMultivalue(true);
    connectorLdapUserDocument_shareDenyTokens.setSystemReserved(true);
    connectorLdapUserDocument_shareDenyTokens.setUndeletable(true);
    connectorLdapUserDocument_shareDenyTokens.setMultiLingual(false);
    connectorLdapUserDocument_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorLdapUserDocument_shareTokens = connectorLdapUserDocumentSchema.create("shareTokens").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_shareTokens.setMultivalue(true);
    connectorLdapUserDocument_shareTokens.setSystemReserved(true);
    connectorLdapUserDocument_shareTokens.setUndeletable(true);
    connectorLdapUserDocument_shareTokens.setMultiLingual(false);
    connectorLdapUserDocument_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorLdapUserDocument_status = connectorLdapUserDocumentSchema.create("status").setType(MetadataValueType.ENUM);
    connectorLdapUserDocument_status.setUndeletable(true);
    connectorLdapUserDocument_status.defineAsEnum(ConnectorDocumentStatus.class);
    MetadataBuilder connectorLdapUserDocument_telephone = connectorLdapUserDocumentSchema.create("telephone").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_telephone.setMultivalue(true);
    connectorLdapUserDocument_telephone.setUndeletable(true);
    connectorLdapUserDocument_telephone.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_title = connectorLdapUserDocumentSchema.create("title").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_title.setUndeletable(true);
    connectorLdapUserDocument_title.setMultiLingual(false);
    connectorLdapUserDocument_title.setSchemaAutocomplete(true);
    connectorLdapUserDocument_title.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_tokens = connectorLdapUserDocumentSchema.create("tokens").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_tokens.setMultivalue(true);
    connectorLdapUserDocument_tokens.setSystemReserved(true);
    connectorLdapUserDocument_tokens.setUndeletable(true);
    connectorLdapUserDocument_tokens.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_tokensHierarchy = connectorLdapUserDocumentSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_tokensHierarchy.setMultivalue(true);
    connectorLdapUserDocument_tokensHierarchy.setSystemReserved(true);
    connectorLdapUserDocument_tokensHierarchy.setUndeletable(true);
    connectorLdapUserDocument_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_traversalCode = connectorLdapUserDocumentSchema.create("traversalCode").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_traversalCode.setDefaultRequirement(true);
    connectorLdapUserDocument_traversalCode.setUndeletable(true);
    MetadataBuilder connectorLdapUserDocument_url = connectorLdapUserDocumentSchema.create("url").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_url.setDefaultRequirement(true);
    connectorLdapUserDocument_url.setUndeletable(true);
    connectorLdapUserDocument_url.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_username = connectorLdapUserDocumentSchema.create("username").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_username.setUndeletable(true);
    connectorLdapUserDocument_username.setSearchable(true);
    MetadataBuilder connectorLdapUserDocument_visibleInTrees = connectorLdapUserDocumentSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    connectorLdapUserDocument_visibleInTrees.setSystemReserved(true);
    connectorLdapUserDocument_visibleInTrees.setUndeletable(true);
    connectorLdapUserDocument_visibleInTrees.setMultiLingual(false);
    MetadataBuilder connectorLdapUserDocument_workTitle = connectorLdapUserDocumentSchema.create("workTitle").setType(MetadataValueType.STRING);
    connectorLdapUserDocument_workTitle.setUndeletable(true);
    connectorLdapUserDocument_workTitle.setSearchable(true);
  }

  private void createUserDocumentSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userDocumentSchemaType, MetadataSchemaBuilder userDocumentSchema) {
  }

  private void createTaskSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder taskSchemaType, MetadataSchemaBuilder task_approvalSchema, MetadataSchemaBuilder taskSchema) {
    MetadataBuilder task_approval_allReferences = task_approvalSchema.get("allReferences");
    MetadataBuilder task_approval_allRemovedAuths = task_approvalSchema.get("allRemovedAuths");
    MetadataBuilder task_approval_assignCandidates = task_approvalSchema.get("assignCandidates");
    MetadataBuilder task_approval_assignedOn = task_approvalSchema.get("assignedOn");
    MetadataBuilder task_approval_assignedTo = task_approvalSchema.get("assignedTo");
    MetadataBuilder task_approval_attachedAncestors = task_approvalSchema.get("attachedAncestors");
    MetadataBuilder task_approval_autocomplete = task_approvalSchema.get("autocomplete");
    MetadataBuilder task_approval_caption = task_approvalSchema.get("caption");
    MetadataBuilder task_approval_createdBy = task_approvalSchema.get("createdBy");
    MetadataBuilder task_approval_createdOn = task_approvalSchema.get("createdOn");
    MetadataBuilder task_approval_deleted = task_approvalSchema.get("deleted");
    MetadataBuilder task_approval_denyTokens = task_approvalSchema.get("denyTokens");
    MetadataBuilder task_approval_detachedauthorizations = task_approvalSchema.get("detachedauthorizations");
    MetadataBuilder task_approval_dueDate = task_approvalSchema.get("dueDate");
    MetadataBuilder task_approval_errorOnPhysicalDeletion = task_approvalSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder task_approval_estimatedSize = task_approvalSchema.get("estimatedSize");
    MetadataBuilder task_approval_finishedBy = task_approvalSchema.get("finishedBy");
    MetadataBuilder task_approval_finishedOn = task_approvalSchema.get("finishedOn");
    MetadataBuilder task_approval_hidden = task_approvalSchema.get("hidden");
    MetadataBuilder task_approval_id = task_approvalSchema.get("id");
    MetadataBuilder task_approval_legacyIdentifier = task_approvalSchema.get("legacyIdentifier");
    MetadataBuilder task_approval_logicallyDeletedOn = task_approvalSchema.get("logicallyDeletedOn");
    MetadataBuilder task_approval_manualTokens = task_approvalSchema.get("manualTokens");
    MetadataBuilder task_approval_markedForParsing = task_approvalSchema.get("markedForParsing");
    MetadataBuilder task_approval_markedForPreviewConversion = task_approvalSchema.get("markedForPreviewConversion");
    MetadataBuilder task_approval_markedForReindexing = task_approvalSchema.get("markedForReindexing");
    MetadataBuilder task_approval_migrationDataVersion = task_approvalSchema.get("migrationDataVersion");
    MetadataBuilder task_approval_modifiedBy = task_approvalSchema.get("modifiedBy");
    MetadataBuilder task_approval_modifiedOn = task_approvalSchema.get("modifiedOn");
    MetadataBuilder task_approval_path = task_approvalSchema.get("path");
    MetadataBuilder task_approval_pathParts = task_approvalSchema.get("pathParts");
    MetadataBuilder task_approval_principalpath = task_approvalSchema.get("principalpath");
    MetadataBuilder task_approval_removedauthorizations = task_approvalSchema.get("removedauthorizations");
    MetadataBuilder task_approval_schema = task_approvalSchema.get("schema");
    MetadataBuilder task_approval_shareDenyTokens = task_approvalSchema.get("shareDenyTokens");
    MetadataBuilder task_approval_shareTokens = task_approvalSchema.get("shareTokens");
    MetadataBuilder task_approval_title = task_approvalSchema.get("title");
    MetadataBuilder task_approval_tokens = task_approvalSchema.get("tokens");
    MetadataBuilder task_approval_tokensHierarchy = task_approvalSchema.get("tokensHierarchy");
    MetadataBuilder task_approval_visibleInTrees = task_approvalSchema.get("visibleInTrees");
    MetadataBuilder task_approval_workflowIdentifier = task_approvalSchema.get("workflowIdentifier");
    MetadataBuilder task_approval_workflowRecordIdentifiers = task_approvalSchema.get("workflowRecordIdentifiers");
  }

  private void createUserFolderSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userFolderSchemaType, MetadataSchemaBuilder userFolderSchema) {
  }

  private void createDdvCapsuleLanguageSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvCapsuleLanguageSchemaType, MetadataSchemaBuilder ddvCapsuleLanguageSchema) {
  }

  private void createReportSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder reportSchemaType, MetadataSchemaBuilder reportSchema) {
  }

  private void createEmailToSendSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder emailToSendSchemaType, MetadataSchemaBuilder emailToSendSchema) {
  }

  private void createEventSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder eventSchemaType, MetadataSchemaBuilder eventSchema) {
  }

  private void createSearchEventSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder searchEventSchemaType, MetadataSchemaBuilder searchEventSchema) {
  }

  private void createTemporaryRecordSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder temporaryRecordSchemaType, MetadataSchemaBuilder temporaryRecord_batchProcessReportSchema, MetadataSchemaBuilder temporaryRecord_exportAuditSchema, MetadataSchemaBuilder temporaryRecord_importAuditSchema, MetadataSchemaBuilder temporaryRecord_scriptReportSchema, MetadataSchemaBuilder temporaryRecord_vaultScanReportSchema, MetadataSchemaBuilder temporaryRecordSchema) {
    MetadataBuilder temporaryRecord_batchProcessReport_allReferences = temporaryRecord_batchProcessReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_batchProcessReport_allRemovedAuths = temporaryRecord_batchProcessReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_batchProcessReport_attachedAncestors = temporaryRecord_batchProcessReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_batchProcessReport_autocomplete = temporaryRecord_batchProcessReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_batchProcessReport_caption = temporaryRecord_batchProcessReportSchema.get("caption");
    MetadataBuilder temporaryRecord_batchProcessReport_content = temporaryRecord_batchProcessReportSchema.get("content");
    MetadataBuilder temporaryRecord_batchProcessReport_createdBy = temporaryRecord_batchProcessReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_batchProcessReport_createdOn = temporaryRecord_batchProcessReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_batchProcessReport_daysBeforeDestruction = temporaryRecord_batchProcessReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_batchProcessReport_deleted = temporaryRecord_batchProcessReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_batchProcessReport_denyTokens = temporaryRecord_batchProcessReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_destructionDate = temporaryRecord_batchProcessReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_batchProcessReport_detachedauthorizations = temporaryRecord_batchProcessReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_batchProcessReport_errorOnPhysicalDeletion = temporaryRecord_batchProcessReportSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_batchProcessReport_estimatedSize = temporaryRecord_batchProcessReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_batchProcessReport_hidden = temporaryRecord_batchProcessReportSchema.get("hidden");
    MetadataBuilder temporaryRecord_batchProcessReport_id = temporaryRecord_batchProcessReportSchema.get("id");
    MetadataBuilder temporaryRecord_batchProcessReport_legacyIdentifier = temporaryRecord_batchProcessReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_batchProcessReport_logicallyDeletedOn = temporaryRecord_batchProcessReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_batchProcessReport_manualTokens = temporaryRecord_batchProcessReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForParsing = temporaryRecord_batchProcessReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForPreviewConversion = temporaryRecord_batchProcessReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForReindexing = temporaryRecord_batchProcessReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_batchProcessReport_migrationDataVersion = temporaryRecord_batchProcessReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_batchProcessReport_modifiedBy = temporaryRecord_batchProcessReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_batchProcessReport_modifiedOn = temporaryRecord_batchProcessReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_batchProcessReport_path = temporaryRecord_batchProcessReportSchema.get("path");
    MetadataBuilder temporaryRecord_batchProcessReport_pathParts = temporaryRecord_batchProcessReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_batchProcessReport_principalpath = temporaryRecord_batchProcessReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_batchProcessReport_removedauthorizations = temporaryRecord_batchProcessReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_batchProcessReport_schema = temporaryRecord_batchProcessReportSchema.get("schema");
    MetadataBuilder temporaryRecord_batchProcessReport_shareDenyTokens = temporaryRecord_batchProcessReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_shareTokens = temporaryRecord_batchProcessReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_title = temporaryRecord_batchProcessReportSchema.get("title");
    MetadataBuilder temporaryRecord_batchProcessReport_tokens = temporaryRecord_batchProcessReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_batchProcessReport_tokensHierarchy = temporaryRecord_batchProcessReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_batchProcessReport_visibleInTrees = temporaryRecord_batchProcessReportSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_exportAudit_allReferences = temporaryRecord_exportAuditSchema.get("allReferences");
    MetadataBuilder temporaryRecord_exportAudit_allRemovedAuths = temporaryRecord_exportAuditSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_exportAudit_attachedAncestors = temporaryRecord_exportAuditSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_exportAudit_autocomplete = temporaryRecord_exportAuditSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_exportAudit_caption = temporaryRecord_exportAuditSchema.get("caption");
    MetadataBuilder temporaryRecord_exportAudit_content = temporaryRecord_exportAuditSchema.get("content");
    MetadataBuilder temporaryRecord_exportAudit_createdBy = temporaryRecord_exportAuditSchema.get("createdBy");
    MetadataBuilder temporaryRecord_exportAudit_createdOn = temporaryRecord_exportAuditSchema.get("createdOn");
    MetadataBuilder temporaryRecord_exportAudit_daysBeforeDestruction = temporaryRecord_exportAuditSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_exportAudit_deleted = temporaryRecord_exportAuditSchema.get("deleted");
    MetadataBuilder temporaryRecord_exportAudit_denyTokens = temporaryRecord_exportAuditSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_exportAudit_destructionDate = temporaryRecord_exportAuditSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_exportAudit_detachedauthorizations = temporaryRecord_exportAuditSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_exportAudit_errorOnPhysicalDeletion = temporaryRecord_exportAuditSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_exportAudit_estimatedSize = temporaryRecord_exportAuditSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_exportAudit_hidden = temporaryRecord_exportAuditSchema.get("hidden");
    MetadataBuilder temporaryRecord_exportAudit_id = temporaryRecord_exportAuditSchema.get("id");
    MetadataBuilder temporaryRecord_exportAudit_legacyIdentifier = temporaryRecord_exportAuditSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_exportAudit_logicallyDeletedOn = temporaryRecord_exportAuditSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_exportAudit_manualTokens = temporaryRecord_exportAuditSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_exportAudit_markedForParsing = temporaryRecord_exportAuditSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_exportAudit_markedForPreviewConversion = temporaryRecord_exportAuditSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_exportAudit_markedForReindexing = temporaryRecord_exportAuditSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_exportAudit_migrationDataVersion = temporaryRecord_exportAuditSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_exportAudit_modifiedBy = temporaryRecord_exportAuditSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_exportAudit_modifiedOn = temporaryRecord_exportAuditSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_exportAudit_path = temporaryRecord_exportAuditSchema.get("path");
    MetadataBuilder temporaryRecord_exportAudit_pathParts = temporaryRecord_exportAuditSchema.get("pathParts");
    MetadataBuilder temporaryRecord_exportAudit_principalpath = temporaryRecord_exportAuditSchema.get("principalpath");
    MetadataBuilder temporaryRecord_exportAudit_removedauthorizations = temporaryRecord_exportAuditSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_exportAudit_schema = temporaryRecord_exportAuditSchema.get("schema");
    MetadataBuilder temporaryRecord_exportAudit_shareDenyTokens = temporaryRecord_exportAuditSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_exportAudit_shareTokens = temporaryRecord_exportAuditSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_exportAudit_title = temporaryRecord_exportAuditSchema.get("title");
    MetadataBuilder temporaryRecord_exportAudit_tokens = temporaryRecord_exportAuditSchema.get("tokens");
    MetadataBuilder temporaryRecord_exportAudit_tokensHierarchy = temporaryRecord_exportAuditSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_exportAudit_visibleInTrees = temporaryRecord_exportAuditSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_importAudit_allReferences = temporaryRecord_importAuditSchema.get("allReferences");
    MetadataBuilder temporaryRecord_importAudit_allRemovedAuths = temporaryRecord_importAuditSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_importAudit_attachedAncestors = temporaryRecord_importAuditSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_importAudit_autocomplete = temporaryRecord_importAuditSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_importAudit_caption = temporaryRecord_importAuditSchema.get("caption");
    MetadataBuilder temporaryRecord_importAudit_content = temporaryRecord_importAuditSchema.get("content");
    MetadataBuilder temporaryRecord_importAudit_createdBy = temporaryRecord_importAuditSchema.get("createdBy");
    MetadataBuilder temporaryRecord_importAudit_createdOn = temporaryRecord_importAuditSchema.get("createdOn");
    MetadataBuilder temporaryRecord_importAudit_daysBeforeDestruction = temporaryRecord_importAuditSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_importAudit_deleted = temporaryRecord_importAuditSchema.get("deleted");
    MetadataBuilder temporaryRecord_importAudit_denyTokens = temporaryRecord_importAuditSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_importAudit_destructionDate = temporaryRecord_importAuditSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_importAudit_detachedauthorizations = temporaryRecord_importAuditSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_importAudit_errorOnPhysicalDeletion = temporaryRecord_importAuditSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_importAudit_estimatedSize = temporaryRecord_importAuditSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_importAudit_hidden = temporaryRecord_importAuditSchema.get("hidden");
    MetadataBuilder temporaryRecord_importAudit_id = temporaryRecord_importAuditSchema.get("id");
    MetadataBuilder temporaryRecord_importAudit_legacyIdentifier = temporaryRecord_importAuditSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_importAudit_logicallyDeletedOn = temporaryRecord_importAuditSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_importAudit_manualTokens = temporaryRecord_importAuditSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_importAudit_markedForParsing = temporaryRecord_importAuditSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_importAudit_markedForPreviewConversion = temporaryRecord_importAuditSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_importAudit_markedForReindexing = temporaryRecord_importAuditSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_importAudit_migrationDataVersion = temporaryRecord_importAuditSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_importAudit_modifiedBy = temporaryRecord_importAuditSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_importAudit_modifiedOn = temporaryRecord_importAuditSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_importAudit_path = temporaryRecord_importAuditSchema.get("path");
    MetadataBuilder temporaryRecord_importAudit_pathParts = temporaryRecord_importAuditSchema.get("pathParts");
    MetadataBuilder temporaryRecord_importAudit_principalpath = temporaryRecord_importAuditSchema.get("principalpath");
    MetadataBuilder temporaryRecord_importAudit_removedauthorizations = temporaryRecord_importAuditSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_importAudit_schema = temporaryRecord_importAuditSchema.get("schema");
    MetadataBuilder temporaryRecord_importAudit_shareDenyTokens = temporaryRecord_importAuditSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_importAudit_shareTokens = temporaryRecord_importAuditSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_importAudit_title = temporaryRecord_importAuditSchema.get("title");
    MetadataBuilder temporaryRecord_importAudit_tokens = temporaryRecord_importAuditSchema.get("tokens");
    MetadataBuilder temporaryRecord_importAudit_tokensHierarchy = temporaryRecord_importAuditSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_importAudit_visibleInTrees = temporaryRecord_importAuditSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_scriptReport_allReferences = temporaryRecord_scriptReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_scriptReport_allRemovedAuths = temporaryRecord_scriptReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_scriptReport_attachedAncestors = temporaryRecord_scriptReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_scriptReport_autocomplete = temporaryRecord_scriptReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_scriptReport_caption = temporaryRecord_scriptReportSchema.get("caption");
    MetadataBuilder temporaryRecord_scriptReport_content = temporaryRecord_scriptReportSchema.get("content");
    MetadataBuilder temporaryRecord_scriptReport_createdBy = temporaryRecord_scriptReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_scriptReport_createdOn = temporaryRecord_scriptReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_scriptReport_daysBeforeDestruction = temporaryRecord_scriptReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_scriptReport_deleted = temporaryRecord_scriptReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_scriptReport_denyTokens = temporaryRecord_scriptReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_scriptReport_destructionDate = temporaryRecord_scriptReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_scriptReport_detachedauthorizations = temporaryRecord_scriptReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_scriptReport_errorOnPhysicalDeletion = temporaryRecord_scriptReportSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_scriptReport_estimatedSize = temporaryRecord_scriptReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_scriptReport_hidden = temporaryRecord_scriptReportSchema.get("hidden");
    MetadataBuilder temporaryRecord_scriptReport_id = temporaryRecord_scriptReportSchema.get("id");
    MetadataBuilder temporaryRecord_scriptReport_legacyIdentifier = temporaryRecord_scriptReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_scriptReport_logicallyDeletedOn = temporaryRecord_scriptReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_scriptReport_manualTokens = temporaryRecord_scriptReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_scriptReport_markedForParsing = temporaryRecord_scriptReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_scriptReport_markedForPreviewConversion = temporaryRecord_scriptReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_scriptReport_markedForReindexing = temporaryRecord_scriptReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_scriptReport_migrationDataVersion = temporaryRecord_scriptReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_scriptReport_modifiedBy = temporaryRecord_scriptReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_scriptReport_modifiedOn = temporaryRecord_scriptReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_scriptReport_path = temporaryRecord_scriptReportSchema.get("path");
    MetadataBuilder temporaryRecord_scriptReport_pathParts = temporaryRecord_scriptReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_scriptReport_principalpath = temporaryRecord_scriptReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_scriptReport_removedauthorizations = temporaryRecord_scriptReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_scriptReport_schema = temporaryRecord_scriptReportSchema.get("schema");
    MetadataBuilder temporaryRecord_scriptReport_shareDenyTokens = temporaryRecord_scriptReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_scriptReport_shareTokens = temporaryRecord_scriptReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_scriptReport_title = temporaryRecord_scriptReportSchema.get("title");
    MetadataBuilder temporaryRecord_scriptReport_tokens = temporaryRecord_scriptReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_scriptReport_tokensHierarchy = temporaryRecord_scriptReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_scriptReport_visibleInTrees = temporaryRecord_scriptReportSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_vaultScanReport_allReferences = temporaryRecord_vaultScanReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_vaultScanReport_allRemovedAuths = temporaryRecord_vaultScanReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_vaultScanReport_attachedAncestors = temporaryRecord_vaultScanReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_vaultScanReport_autocomplete = temporaryRecord_vaultScanReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_vaultScanReport_caption = temporaryRecord_vaultScanReportSchema.get("caption");
    MetadataBuilder temporaryRecord_vaultScanReport_content = temporaryRecord_vaultScanReportSchema.get("content");
    MetadataBuilder temporaryRecord_vaultScanReport_createdBy = temporaryRecord_vaultScanReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_vaultScanReport_createdOn = temporaryRecord_vaultScanReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_vaultScanReport_daysBeforeDestruction = temporaryRecord_vaultScanReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_vaultScanReport_deleted = temporaryRecord_vaultScanReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_vaultScanReport_denyTokens = temporaryRecord_vaultScanReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_destructionDate = temporaryRecord_vaultScanReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_vaultScanReport_detachedauthorizations = temporaryRecord_vaultScanReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_vaultScanReport_errorOnPhysicalDeletion = temporaryRecord_vaultScanReportSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_vaultScanReport_estimatedSize = temporaryRecord_vaultScanReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_vaultScanReport_hidden = temporaryRecord_vaultScanReportSchema.get("hidden");
    MetadataBuilder temporaryRecord_vaultScanReport_id = temporaryRecord_vaultScanReportSchema.get("id");
    MetadataBuilder temporaryRecord_vaultScanReport_legacyIdentifier = temporaryRecord_vaultScanReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_vaultScanReport_logicallyDeletedOn = temporaryRecord_vaultScanReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_vaultScanReport_manualTokens = temporaryRecord_vaultScanReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForParsing = temporaryRecord_vaultScanReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForPreviewConversion = temporaryRecord_vaultScanReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForReindexing = temporaryRecord_vaultScanReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_vaultScanReport_migrationDataVersion = temporaryRecord_vaultScanReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_vaultScanReport_modifiedBy = temporaryRecord_vaultScanReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_vaultScanReport_modifiedOn = temporaryRecord_vaultScanReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_vaultScanReport_path = temporaryRecord_vaultScanReportSchema.get("path");
    MetadataBuilder temporaryRecord_vaultScanReport_pathParts = temporaryRecord_vaultScanReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_vaultScanReport_principalpath = temporaryRecord_vaultScanReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_vaultScanReport_removedauthorizations = temporaryRecord_vaultScanReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_vaultScanReport_schema = temporaryRecord_vaultScanReportSchema.get("schema");
    MetadataBuilder temporaryRecord_vaultScanReport_shareDenyTokens = temporaryRecord_vaultScanReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_shareTokens = temporaryRecord_vaultScanReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_title = temporaryRecord_vaultScanReportSchema.get("title");
    MetadataBuilder temporaryRecord_vaultScanReport_tokens = temporaryRecord_vaultScanReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_vaultScanReport_tokensHierarchy = temporaryRecord_vaultScanReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_vaultScanReport_visibleInTrees = temporaryRecord_vaultScanReportSchema.get("visibleInTrees");
  }

  private void createUserSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userSchemaType, MetadataSchemaBuilder userSchema) {
  }

  private void createFacetSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder facetSchemaType, MetadataSchemaBuilder facet_fieldSchema, MetadataSchemaBuilder facet_querySchema, MetadataSchemaBuilder facetSchema) {
    MetadataBuilder facet_field_active = facet_fieldSchema.get("active");
    MetadataBuilder facet_field_allReferences = facet_fieldSchema.get("allReferences");
    MetadataBuilder facet_field_allRemovedAuths = facet_fieldSchema.get("allRemovedAuths");
    MetadataBuilder facet_field_attachedAncestors = facet_fieldSchema.get("attachedAncestors");
    MetadataBuilder facet_field_autocomplete = facet_fieldSchema.get("autocomplete");
    MetadataBuilder facet_field_caption = facet_fieldSchema.get("caption");
    MetadataBuilder facet_field_createdBy = facet_fieldSchema.get("createdBy");
    MetadataBuilder facet_field_createdOn = facet_fieldSchema.get("createdOn");
    MetadataBuilder facet_field_deleted = facet_fieldSchema.get("deleted");
    MetadataBuilder facet_field_denyTokens = facet_fieldSchema.get("denyTokens");
    MetadataBuilder facet_field_detachedauthorizations = facet_fieldSchema.get("detachedauthorizations");
    MetadataBuilder facet_field_elementPerPage = facet_fieldSchema.get("elementPerPage");
    MetadataBuilder facet_field_errorOnPhysicalDeletion = facet_fieldSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder facet_field_estimatedSize = facet_fieldSchema.get("estimatedSize");
    MetadataBuilder facet_field_facetType = facet_fieldSchema.get("facetType");
    MetadataBuilder facet_field_fieldDatastoreCode = facet_fieldSchema.get("fieldDatastoreCode");
    MetadataBuilder facet_field_hidden = facet_fieldSchema.get("hidden");
    MetadataBuilder facet_field_id = facet_fieldSchema.get("id");
    MetadataBuilder facet_field_legacyIdentifier = facet_fieldSchema.get("legacyIdentifier");
    MetadataBuilder facet_field_logicallyDeletedOn = facet_fieldSchema.get("logicallyDeletedOn");
    MetadataBuilder facet_field_manualTokens = facet_fieldSchema.get("manualTokens");
    MetadataBuilder facet_field_markedForParsing = facet_fieldSchema.get("markedForParsing");
    MetadataBuilder facet_field_markedForPreviewConversion = facet_fieldSchema.get("markedForPreviewConversion");
    MetadataBuilder facet_field_markedForReindexing = facet_fieldSchema.get("markedForReindexing");
    MetadataBuilder facet_field_migrationDataVersion = facet_fieldSchema.get("migrationDataVersion");
    MetadataBuilder facet_field_modifiedBy = facet_fieldSchema.get("modifiedBy");
    MetadataBuilder facet_field_modifiedOn = facet_fieldSchema.get("modifiedOn");
    MetadataBuilder facet_field_openByDefault = facet_fieldSchema.get("openByDefault");
    MetadataBuilder facet_field_order = facet_fieldSchema.get("order");
    MetadataBuilder facet_field_orderResult = facet_fieldSchema.get("orderResult");
    MetadataBuilder facet_field_pages = facet_fieldSchema.get("pages");
    MetadataBuilder facet_field_path = facet_fieldSchema.get("path");
    MetadataBuilder facet_field_pathParts = facet_fieldSchema.get("pathParts");
    MetadataBuilder facet_field_principalpath = facet_fieldSchema.get("principalpath");
    MetadataBuilder facet_field_removedauthorizations = facet_fieldSchema.get("removedauthorizations");
    MetadataBuilder facet_field_schema = facet_fieldSchema.get("schema");
    MetadataBuilder facet_field_shareDenyTokens = facet_fieldSchema.get("shareDenyTokens");
    MetadataBuilder facet_field_shareTokens = facet_fieldSchema.get("shareTokens");
    MetadataBuilder facet_field_title = facet_fieldSchema.get("title");
    MetadataBuilder facet_field_tokens = facet_fieldSchema.get("tokens");
    MetadataBuilder facet_field_tokensHierarchy = facet_fieldSchema.get("tokensHierarchy");
    MetadataBuilder facet_field_usedByModule = facet_fieldSchema.get("usedByModule");
    MetadataBuilder facet_field_visibleInTrees = facet_fieldSchema.get("visibleInTrees");
    MetadataBuilder facet_query_active = facet_querySchema.get("active");
    MetadataBuilder facet_query_allReferences = facet_querySchema.get("allReferences");
    MetadataBuilder facet_query_allRemovedAuths = facet_querySchema.get("allRemovedAuths");
    MetadataBuilder facet_query_attachedAncestors = facet_querySchema.get("attachedAncestors");
    MetadataBuilder facet_query_autocomplete = facet_querySchema.get("autocomplete");
    MetadataBuilder facet_query_caption = facet_querySchema.get("caption");
    MetadataBuilder facet_query_createdBy = facet_querySchema.get("createdBy");
    MetadataBuilder facet_query_createdOn = facet_querySchema.get("createdOn");
    MetadataBuilder facet_query_deleted = facet_querySchema.get("deleted");
    MetadataBuilder facet_query_denyTokens = facet_querySchema.get("denyTokens");
    MetadataBuilder facet_query_detachedauthorizations = facet_querySchema.get("detachedauthorizations");
    MetadataBuilder facet_query_elementPerPage = facet_querySchema.get("elementPerPage");
    MetadataBuilder facet_query_errorOnPhysicalDeletion = facet_querySchema.get("errorOnPhysicalDeletion");
    MetadataBuilder facet_query_estimatedSize = facet_querySchema.get("estimatedSize");
    MetadataBuilder facet_query_facetType = facet_querySchema.get("facetType");
    MetadataBuilder facet_query_fieldDatastoreCode = facet_querySchema.get("fieldDatastoreCode");
    MetadataBuilder facet_query_hidden = facet_querySchema.get("hidden");
    MetadataBuilder facet_query_id = facet_querySchema.get("id");
    MetadataBuilder facet_query_legacyIdentifier = facet_querySchema.get("legacyIdentifier");
    MetadataBuilder facet_query_logicallyDeletedOn = facet_querySchema.get("logicallyDeletedOn");
    MetadataBuilder facet_query_manualTokens = facet_querySchema.get("manualTokens");
    MetadataBuilder facet_query_markedForParsing = facet_querySchema.get("markedForParsing");
    MetadataBuilder facet_query_markedForPreviewConversion = facet_querySchema.get("markedForPreviewConversion");
    MetadataBuilder facet_query_markedForReindexing = facet_querySchema.get("markedForReindexing");
    MetadataBuilder facet_query_migrationDataVersion = facet_querySchema.get("migrationDataVersion");
    MetadataBuilder facet_query_modifiedBy = facet_querySchema.get("modifiedBy");
    MetadataBuilder facet_query_modifiedOn = facet_querySchema.get("modifiedOn");
    MetadataBuilder facet_query_openByDefault = facet_querySchema.get("openByDefault");
    MetadataBuilder facet_query_order = facet_querySchema.get("order");
    MetadataBuilder facet_query_orderResult = facet_querySchema.get("orderResult");
    MetadataBuilder facet_query_pages = facet_querySchema.get("pages");
    MetadataBuilder facet_query_path = facet_querySchema.get("path");
    MetadataBuilder facet_query_pathParts = facet_querySchema.get("pathParts");
    MetadataBuilder facet_query_principalpath = facet_querySchema.get("principalpath");
    MetadataBuilder facet_query_removedauthorizations = facet_querySchema.get("removedauthorizations");
    MetadataBuilder facet_query_schema = facet_querySchema.get("schema");
    MetadataBuilder facet_query_shareDenyTokens = facet_querySchema.get("shareDenyTokens");
    MetadataBuilder facet_query_shareTokens = facet_querySchema.get("shareTokens");
    MetadataBuilder facet_query_title = facet_querySchema.get("title");
    MetadataBuilder facet_query_tokens = facet_querySchema.get("tokens");
    MetadataBuilder facet_query_tokensHierarchy = facet_querySchema.get("tokensHierarchy");
    MetadataBuilder facet_query_usedByModule = facet_querySchema.get("usedByModule");
    MetadataBuilder facet_query_visibleInTrees = facet_querySchema.get("visibleInTrees");
  }

  private void createGroupSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder groupSchemaType, MetadataSchemaBuilder groupSchema) {
  }

  private void createConnectorSmbDocumentSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder connectorSmbDocumentSchemaType, MetadataSchemaBuilder connectorSmbDocumentSchema) {
    MetadataBuilder connectorSmbDocument_allReferences = connectorSmbDocumentSchema.create("allReferences").setType(MetadataValueType.STRING);
    connectorSmbDocument_allReferences.setMultivalue(true);
    connectorSmbDocument_allReferences.setSystemReserved(true);
    connectorSmbDocument_allReferences.setUndeletable(true);
    connectorSmbDocument_allReferences.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_allRemovedAuths = connectorSmbDocumentSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    connectorSmbDocument_allRemovedAuths.setMultivalue(true);
    connectorSmbDocument_allRemovedAuths.setSystemReserved(true);
    connectorSmbDocument_allRemovedAuths.setUndeletable(true);
    connectorSmbDocument_allRemovedAuths.setEssential(true);
    connectorSmbDocument_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_attachedAncestors = connectorSmbDocumentSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    connectorSmbDocument_attachedAncestors.setMultivalue(true);
    connectorSmbDocument_attachedAncestors.setSystemReserved(true);
    connectorSmbDocument_attachedAncestors.setUndeletable(true);
    connectorSmbDocument_attachedAncestors.setEssential(true);
    connectorSmbDocument_attachedAncestors.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_autocomplete = connectorSmbDocumentSchema.create("autocomplete").setType(MetadataValueType.STRING);
    connectorSmbDocument_autocomplete.setMultivalue(true);
    connectorSmbDocument_autocomplete.setSystemReserved(true);
    connectorSmbDocument_autocomplete.setUndeletable(true);
    connectorSmbDocument_autocomplete.setEssential(true);
    connectorSmbDocument_autocomplete.setMultiLingual(true);
    MetadataBuilder connectorSmbDocument_caption = connectorSmbDocumentSchema.create("caption").setType(MetadataValueType.STRING);
    connectorSmbDocument_caption.setSystemReserved(true);
    connectorSmbDocument_caption.setUndeletable(true);
    connectorSmbDocument_caption.setMultiLingual(false);
    connectorSmbDocument_caption.setSortable(true);
    MetadataBuilder connectorSmbDocument_connector = connectorSmbDocumentSchema.create("connector").setType(MetadataValueType.REFERENCE);
    connectorSmbDocument_connector.setDefaultRequirement(true);
    connectorSmbDocument_connector.setUndeletable(true);
    connectorSmbDocument_connector.defineReferencesTo(asList(types.getSchema("connectorInstance_smb")));
    MetadataBuilder connectorSmbDocument_connectorType = connectorSmbDocumentSchema.create("connectorType").setType(MetadataValueType.REFERENCE);
    connectorSmbDocument_connectorType.setDefaultRequirement(true);
    connectorSmbDocument_connectorType.setUndeletable(true);
    connectorSmbDocument_connectorType.defineReferencesTo(asList(types.getSchema("connectorType_default")));
    MetadataBuilder connectorSmbDocument_connectorUrl = connectorSmbDocumentSchema.create("connectorUrl").setType(MetadataValueType.STRING);
    connectorSmbDocument_connectorUrl.setDefaultRequirement(true);
    connectorSmbDocument_connectorUrl.setSystemReserved(true);
    connectorSmbDocument_connectorUrl.setUndeletable(true);
    connectorSmbDocument_connectorUrl.setEssentialInSummary(true);
    connectorSmbDocument_connectorUrl.setUniqueValue(true);
    MetadataBuilder connectorSmbDocument_createdBy = connectorSmbDocumentSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    connectorSmbDocument_createdBy.setSystemReserved(true);
    connectorSmbDocument_createdBy.setUndeletable(true);
    connectorSmbDocument_createdBy.setMultiLingual(false);
    connectorSmbDocument_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorSmbDocument_createdOn = connectorSmbDocumentSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    connectorSmbDocument_createdOn.setSystemReserved(true);
    connectorSmbDocument_createdOn.setUndeletable(true);
    connectorSmbDocument_createdOn.setMultiLingual(false);
    connectorSmbDocument_createdOn.setSortable(true);
    MetadataBuilder connectorSmbDocument_deleted = connectorSmbDocumentSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_deleted.setSystemReserved(true);
    connectorSmbDocument_deleted.setUndeletable(true);
    connectorSmbDocument_deleted.setMultiLingual(false);
    connectorSmbDocument_deleted.setEssentialInSummary(true);
    MetadataBuilder connectorSmbDocument_denyTokens = connectorSmbDocumentSchema.create("denyTokens").setType(MetadataValueType.STRING);
    connectorSmbDocument_denyTokens.setMultivalue(true);
    connectorSmbDocument_denyTokens.setSystemReserved(true);
    connectorSmbDocument_denyTokens.setUndeletable(true);
    connectorSmbDocument_denyTokens.setMultiLingual(false);
    connectorSmbDocument_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbDocument_detachedauthorizations = connectorSmbDocumentSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_detachedauthorizations.setSystemReserved(true);
    connectorSmbDocument_detachedauthorizations.setUndeletable(true);
    connectorSmbDocument_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_errorCode = connectorSmbDocumentSchema.create("errorCode").setType(MetadataValueType.STRING);
    connectorSmbDocument_errorCode.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_errorMessage = connectorSmbDocumentSchema.create("errorMessage").setType(MetadataValueType.STRING);
    connectorSmbDocument_errorMessage.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_errorOnPhysicalDeletion = connectorSmbDocumentSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_errorOnPhysicalDeletion.setSystemReserved(true);
    connectorSmbDocument_errorOnPhysicalDeletion.setUndeletable(true);
    connectorSmbDocument_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_errorStackTrace = connectorSmbDocumentSchema.create("errorStackTrace").setType(MetadataValueType.TEXT);
    connectorSmbDocument_errorStackTrace.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_errorsCount = connectorSmbDocumentSchema.create("errorsCount").setType(MetadataValueType.NUMBER);
    connectorSmbDocument_errorsCount.setUndeletable(true);
    connectorSmbDocument_errorsCount.setDefaultValue(0);
    MetadataBuilder connectorSmbDocument_estimatedSize = connectorSmbDocumentSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    connectorSmbDocument_estimatedSize.setSystemReserved(true);
    connectorSmbDocument_estimatedSize.setUndeletable(true);
    connectorSmbDocument_estimatedSize.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_extension = connectorSmbDocumentSchema.create("extension").setType(MetadataValueType.STRING);
    connectorSmbDocument_extension.setUndeletable(true);
    connectorSmbDocument_extension.setSearchable(true);
    MetadataBuilder connectorSmbDocument_fetchDelay = connectorSmbDocumentSchema.create("fetchDelay").setType(MetadataValueType.NUMBER);
    connectorSmbDocument_fetchDelay.setUndeletable(true);
    connectorSmbDocument_fetchDelay.setDefaultValue(10);
    MetadataBuilder connectorSmbDocument_fetched = connectorSmbDocumentSchema.create("fetched").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_fetched.setUndeletable(true);
    connectorSmbDocument_fetched.setDefaultValue(true);
    MetadataBuilder connectorSmbDocument_fetchedDateTime = connectorSmbDocumentSchema.create("fetchedDateTime").setType(MetadataValueType.DATE_TIME);
    connectorSmbDocument_fetchedDateTime.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_frequency = connectorSmbDocumentSchema.create("frequency").setType(MetadataValueType.ENUM);
    connectorSmbDocument_frequency.setUndeletable(true);
    connectorSmbDocument_frequency.defineAsEnum(FetchFrequency.class);
    MetadataBuilder connectorSmbDocument_hidden = connectorSmbDocumentSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_hidden.setSystemReserved(true);
    connectorSmbDocument_hidden.setUndeletable(true);
    connectorSmbDocument_hidden.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_id = connectorSmbDocumentSchema.create("id").setType(MetadataValueType.STRING);
    connectorSmbDocument_id.setDefaultRequirement(true);
    connectorSmbDocument_id.setSystemReserved(true);
    connectorSmbDocument_id.setUndeletable(true);
    connectorSmbDocument_id.setMultiLingual(false);
    connectorSmbDocument_id.setSearchable(true);
    connectorSmbDocument_id.setSortable(true);
    connectorSmbDocument_id.setUniqueValue(true);
    connectorSmbDocument_id.setUnmodifiable(true);
    MetadataBuilder connectorSmbDocument_language = connectorSmbDocumentSchema.create("language").setType(MetadataValueType.STRING);
    connectorSmbDocument_language.setUndeletable(true);
    connectorSmbDocument_language.setSearchable(true);
    MetadataBuilder connectorSmbDocument_lastFetchAttempt = connectorSmbDocumentSchema.create("lastFetchAttempt").setType(MetadataValueType.DATE_TIME);
    connectorSmbDocument_lastFetchAttempt.setUndeletable(true);
    connectorSmbDocument_lastFetchAttempt.setSearchable(true);
    MetadataBuilder connectorSmbDocument_lastFetchAttemptDetails = connectorSmbDocumentSchema.create("lastFetchAttemptDetails").setType(MetadataValueType.STRING);
    connectorSmbDocument_lastFetchAttemptDetails.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_lastFetchAttemptStatus = connectorSmbDocumentSchema.create("lastFetchAttemptStatus").setType(MetadataValueType.ENUM);
    connectorSmbDocument_lastFetchAttemptStatus.setUndeletable(true);
    connectorSmbDocument_lastFetchAttemptStatus.setSearchable(true);
    connectorSmbDocument_lastFetchAttemptStatus.defineAsEnum(LastFetchedStatus.class);
    MetadataBuilder connectorSmbDocument_lastModified = connectorSmbDocumentSchema.create("lastModified").setType(MetadataValueType.DATE_TIME);
    connectorSmbDocument_lastModified.setUndeletable(true);
    connectorSmbDocument_lastModified.setEssentialInSummary(true);
    connectorSmbDocument_lastModified.setSearchable(true);
    MetadataBuilder connectorSmbDocument_legacyIdentifier = connectorSmbDocumentSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    connectorSmbDocument_legacyIdentifier.setDefaultRequirement(true);
    connectorSmbDocument_legacyIdentifier.setSystemReserved(true);
    connectorSmbDocument_legacyIdentifier.setUndeletable(true);
    connectorSmbDocument_legacyIdentifier.setMultiLingual(false);
    connectorSmbDocument_legacyIdentifier.setSearchable(true);
    connectorSmbDocument_legacyIdentifier.setUniqueValue(true);
    connectorSmbDocument_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder connectorSmbDocument_logicallyDeletedOn = connectorSmbDocumentSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    connectorSmbDocument_logicallyDeletedOn.setSystemReserved(true);
    connectorSmbDocument_logicallyDeletedOn.setUndeletable(true);
    connectorSmbDocument_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_manualTokens = connectorSmbDocumentSchema.create("manualTokens").setType(MetadataValueType.STRING);
    connectorSmbDocument_manualTokens.setMultivalue(true);
    connectorSmbDocument_manualTokens.setSystemReserved(true);
    connectorSmbDocument_manualTokens.setUndeletable(true);
    connectorSmbDocument_manualTokens.setMultiLingual(false);
    connectorSmbDocument_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbDocument_markedForParsing = connectorSmbDocumentSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_markedForParsing.setSystemReserved(true);
    connectorSmbDocument_markedForParsing.setUndeletable(true);
    connectorSmbDocument_markedForParsing.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_markedForPreviewConversion = connectorSmbDocumentSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_markedForPreviewConversion.setSystemReserved(true);
    connectorSmbDocument_markedForPreviewConversion.setUndeletable(true);
    connectorSmbDocument_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_markedForReindexing = connectorSmbDocumentSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_markedForReindexing.setSystemReserved(true);
    connectorSmbDocument_markedForReindexing.setUndeletable(true);
    connectorSmbDocument_markedForReindexing.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_migrationDataVersion = connectorSmbDocumentSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    connectorSmbDocument_migrationDataVersion.setSystemReserved(true);
    connectorSmbDocument_migrationDataVersion.setUndeletable(true);
    connectorSmbDocument_migrationDataVersion.setMultiLingual(false);
    connectorSmbDocument_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder connectorSmbDocument_mimetype = connectorSmbDocumentSchema.create("mimetype").setType(MetadataValueType.STRING);
    connectorSmbDocument_mimetype.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_modifiedBy = connectorSmbDocumentSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    connectorSmbDocument_modifiedBy.setSystemReserved(true);
    connectorSmbDocument_modifiedBy.setUndeletable(true);
    connectorSmbDocument_modifiedBy.setMultiLingual(false);
    connectorSmbDocument_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder connectorSmbDocument_modifiedOn = connectorSmbDocumentSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    connectorSmbDocument_modifiedOn.setSystemReserved(true);
    connectorSmbDocument_modifiedOn.setUndeletable(true);
    connectorSmbDocument_modifiedOn.setMultiLingual(false);
    connectorSmbDocument_modifiedOn.setSortable(true);
    MetadataBuilder connectorSmbDocument_neverFetch = connectorSmbDocumentSchema.create("neverFetch").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_neverFetch.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_nextFetch = connectorSmbDocumentSchema.create("nextFetch").setType(MetadataValueType.DATE_TIME);
    connectorSmbDocument_nextFetch.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_parentConnectorUrl = connectorSmbDocumentSchema.create("parentConnectorUrl").setType(MetadataValueType.STRING);
    connectorSmbDocument_parentConnectorUrl.setUndeletable(true);
    connectorSmbDocument_parentConnectorUrl.setEssentialInSummary(true);
    MetadataBuilder connectorSmbDocument_parentUrl = connectorSmbDocumentSchema.create("parentUrl").setType(MetadataValueType.STRING);
    connectorSmbDocument_parentUrl.setSystemReserved(true);
    connectorSmbDocument_parentUrl.setUndeletable(true);
    connectorSmbDocument_parentUrl.setEssentialInSummary(true);
    MetadataBuilder connectorSmbDocument_parsedContent = connectorSmbDocumentSchema.create("parsedContent").setType(MetadataValueType.TEXT);
    connectorSmbDocument_parsedContent.setUndeletable(true);
    connectorSmbDocument_parsedContent.setSearchable(true);
    MetadataBuilder connectorSmbDocument_path = connectorSmbDocumentSchema.create("path").setType(MetadataValueType.STRING);
    connectorSmbDocument_path.setMultivalue(true);
    connectorSmbDocument_path.setSystemReserved(true);
    connectorSmbDocument_path.setUndeletable(true);
    connectorSmbDocument_path.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_pathParts = connectorSmbDocumentSchema.create("pathParts").setType(MetadataValueType.STRING);
    connectorSmbDocument_pathParts.setMultivalue(true);
    connectorSmbDocument_pathParts.setSystemReserved(true);
    connectorSmbDocument_pathParts.setUndeletable(true);
    connectorSmbDocument_pathParts.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_permissionsHash = connectorSmbDocumentSchema.create("permissionsHash").setType(MetadataValueType.STRING);
    connectorSmbDocument_permissionsHash.setUndeletable(true);
    connectorSmbDocument_permissionsHash.setEssentialInSummary(true);
    MetadataBuilder connectorSmbDocument_principalpath = connectorSmbDocumentSchema.create("principalpath").setType(MetadataValueType.STRING);
    connectorSmbDocument_principalpath.setSystemReserved(true);
    connectorSmbDocument_principalpath.setUndeletable(true);
    connectorSmbDocument_principalpath.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_removedauthorizations = connectorSmbDocumentSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    connectorSmbDocument_removedauthorizations.setMultivalue(true);
    connectorSmbDocument_removedauthorizations.setSystemReserved(true);
    connectorSmbDocument_removedauthorizations.setUndeletable(true);
    connectorSmbDocument_removedauthorizations.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_schema = connectorSmbDocumentSchema.create("schema").setType(MetadataValueType.STRING);
    connectorSmbDocument_schema.setDefaultRequirement(true);
    connectorSmbDocument_schema.setSystemReserved(true);
    connectorSmbDocument_schema.setUndeletable(true);
    connectorSmbDocument_schema.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_searchable = connectorSmbDocumentSchema.create("searchable").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_searchable.setUndeletable(true);
    connectorSmbDocument_searchable.setDefaultValue(true);
    MetadataBuilder connectorSmbDocument_shareDenyTokens = connectorSmbDocumentSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    connectorSmbDocument_shareDenyTokens.setMultivalue(true);
    connectorSmbDocument_shareDenyTokens.setSystemReserved(true);
    connectorSmbDocument_shareDenyTokens.setUndeletable(true);
    connectorSmbDocument_shareDenyTokens.setMultiLingual(false);
    connectorSmbDocument_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbDocument_shareTokens = connectorSmbDocumentSchema.create("shareTokens").setType(MetadataValueType.STRING);
    connectorSmbDocument_shareTokens.setMultivalue(true);
    connectorSmbDocument_shareTokens.setSystemReserved(true);
    connectorSmbDocument_shareTokens.setUndeletable(true);
    connectorSmbDocument_shareTokens.setMultiLingual(false);
    connectorSmbDocument_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder connectorSmbDocument_size = connectorSmbDocumentSchema.create("size").setType(MetadataValueType.NUMBER);
    connectorSmbDocument_size.setUndeletable(true);
    connectorSmbDocument_size.setEssentialInSummary(true);
    connectorSmbDocument_size.setSearchable(true);
    MetadataBuilder connectorSmbDocument_status = connectorSmbDocumentSchema.create("status").setType(MetadataValueType.ENUM);
    connectorSmbDocument_status.setUndeletable(true);
    connectorSmbDocument_status.defineAsEnum(ConnectorDocumentStatus.class);
    MetadataBuilder connectorSmbDocument_title = connectorSmbDocumentSchema.create("title").setType(MetadataValueType.STRING);
    connectorSmbDocument_title.setUndeletable(true);
    connectorSmbDocument_title.setMultiLingual(false);
    connectorSmbDocument_title.setSchemaAutocomplete(true);
    connectorSmbDocument_title.setSearchable(true);
    MetadataBuilder connectorSmbDocument_tokens = connectorSmbDocumentSchema.create("tokens").setType(MetadataValueType.STRING);
    connectorSmbDocument_tokens.setMultivalue(true);
    connectorSmbDocument_tokens.setSystemReserved(true);
    connectorSmbDocument_tokens.setUndeletable(true);
    connectorSmbDocument_tokens.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_tokensHierarchy = connectorSmbDocumentSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    connectorSmbDocument_tokensHierarchy.setMultivalue(true);
    connectorSmbDocument_tokensHierarchy.setSystemReserved(true);
    connectorSmbDocument_tokensHierarchy.setUndeletable(true);
    connectorSmbDocument_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder connectorSmbDocument_traversalCode = connectorSmbDocumentSchema.create("traversalCode").setType(MetadataValueType.STRING);
    connectorSmbDocument_traversalCode.setDefaultRequirement(true);
    connectorSmbDocument_traversalCode.setUndeletable(true);
    MetadataBuilder connectorSmbDocument_url = connectorSmbDocumentSchema.create("url").setType(MetadataValueType.STRING);
    connectorSmbDocument_url.setDefaultRequirement(true);
    connectorSmbDocument_url.setUndeletable(true);
    connectorSmbDocument_url.setMultiLingual(false);
    connectorSmbDocument_url.setEssentialInSummary(true);
    MetadataBuilder connectorSmbDocument_visibleInTrees = connectorSmbDocumentSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    connectorSmbDocument_visibleInTrees.setSystemReserved(true);
    connectorSmbDocument_visibleInTrees.setUndeletable(true);
    connectorSmbDocument_visibleInTrees.setMultiLingual(false);
  }

  public void applySchemasDisplay(SchemasDisplayManager manager) {
    SchemaTypesDisplayTransactionBuilder transaction = manager.newTransactionBuilderFor(collection);
    SchemaTypesDisplayConfig typesConfig = manager.getTypes(collection);
    transaction.add(manager.getType(collection, "connectorHttpDocument").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default"))));
    transaction.add(manager.getSchema(collection, "connectorHttpDocument_default").withFormMetadataCodes(asList("connectorHttpDocument_default_title", "connectorHttpDocument_default_charset", "connectorHttpDocument_default_connector", "connectorHttpDocument_default_connectorType", "connectorHttpDocument_default_contentType", "connectorHttpDocument_default_copyOf", "connectorHttpDocument_default_digest", "connectorHttpDocument_default_downloadTime", "connectorHttpDocument_default_errorCode", "connectorHttpDocument_default_errorMessage", "connectorHttpDocument_default_errorsCount", "connectorHttpDocument_default_fetchDelay", "connectorHttpDocument_default_frequency", "connectorHttpDocument_default_inlinks", "connectorHttpDocument_default_level", "connectorHttpDocument_default_mimetype", "connectorHttpDocument_default_outlinks", "connectorHttpDocument_default_priority", "connectorHttpDocument_default_status", "connectorHttpDocument_default_traversalCode", "connectorHttpDocument_default_url", "connectorHttpDocument_default_fetchedDateTime", "connectorHttpDocument_default_lastModified", "connectorHttpDocument_default_fetched", "connectorHttpDocument_default_neverFetch", "connectorHttpDocument_default_onDemand", "connectorHttpDocument_default_searchable", "connectorHttpDocument_default_errorStackTrace", "connectorHttpDocument_default_parsedContent")).withDisplayMetadataCodes(asList("connectorHttpDocument_default_title", "connectorHttpDocument_default_createdBy", "connectorHttpDocument_default_createdOn", "connectorHttpDocument_default_modifiedBy", "connectorHttpDocument_default_modifiedOn", "connectorHttpDocument_default_charset", "connectorHttpDocument_default_connector", "connectorHttpDocument_default_connectorType", "connectorHttpDocument_default_contentType", "connectorHttpDocument_default_copyOf", "connectorHttpDocument_default_digest", "connectorHttpDocument_default_downloadTime", "connectorHttpDocument_default_errorCode", "connectorHttpDocument_default_errorMessage", "connectorHttpDocument_default_errorsCount", "connectorHttpDocument_default_fetchDelay", "connectorHttpDocument_default_fetched", "connectorHttpDocument_default_fetchedDateTime", "connectorHttpDocument_default_frequency", "connectorHttpDocument_default_inlinks", "connectorHttpDocument_default_lastModified", "connectorHttpDocument_default_level", "connectorHttpDocument_default_mimetype", "connectorHttpDocument_default_neverFetch", "connectorHttpDocument_default_nextFetch", "connectorHttpDocument_default_onDemand", "connectorHttpDocument_default_outlinks", "connectorHttpDocument_default_priority", "connectorHttpDocument_default_searchable", "connectorHttpDocument_default_status", "connectorHttpDocument_default_traversalCode", "connectorHttpDocument_default_errorStackTrace", "connectorHttpDocument_default_parsedContent")).withSearchResultsMetadataCodes(asList("connectorHttpDocument_default_title", "connectorHttpDocument_default_modifiedOn", "connectorHttpDocument_default_url")).withTableMetadataCodes(asList("connectorHttpDocument_default_title", "connectorHttpDocument_default_modifiedOn", "connectorHttpDocument_default_url")));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_connector").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_contentType").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_description").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_errorCode").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_lastModified").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_level").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_parsedContent").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorHttpDocument_default_url").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getType(collection, "connectorInstance").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("connectors.advanced", "connectors.credentialsTab", "connectors.executionTab", "connectors.ldapUserTab", "default:connectors.configurationTab"))));
    transaction.add(manager.getSchema(collection, "connectorInstance_http").withFormMetadataCodes(asList("connectorInstance_http_code", "connectorInstance_http_title", "connectorInstance_http_connectorType", "connectorInstance_http_traversalCode", "connectorInstance_http_lastTraversalOn", "connectorInstance_http_enabled", "connectorInstance_http_availableFields", "connectorInstance_http_propertiesMapping", "connectorInstance_http_traversalSchedule", "connectorInstance_http_authenticationScheme", "connectorInstance_http_daysBeforeRefetching", "connectorInstance_http_documentsPerJobs", "connectorInstance_http_domain", "connectorInstance_http_jobsInParallel", "connectorInstance_http_maxLevel", "connectorInstance_http_password", "connectorInstance_http_username", "connectorInstance_http_onDemands", "connectorInstance_http_seeds", "connectorInstance_http_includePatterns", "connectorInstance_http_excludePatterns")).withDisplayMetadataCodes(asList("connectorInstance_http_code", "connectorInstance_http_title", "connectorInstance_http_connectorType", "connectorInstance_http_traversalCode", "connectorInstance_http_createdBy", "connectorInstance_http_createdOn", "connectorInstance_http_modifiedBy", "connectorInstance_http_enabled", "connectorInstance_http_lastTraversalOn", "connectorInstance_http_authenticationScheme", "connectorInstance_http_daysBeforeRefetching", "connectorInstance_http_documentsPerJobs", "connectorInstance_http_domain", "connectorInstance_http_jobsInParallel", "connectorInstance_http_maxLevel", "connectorInstance_http_onDemands", "connectorInstance_http_password", "connectorInstance_http_seeds", "connectorInstance_http_username", "connectorInstance_http_modifiedOn", "connectorInstance_http_includePatterns", "connectorInstance_http_excludePatterns")).withSearchResultsMetadataCodes(asList("connectorInstance_http_title", "connectorInstance_http_connectorType", "connectorInstance_http_traversalCode")).withTableMetadataCodes(new ArrayList<String>()));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_authenticationScheme").withMetadataGroup("connectors.credentialsTab").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_daysBeforeRefetching").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_documentsPerJobs").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_domain").withMetadataGroup("connectors.credentialsTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_enabled").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_jobsInParallel").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_password").withMetadataGroup("connectors.credentialsTab").withInputType(MetadataInputType.PASSWORD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_traversalSchedule").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_http_username").withMetadataGroup("connectors.credentialsTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "connectorInstance_ldap").withFormMetadataCodes(asList("connectorInstance_ldap_code", "connectorInstance_ldap_title", "connectorInstance_ldap_connectionUsername", "connectorInstance_ldap_password", "connectorInstance_ldap_url", "connectorInstance_ldap_usersBaseContextList", "connectorInstance_ldap_includeRegex", "connectorInstance_ldap_excludeRegex", "connectorInstance_ldap_followReferences", "connectorInstance_ldap_enabled", "connectorInstance_ldap_traversalSchedule", "connectorInstance_ldap_documentsPerJob", "connectorInstance_ldap_jobsInParallel", "connectorInstance_ldap_dn", "connectorInstance_ldap_username", "connectorInstance_ldap_firstName", "connectorInstance_ldap_lastName", "connectorInstance_ldap_email", "connectorInstance_ldap_telephone", "connectorInstance_ldap_address", "connectorInstance_ldap_jobTitle", "connectorInstance_ldap_displayName", "connectorInstance_ldap_company", "connectorInstance_ldap_department", "connectorInstance_ldap_manager")).withDisplayMetadataCodes(asList("connectorInstance_ldap_code", "connectorInstance_ldap_title", "connectorInstance_ldap_url", "connectorInstance_ldap_usersBaseContextList", "connectorInstance_ldap_includeRegex", "connectorInstance_ldap_excludeRegex")).withSearchResultsMetadataCodes(asList("connectorInstance_ldap_title", "connectorInstance_ldap_connectorType", "connectorInstance_ldap_traversalCode")).withTableMetadataCodes(new ArrayList<String>()));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_address").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_company").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_connectionUsername").withMetadataGroup("default:connectors.configurationTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_department").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_directoryType").withMetadataGroup("default:connectors.configurationTab").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_displayName").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_dn").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_documentsPerJob").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_email").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_enabled").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_fetchUsers").withMetadataGroup("default:connectors.configurationTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_firstName").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_followReferences").withMetadataGroup("default:connectors.configurationTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_jobTitle").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_jobsInParallel").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_lastName").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_manager").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_password").withMetadataGroup("default:connectors.configurationTab").withInputType(MetadataInputType.PASSWORD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_telephone").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_traversalSchedule").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_url").withMetadataGroup("default:connectors.configurationTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_username").withMetadataGroup("connectors.ldapUserTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_ldap_usersBaseContextList").withMetadataGroup("default:connectors.configurationTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "connectorInstance_smb").withFormMetadataCodes(asList("connectorInstance_smb_code", "connectorInstance_smb_title", "connectorInstance_smb_domain", "connectorInstance_smb_username", "connectorInstance_smb_password", "connectorInstance_smb_smbSeeds", "connectorInstance_smb_exclusions", "connectorInstance_smb_inclusions", "connectorInstance_smb_enabled", "connectorInstance_smb_traversalSchedule", "connectorInstance_smb_skipShareAccessControl", "connectorInstance_smb_skipContentAndACL")).withDisplayMetadataCodes(asList("connectorInstance_smb_code", "connectorInstance_smb_title", "connectorInstance_smb_domain", "connectorInstance_smb_username", "connectorInstance_smb_smbSeeds", "connectorInstance_smb_exclusions", "connectorInstance_smb_inclusions")).withSearchResultsMetadataCodes(asList("connectorInstance_smb_title", "connectorInstance_smb_connectorType", "connectorInstance_smb_traversalCode")).withTableMetadataCodes(new ArrayList<String>()));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_enabled").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_password").withMetadataGroup("").withInputType(MetadataInputType.PASSWORD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_skipContentAndACL").withMetadataGroup("connectors.advanced").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_skipShareAccessControl").withMetadataGroup("connectors.advanced").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_smb_traversalSchedule").withMetadataGroup("connectors.executionTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "connectorInstance_default").withFormMetadataCodes(asList("connectorInstance_default_code", "connectorInstance_default_title", "connectorInstance_default_connectorType", "connectorInstance_default_traversalCode", "connectorInstance_default_lastTraversalOn", "connectorInstance_default_enabled", "connectorInstance_default_availableFields", "connectorInstance_default_propertiesMapping", "connectorInstance_default_traversalSchedule")).withDisplayMetadataCodes(asList("connectorInstance_default_code", "connectorInstance_default_title", "connectorInstance_default_connectorType", "connectorInstance_default_traversalCode", "connectorInstance_default_createdBy", "connectorInstance_default_createdOn", "connectorInstance_default_modifiedBy", "connectorInstance_default_enabled", "connectorInstance_default_lastTraversalOn", "connectorInstance_default_modifiedOn")).withSearchResultsMetadataCodes(asList("connectorInstance_default_title", "connectorInstance_default_connectorType", "connectorInstance_default_traversalCode")).withTableMetadataCodes(asList("connectorInstance_default_title", "connectorInstance_default_connectorType", "connectorInstance_default_traversalCode")));
    transaction.add(manager.getMetadata(collection, "connectorInstance_default_connectorType").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorInstance_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorInstance_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "connectorLdapUserDocument").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default"))));
    transaction.add(manager.getSchema(collection, "connectorLdapUserDocument_default").withFormMetadataCodes(asList("connectorLdapUserDocument_default_title", "connectorLdapUserDocument_default_company", "connectorLdapUserDocument_default_connector", "connectorLdapUserDocument_default_connectorType", "connectorLdapUserDocument_default_department", "connectorLdapUserDocument_default_displayName", "connectorLdapUserDocument_default_email", "connectorLdapUserDocument_default_errorCode", "connectorLdapUserDocument_default_errorMessage", "connectorLdapUserDocument_default_errorsCount", "connectorLdapUserDocument_default_fetchDelay", "connectorLdapUserDocument_default_firstName", "connectorLdapUserDocument_default_frequency", "connectorLdapUserDocument_default_lastName", "connectorLdapUserDocument_default_manager", "connectorLdapUserDocument_default_mimetype", "connectorLdapUserDocument_default_status", "connectorLdapUserDocument_default_telephone", "connectorLdapUserDocument_default_traversalCode", "connectorLdapUserDocument_default_url", "connectorLdapUserDocument_default_username", "connectorLdapUserDocument_default_workTitle", "connectorLdapUserDocument_default_fetchedDateTime", "connectorLdapUserDocument_default_lastModified", "connectorLdapUserDocument_default_enabled", "connectorLdapUserDocument_default_fetched", "connectorLdapUserDocument_default_neverFetch", "connectorLdapUserDocument_default_searchable", "connectorLdapUserDocument_default_address", "connectorLdapUserDocument_default_errorStackTrace")).withDisplayMetadataCodes(asList("connectorLdapUserDocument_default_title", "connectorLdapUserDocument_default_createdBy", "connectorLdapUserDocument_default_createdOn", "connectorLdapUserDocument_default_modifiedBy", "connectorLdapUserDocument_default_modifiedOn", "connectorLdapUserDocument_default_company", "connectorLdapUserDocument_default_connector", "connectorLdapUserDocument_default_connectorType", "connectorLdapUserDocument_default_department", "connectorLdapUserDocument_default_displayName", "connectorLdapUserDocument_default_email", "connectorLdapUserDocument_default_enabled", "connectorLdapUserDocument_default_errorCode", "connectorLdapUserDocument_default_errorMessage", "connectorLdapUserDocument_default_errorsCount", "connectorLdapUserDocument_default_fetchDelay", "connectorLdapUserDocument_default_fetched", "connectorLdapUserDocument_default_fetchedDateTime", "connectorLdapUserDocument_default_firstName", "connectorLdapUserDocument_default_frequency", "connectorLdapUserDocument_default_lastModified", "connectorLdapUserDocument_default_lastName", "connectorLdapUserDocument_default_manager", "connectorLdapUserDocument_default_mimetype", "connectorLdapUserDocument_default_neverFetch", "connectorLdapUserDocument_default_nextFetch", "connectorLdapUserDocument_default_searchable", "connectorLdapUserDocument_default_status", "connectorLdapUserDocument_default_telephone", "connectorLdapUserDocument_default_traversalCode", "connectorLdapUserDocument_default_username", "connectorLdapUserDocument_default_workTitle", "connectorLdapUserDocument_default_address", "connectorLdapUserDocument_default_errorStackTrace")).withSearchResultsMetadataCodes(asList("connectorLdapUserDocument_default_firstName", "connectorLdapUserDocument_default_lastName", "connectorLdapUserDocument_default_telephone", "connectorLdapUserDocument_default_email", "connectorLdapUserDocument_default_address", "connectorLdapUserDocument_default_title")).withTableMetadataCodes(asList("connectorLdapUserDocument_default_firstName", "connectorLdapUserDocument_default_lastName", "connectorLdapUserDocument_default_telephone", "connectorLdapUserDocument_default_email", "connectorLdapUserDocument_default_address", "connectorLdapUserDocument_default_title")));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_address").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_company").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_connector").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_department").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_email").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_firstName").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_lastModified").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_lastName").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_telephone").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_username").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorLdapUserDocument_default_workTitle").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getType(collection, "connectorSmbDocument").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default"))));
    transaction.add(manager.getSchema(collection, "connectorSmbDocument_default").withFormMetadataCodes(asList("connectorSmbDocument_default_title", "connectorSmbDocument_default_connector", "connectorSmbDocument_default_connectorType", "connectorSmbDocument_default_errorCode", "connectorSmbDocument_default_errorMessage", "connectorSmbDocument_default_errorsCount", "connectorSmbDocument_default_extension", "connectorSmbDocument_default_fetchDelay", "connectorSmbDocument_default_frequency", "connectorSmbDocument_default_language", "connectorSmbDocument_default_lastFetchAttemptDetails", "connectorSmbDocument_default_lastFetchAttemptStatus", "connectorSmbDocument_default_mimetype", "connectorSmbDocument_default_permissionsHash", "connectorSmbDocument_default_size", "connectorSmbDocument_default_status", "connectorSmbDocument_default_traversalCode", "connectorSmbDocument_default_url", "connectorSmbDocument_default_fetchedDateTime", "connectorSmbDocument_default_lastFetchAttempt", "connectorSmbDocument_default_lastModified", "connectorSmbDocument_default_fetched", "connectorSmbDocument_default_neverFetch", "connectorSmbDocument_default_searchable", "connectorSmbDocument_default_errorStackTrace", "connectorSmbDocument_default_parsedContent")).withDisplayMetadataCodes(asList("connectorSmbDocument_default_title", "connectorSmbDocument_default_createdBy", "connectorSmbDocument_default_createdOn", "connectorSmbDocument_default_modifiedBy", "connectorSmbDocument_default_modifiedOn", "connectorSmbDocument_default_connector", "connectorSmbDocument_default_connectorType", "connectorSmbDocument_default_errorCode", "connectorSmbDocument_default_errorMessage", "connectorSmbDocument_default_errorsCount", "connectorSmbDocument_default_extension", "connectorSmbDocument_default_fetchDelay", "connectorSmbDocument_default_fetched", "connectorSmbDocument_default_fetchedDateTime", "connectorSmbDocument_default_frequency", "connectorSmbDocument_default_language", "connectorSmbDocument_default_lastFetchAttempt", "connectorSmbDocument_default_lastFetchAttemptDetails", "connectorSmbDocument_default_lastFetchAttemptStatus", "connectorSmbDocument_default_lastModified", "connectorSmbDocument_default_mimetype", "connectorSmbDocument_default_neverFetch", "connectorSmbDocument_default_nextFetch", "connectorSmbDocument_default_permissionsHash", "connectorSmbDocument_default_searchable", "connectorSmbDocument_default_size", "connectorSmbDocument_default_status", "connectorSmbDocument_default_traversalCode", "connectorSmbDocument_default_errorStackTrace", "connectorSmbDocument_default_parsedContent")).withSearchResultsMetadataCodes(asList("connectorSmbDocument_default_title", "connectorSmbDocument_default_modifiedOn", "connectorSmbDocument_default_connectorUrl", "connectorSmbDocument_default_parentConnectorUrl", "connectorSmbDocument_default_parentUrl", "connectorSmbDocument_default_lastModified", "connectorSmbDocument_default_url", "connectorSmbDocument_default_size")).withTableMetadataCodes(asList("connectorSmbDocument_default_title", "connectorSmbDocument_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_connectorUrl").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_extension").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_language").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_lastFetchAttempt").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_lastFetchAttemptStatus").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_lastModified").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_parentConnectorUrl").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_parsedContent").withMetadataGroup("").withInputType(MetadataInputType.TEXTAREA).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_size").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbDocument_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "connectorSmbFolder_default").withFormMetadataCodes(asList("connectorSmbFolder_default_title", "connectorSmbFolder_default_connector", "connectorSmbFolder_default_connectorType", "connectorSmbFolder_default_errorCode", "connectorSmbFolder_default_errorMessage", "connectorSmbFolder_default_errorsCount", "connectorSmbFolder_default_fetchDelay", "connectorSmbFolder_default_frequency", "connectorSmbFolder_default_lastFetchedStatus", "connectorSmbFolder_default_mimetype", "connectorSmbFolder_default_permissionsHash", "connectorSmbFolder_default_status", "connectorSmbFolder_default_traversalCode", "connectorSmbFolder_default_url", "connectorSmbFolder_default_fetchedDateTime", "connectorSmbFolder_default_lastFetchAttempt", "connectorSmbFolder_default_lastModified", "connectorSmbFolder_default_fetched", "connectorSmbFolder_default_neverFetch", "connectorSmbFolder_default_searchable", "connectorSmbFolder_default_errorStackTrace")).withDisplayMetadataCodes(asList("connectorSmbFolder_default_title", "connectorSmbFolder_default_createdBy", "connectorSmbFolder_default_createdOn", "connectorSmbFolder_default_modifiedBy", "connectorSmbFolder_default_modifiedOn", "connectorSmbFolder_default_connector", "connectorSmbFolder_default_connectorType", "connectorSmbFolder_default_errorCode", "connectorSmbFolder_default_errorMessage", "connectorSmbFolder_default_errorsCount", "connectorSmbFolder_default_fetchDelay", "connectorSmbFolder_default_fetched", "connectorSmbFolder_default_fetchedDateTime", "connectorSmbFolder_default_frequency", "connectorSmbFolder_default_lastFetchAttempt", "connectorSmbFolder_default_lastFetchedStatus", "connectorSmbFolder_default_lastModified", "connectorSmbFolder_default_mimetype", "connectorSmbFolder_default_neverFetch", "connectorSmbFolder_default_nextFetch", "connectorSmbFolder_default_permissionsHash", "connectorSmbFolder_default_searchable", "connectorSmbFolder_default_status", "connectorSmbFolder_default_traversalCode", "connectorSmbFolder_default_errorStackTrace")).withSearchResultsMetadataCodes(asList("connectorSmbFolder_default_title", "connectorSmbFolder_default_modifiedOn", "connectorSmbFolder_default_connectorUrl", "connectorSmbFolder_default_parentConnectorUrl", "connectorSmbFolder_default_parentUrl", "connectorSmbFolder_default_lastModified", "connectorSmbFolder_default_url")).withTableMetadataCodes(asList("connectorSmbFolder_default_title", "connectorSmbFolder_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_connectorUrl").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_lastFetchAttempt").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_lastFetchedStatus").withMetadataGroup("").withInputType(MetadataInputType.RADIO_BUTTONS).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_lastModified").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_parentConnectorUrl").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_parentUrl").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorSmbFolder_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorType_default_id").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorType_default_legacyIdentifier").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "connectorType_default_path").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "connectorType_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(false));
    manager.execute(transaction.build());
  }

  public void applyGeneratedRoles() {
    RolesManager rolesManager = appLayerFactory.getModelLayerFactory().getRolesManager();;
    rolesManager.updateRole(rolesManager.getRole(collection, "ADM").withNewPermissions(asList("core.accessDeleteAllTemporaryRecords", "core.batchProcess", "core.deleteContentVersion", "core.deletePublicSavedSearch", "core.ldapConfigurationManagement", "core.manageConnectors", "core.manageEmailServer", "core.manageExcelReport", "core.manageFacets", "core.manageLabels", "core.manageMetadataExtractor", "core.manageMetadataSchemas", "core.managePrintableReport", "core.manageSearchBoost", "core.manageSecurity", "core.manageSystemCollections", "core.manageSystemConfiguration", "core.manageSystemDataImports", "core.manageSystemGroups", "core.manageSystemGroupsActivation", "core.manageSystemUpdates", "core.manageSystemUsers", "core.manageTaxonomies", "core.manageTrash", "core.manageValueList", "core.managerTemporaryRecords", "core.modifyPublicSavedSearch", "core.seeAllTemporaryRecords", "core.useExternalAPIS", "core.viewEvents", "core.viewLoginNotificationAlert", "core.viewSystemBatchProcesses", "core.viewSystemState")));
  }
}