package com.constellio.app.modules.tasks.migrations;

import com.constellio.model.entities.schemas.RecordCacheType;
import com.constellio.app.services.schemasDisplay.SchemaTypesDisplayTransactionBuilder;
import com.constellio.app.entities.schemasDisplay.SchemaTypesDisplayConfig;
import com.constellio.model.entities.schemas.MetadataValueType;
import com.constellio.model.services.security.roles.RolesManager;

import static java.util.Arrays.asList;

import com.constellio.app.entities.modules.MigrationResourcesProvider;
import com.constellio.app.entities.schemasDisplay.enums.MetadataInputType;
import com.constellio.app.modules.rm.wrappers.structures.CommentFactory;
import com.constellio.app.modules.tasks.model.calculators.DecisionsTasksCalculator;
import com.constellio.app.modules.tasks.model.calculators.TaskFollowersCalculator;
import com.constellio.app.modules.tasks.model.calculators.TaskHiddenStatusCalculator;
import com.constellio.app.modules.tasks.model.calculators.TaskIsLateCalculator;
import com.constellio.app.modules.tasks.model.calculators.TaskNextReminderOnCalculator;
import com.constellio.app.modules.tasks.model.calculators.TaskTokensCalculator2;
import com.constellio.app.modules.tasks.model.calculators.TaskVisibleInTreesCalculator;
import com.constellio.app.modules.tasks.model.validators.TaskStatusValidator;
import com.constellio.app.modules.tasks.model.validators.TaskValidator;
import com.constellio.app.modules.tasks.model.wrappers.TaskStatusType;
import com.constellio.app.modules.tasks.model.wrappers.WorkflowInstanceStatus;
import com.constellio.app.modules.tasks.model.wrappers.structures.TaskFollowerFactory;
import com.constellio.app.modules.tasks.model.wrappers.structures.TaskReminderFactory;
import com.constellio.app.services.factories.AppLayerFactory;
import com.constellio.app.services.schemasDisplay.SchemasDisplayManager;
import com.constellio.model.entities.records.structures.NestedRecordAuthorizationsStructureFactory;
import com.constellio.model.entities.structures.MapStringListStringStructureFactory;
import com.constellio.model.entities.structures.MapStringStringStructureFactory;
import com.constellio.model.services.contents.ContentFactory;
import com.constellio.model.services.schemas.builders.MetadataBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypeBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypesBuilder;
import com.constellio.model.services.schemas.calculators.AllReferencesCalculator;
import com.constellio.model.services.schemas.calculators.AllRemovedAuthsCalculator;
import com.constellio.model.services.schemas.calculators.AttachedAncestorsCalculator2;
import com.constellio.model.services.schemas.calculators.AutocompleteFieldCalculator;
import com.constellio.model.services.schemas.calculators.DefaultTokensOfHierarchyCalculator;
import com.constellio.model.services.schemas.calculators.IntegerAttachedPrincipalConceptsAncestorsCalculator;
import com.constellio.model.services.schemas.calculators.IntegerDetachedPrincipalConceptsAncestorsCalculator;
import com.constellio.model.services.schemas.calculators.PathCalculator;
import com.constellio.model.services.schemas.calculators.PathPartsCalculator;
import com.constellio.model.services.schemas.calculators.PrincipalAncestorsCalculator;
import com.constellio.model.services.schemas.calculators.PrincipalConceptsIntIdsCalculator;
import com.constellio.model.services.schemas.calculators.PrincipalPathCalculator;
import com.constellio.model.services.schemas.calculators.SecondaryConceptsIntIdsCalculator;
import com.constellio.model.services.schemas.calculators.TokensCalculator5;
import com.constellio.model.services.schemas.validators.ManualTokenValidator;
import com.constellio.model.services.schemas.validators.PercentageValidator;
import com.constellio.model.services.schemas.validators.metadatas.IllegalCharactersValidator;
import java.lang.String;

public final class GeneratedTasksMigrationCombo {
  String collection;

  AppLayerFactory appLayerFactory;

  MigrationResourcesProvider resourcesProvider;

  GeneratedTasksMigrationCombo(String collection, AppLayerFactory appLayerFactory, MigrationResourcesProvider resourcesProvider) {
    this.collection = collection;
    this.appLayerFactory = appLayerFactory;
    this.resourcesProvider = resourcesProvider;
  }

  public void applyGeneratedSchemaAlteration(MetadataSchemaTypesBuilder typesBuilder) {
    MetadataSchemaTypeBuilder collectionSchemaType = typesBuilder.getSchemaType("collection");
    MetadataSchemaBuilder collectionSchema = collectionSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder groupSchemaType = typesBuilder.getSchemaType("group");
    MetadataSchemaBuilder groupSchema = groupSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userSchemaType = typesBuilder.getSchemaType("user");
    MetadataSchemaBuilder userSchema = userSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder authorizationDetailsSchemaType = typesBuilder.getSchemaType("authorizationDetails");
    MetadataSchemaBuilder authorizationDetailsSchema = authorizationDetailsSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder capsuleSchemaType = typesBuilder.getSchemaType("capsule");
    MetadataSchemaBuilder capsuleSchema = capsuleSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder conversationSchemaType = typesBuilder.getSchemaType("conversation");
    MetadataSchemaBuilder conversationSchema = conversationSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvCapsuleLanguageSchemaType = typesBuilder.getSchemaType("ddvCapsuleLanguage");
    MetadataSchemaBuilder ddvCapsuleLanguageSchema = ddvCapsuleLanguageSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvSourceSchemaType = typesBuilder.getSchemaType("ddvSource");
    MetadataSchemaBuilder ddvSourceSchema = ddvSourceSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder emailToSendSchemaType = typesBuilder.getSchemaType("emailToSend");
    MetadataSchemaBuilder emailToSendSchema = emailToSendSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder eventSchemaType = typesBuilder.getSchemaType("event");
    MetadataSchemaBuilder eventSchema = eventSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder externalAccessUrlSchemaType = typesBuilder.getSchemaType("externalAccessUrl");
    MetadataSchemaBuilder externalAccessUrlSchema = externalAccessUrlSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder facetSchemaType = typesBuilder.getSchemaType("facet");
    MetadataSchemaBuilder facet_fieldSchema = facetSchemaType.getCustomSchema("field");
    MetadataSchemaBuilder facet_querySchema = facetSchemaType.getCustomSchema("query");
    MetadataSchemaBuilder facetSchema = facetSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder messageSchemaType = typesBuilder.getSchemaType("message");
    MetadataSchemaBuilder messageSchema = messageSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder printableSchemaType = typesBuilder.getSchemaType("printable");
    MetadataSchemaBuilder printableSchema = printableSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder reportSchemaType = typesBuilder.getSchemaType("report");
    MetadataSchemaBuilder reportSchema = reportSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder savedSearchSchemaType = typesBuilder.getSchemaType("savedSearch");
    MetadataSchemaBuilder savedSearchSchema = savedSearchSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder searchEventSchemaType = typesBuilder.getSchemaType("searchEvent");
    MetadataSchemaBuilder searchEventSchema = searchEventSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder taskSchemaType = typesBuilder.getSchemaType("task");
    MetadataSchemaBuilder task_approvalSchema = taskSchemaType.getCustomSchema("approval");
    MetadataSchemaBuilder taskSchema = taskSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder temporaryRecordSchemaType = typesBuilder.getSchemaType("temporaryRecord");
    MetadataSchemaBuilder temporaryRecord_batchProcessReportSchema = temporaryRecordSchemaType.getCustomSchema("batchProcessReport");
    MetadataSchemaBuilder temporaryRecord_exportAuditSchema = temporaryRecordSchemaType.getCustomSchema("exportAudit");
    MetadataSchemaBuilder temporaryRecord_importAuditSchema = temporaryRecordSchemaType.getCustomSchema("importAudit");
    MetadataSchemaBuilder temporaryRecord_scriptReportSchema = temporaryRecordSchemaType.getCustomSchema("scriptReport");
    MetadataSchemaBuilder temporaryRecord_vaultScanReportSchema = temporaryRecordSchemaType.getCustomSchema("vaultScanReport");
    MetadataSchemaBuilder temporaryRecordSchema = temporaryRecordSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder thesaurusConfigSchemaType = typesBuilder.getSchemaType("thesaurusConfig");
    MetadataSchemaBuilder thesaurusConfigSchema = thesaurusConfigSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userDocumentSchemaType = typesBuilder.getSchemaType("userDocument");
    MetadataSchemaBuilder userDocumentSchema = userDocumentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userFolderSchemaType = typesBuilder.getSchemaType("userFolder");
    MetadataSchemaBuilder userFolderSchema = userFolderSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder ddvTaskStatusSchemaType = typesBuilder.createNewSchemaTypeWithSecurity("ddvTaskStatus",false).setSecurity(false);
    MetadataSchemaBuilder ddvTaskStatusSchema = ddvTaskStatusSchemaType.getDefaultSchema();
    ddvTaskStatusSchema.defineValidators().add(TaskStatusValidator.class);
    MetadataSchemaTypeBuilder ddvTaskTypeSchemaType = typesBuilder.createNewSchemaTypeWithSecurity("ddvTaskType",false).setSecurity(false);
    MetadataSchemaBuilder ddvTaskTypeSchema = ddvTaskTypeSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userTaskSchemaType = typesBuilder.createNewSchemaTypeWithSecurity("userTask",false).setRecordCacheType(RecordCacheType.SUMMARY_CACHED_WITH_VOLATILE).setSmallCode("t");
    MetadataSchemaBuilder userTaskSchema = userTaskSchemaType.getDefaultSchema();
    userTaskSchema.defineValidators().add(TaskValidator.class);
    MetadataSchemaTypeBuilder workflowSchemaType = typesBuilder.createNewSchemaTypeWithSecurity("workflow",false).setSecurity(false);
    MetadataSchemaBuilder workflowSchema = workflowSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder workflowInstanceSchemaType = typesBuilder.createNewSchemaTypeWithSecurity("workflowInstance",false).setSecurity(false);
    MetadataSchemaBuilder workflowInstanceSchema = workflowInstanceSchemaType.getDefaultSchema();
    createCollectionSchemaTypeMetadatas(typesBuilder,collectionSchemaType, collectionSchema);
    createGroupSchemaTypeMetadatas(typesBuilder,groupSchemaType, groupSchema);
    createUserSchemaTypeMetadatas(typesBuilder,userSchemaType, userSchema);
    createAuthorizationDetailsSchemaTypeMetadatas(typesBuilder,authorizationDetailsSchemaType, authorizationDetailsSchema);
    createCapsuleSchemaTypeMetadatas(typesBuilder,capsuleSchemaType, capsuleSchema);
    createConversationSchemaTypeMetadatas(typesBuilder,conversationSchemaType, conversationSchema);
    createDdvCapsuleLanguageSchemaTypeMetadatas(typesBuilder,ddvCapsuleLanguageSchemaType, ddvCapsuleLanguageSchema);
    createDdvSourceSchemaTypeMetadatas(typesBuilder,ddvSourceSchemaType, ddvSourceSchema);
    createDdvTaskStatusSchemaTypeMetadatas(typesBuilder,ddvTaskStatusSchemaType, ddvTaskStatusSchema);
    createDdvTaskTypeSchemaTypeMetadatas(typesBuilder,ddvTaskTypeSchemaType, ddvTaskTypeSchema);
    createEmailToSendSchemaTypeMetadatas(typesBuilder,emailToSendSchemaType, emailToSendSchema);
    createEventSchemaTypeMetadatas(typesBuilder,eventSchemaType, eventSchema);
    createExternalAccessUrlSchemaTypeMetadatas(typesBuilder,externalAccessUrlSchemaType, externalAccessUrlSchema);
    createFacetSchemaTypeMetadatas(typesBuilder,facetSchemaType, facet_fieldSchema, facet_querySchema, facetSchema);
    createMessageSchemaTypeMetadatas(typesBuilder,messageSchemaType, messageSchema);
    createPrintableSchemaTypeMetadatas(typesBuilder,printableSchemaType, printableSchema);
    createReportSchemaTypeMetadatas(typesBuilder,reportSchemaType, reportSchema);
    createSavedSearchSchemaTypeMetadatas(typesBuilder,savedSearchSchemaType, savedSearchSchema);
    createSearchEventSchemaTypeMetadatas(typesBuilder,searchEventSchemaType, searchEventSchema);
    createTaskSchemaTypeMetadatas(typesBuilder,taskSchemaType, task_approvalSchema, taskSchema);
    createTemporaryRecordSchemaTypeMetadatas(typesBuilder,temporaryRecordSchemaType, temporaryRecord_batchProcessReportSchema, temporaryRecord_exportAuditSchema, temporaryRecord_importAuditSchema, temporaryRecord_scriptReportSchema, temporaryRecord_vaultScanReportSchema, temporaryRecordSchema);
    createThesaurusConfigSchemaTypeMetadatas(typesBuilder,thesaurusConfigSchemaType, thesaurusConfigSchema);
    createUserDocumentSchemaTypeMetadatas(typesBuilder,userDocumentSchemaType, userDocumentSchema);
    createUserFolderSchemaTypeMetadatas(typesBuilder,userFolderSchemaType, userFolderSchema);
    createUserTaskSchemaTypeMetadatas(typesBuilder,userTaskSchemaType, userTaskSchema);
    createWorkflowSchemaTypeMetadatas(typesBuilder,workflowSchemaType, workflowSchema);
    createWorkflowInstanceSchemaTypeMetadatas(typesBuilder,workflowInstanceSchemaType, workflowInstanceSchema);
    ddvTaskStatusSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvTaskStatusSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvTaskStatusSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator2.class);
    ddvTaskStatusSchema.get("attachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerAttachedPrincipalConceptsAncestorsCalculator.class);
    ddvTaskStatusSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvTaskStatusSchema.get("detachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerDetachedPrincipalConceptsAncestorsCalculator.class);
    ddvTaskStatusSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvTaskStatusSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvTaskStatusSchema.get("principalAncestorsIntIds").defineDataEntry().asCalculated(PrincipalAncestorsCalculator.class);
    ddvTaskStatusSchema.get("principalConceptsIntIds").defineDataEntry().asCalculated(PrincipalConceptsIntIdsCalculator.class);
    ddvTaskStatusSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvTaskStatusSchema.get("secondaryConceptsIntIds").defineDataEntry().asCalculated(SecondaryConceptsIntIdsCalculator.class);
    ddvTaskStatusSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator5.class);
    ddvTaskStatusSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    ddvTaskTypeSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    ddvTaskTypeSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    ddvTaskTypeSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator2.class);
    ddvTaskTypeSchema.get("attachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerAttachedPrincipalConceptsAncestorsCalculator.class);
    ddvTaskTypeSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    ddvTaskTypeSchema.get("detachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerDetachedPrincipalConceptsAncestorsCalculator.class);
    ddvTaskTypeSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    ddvTaskTypeSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    ddvTaskTypeSchema.get("principalAncestorsIntIds").defineDataEntry().asCalculated(PrincipalAncestorsCalculator.class);
    ddvTaskTypeSchema.get("principalConceptsIntIds").defineDataEntry().asCalculated(PrincipalConceptsIntIdsCalculator.class);
    ddvTaskTypeSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    ddvTaskTypeSchema.get("secondaryConceptsIntIds").defineDataEntry().asCalculated(SecondaryConceptsIntIdsCalculator.class);
    ddvTaskTypeSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator5.class);
    ddvTaskTypeSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    userTaskSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    userTaskSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    userTaskSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator2.class);
    userTaskSchema.get("attachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerAttachedPrincipalConceptsAncestorsCalculator.class);
    userTaskSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    userTaskSchema.get("detachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerDetachedPrincipalConceptsAncestorsCalculator.class);
    userTaskSchema.get("hidden").defineDataEntry().asCalculated(TaskHiddenStatusCalculator.class);
    userTaskSchema.get("isLate").defineDataEntry().asCalculated(TaskIsLateCalculator.class);
    userTaskSchema.get("nextReminderOn").defineDataEntry().asCalculated(TaskNextReminderOnCalculator.class);
    userTaskSchema.get("nextTasks").defineDataEntry().asCalculated(DecisionsTasksCalculator.class);
    userTaskSchema.get("parentTaskDueDate").defineDataEntry().asCopied(userTaskSchema.get("parentTask"), typesBuilder.getMetadata("userTask_default_dueDate"));
    userTaskSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    userTaskSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    userTaskSchema.get("principalAncestorsIntIds").defineDataEntry().asCalculated(PrincipalAncestorsCalculator.class);
    userTaskSchema.get("principalConceptsIntIds").defineDataEntry().asCalculated(PrincipalConceptsIntIdsCalculator.class);
    userTaskSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    userTaskSchema.get("secondaryConceptsIntIds").defineDataEntry().asCalculated(SecondaryConceptsIntIdsCalculator.class);
    userTaskSchema.get("statusType").defineDataEntry().asCopied(userTaskSchema.get("status"), typesBuilder.getMetadata("ddvTaskStatus_default_statusType"));
    userTaskSchema.get("taskFollowersIds").defineDataEntry().asCalculated(TaskFollowersCalculator.class);
    userTaskSchema.get("tokens").defineDataEntry().asCalculated(TaskTokensCalculator2.class);
    userTaskSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    userTaskSchema.get("visibleInTrees").defineDataEntry().asCalculated(TaskVisibleInTreesCalculator.class);
    workflowSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    workflowSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    workflowSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator2.class);
    workflowSchema.get("attachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerAttachedPrincipalConceptsAncestorsCalculator.class);
    workflowSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    workflowSchema.get("detachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerDetachedPrincipalConceptsAncestorsCalculator.class);
    workflowSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    workflowSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    workflowSchema.get("principalAncestorsIntIds").defineDataEntry().asCalculated(PrincipalAncestorsCalculator.class);
    workflowSchema.get("principalConceptsIntIds").defineDataEntry().asCalculated(PrincipalConceptsIntIdsCalculator.class);
    workflowSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    workflowSchema.get("secondaryConceptsIntIds").defineDataEntry().asCalculated(SecondaryConceptsIntIdsCalculator.class);
    workflowSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator5.class);
    workflowSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
    workflowInstanceSchema.get("allReferences").defineDataEntry().asCalculated(AllReferencesCalculator.class);
    workflowInstanceSchema.get("allRemovedAuths").defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    workflowInstanceSchema.get("attachedAncestors").defineDataEntry().asCalculated(AttachedAncestorsCalculator2.class);
    workflowInstanceSchema.get("attachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerAttachedPrincipalConceptsAncestorsCalculator.class);
    workflowInstanceSchema.get("autocomplete").defineDataEntry().asCalculated(AutocompleteFieldCalculator.class);
    workflowInstanceSchema.get("detachedPrincipalAncestorsIntIds").defineDataEntry().asCalculated(IntegerDetachedPrincipalConceptsAncestorsCalculator.class);
    workflowInstanceSchema.get("path").defineDataEntry().asCalculated(PathCalculator.class);
    workflowInstanceSchema.get("pathParts").defineDataEntry().asCalculated(PathPartsCalculator.class);
    workflowInstanceSchema.get("principalAncestorsIntIds").defineDataEntry().asCalculated(PrincipalAncestorsCalculator.class);
    workflowInstanceSchema.get("principalConceptsIntIds").defineDataEntry().asCalculated(PrincipalConceptsIntIdsCalculator.class);
    workflowInstanceSchema.get("principalpath").defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    workflowInstanceSchema.get("secondaryConceptsIntIds").defineDataEntry().asCalculated(SecondaryConceptsIntIdsCalculator.class);
    workflowInstanceSchema.get("tokens").defineDataEntry().asCalculated(TokensCalculator5.class);
    workflowInstanceSchema.get("tokensHierarchy").defineDataEntry().asCalculated(DefaultTokensOfHierarchyCalculator.class);
  }

  private void createCapsuleSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder capsuleSchemaType, MetadataSchemaBuilder capsuleSchema) {
  }

  private void createDdvTaskTypeSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvTaskTypeSchemaType, MetadataSchemaBuilder ddvTaskTypeSchema) {
    MetadataBuilder ddvTaskType_abbreviation = ddvTaskTypeSchema.create("abbreviation").setType(MetadataValueType.STRING);
    ddvTaskType_abbreviation.setUndeletable(true);
    ddvTaskType_abbreviation.setMultiLingual(true);
    ddvTaskType_abbreviation.setSearchable(true);
    ddvTaskType_abbreviation.defineValidators().add(IllegalCharactersValidator.class);
    MetadataBuilder ddvTaskType_allReferences = ddvTaskTypeSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvTaskType_allReferences.setMultivalue(true);
    ddvTaskType_allReferences.setSystemReserved(true);
    ddvTaskType_allReferences.setUndeletable(true);
    ddvTaskType_allReferences.setMultiLingual(false);
    MetadataBuilder ddvTaskType_allRemovedAuths = ddvTaskTypeSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvTaskType_allRemovedAuths.setMultivalue(true);
    ddvTaskType_allRemovedAuths.setSystemReserved(true);
    ddvTaskType_allRemovedAuths.setUndeletable(true);
    ddvTaskType_allRemovedAuths.setEssential(true);
    ddvTaskType_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvTaskType_attachedAncestors = ddvTaskTypeSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvTaskType_attachedAncestors.setMultivalue(true);
    ddvTaskType_attachedAncestors.setSystemReserved(true);
    ddvTaskType_attachedAncestors.setUndeletable(true);
    ddvTaskType_attachedAncestors.setEssential(true);
    ddvTaskType_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvTaskType_attachedPrincipalAncestorsIntIds = ddvTaskTypeSchema.create("attachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskType_attachedPrincipalAncestorsIntIds.setMultivalue(true);
    ddvTaskType_attachedPrincipalAncestorsIntIds.setSystemReserved(true);
    ddvTaskType_attachedPrincipalAncestorsIntIds.setUndeletable(true);
    ddvTaskType_attachedPrincipalAncestorsIntIds.setMultiLingual(false);
    ddvTaskType_attachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskType_autocomplete = ddvTaskTypeSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvTaskType_autocomplete.setMultivalue(true);
    ddvTaskType_autocomplete.setSystemReserved(true);
    ddvTaskType_autocomplete.setUndeletable(true);
    ddvTaskType_autocomplete.setEssential(true);
    ddvTaskType_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvTaskType_caption = ddvTaskTypeSchema.create("caption").setType(MetadataValueType.STRING);
    ddvTaskType_caption.setSystemReserved(true);
    ddvTaskType_caption.setUndeletable(true);
    ddvTaskType_caption.setMultiLingual(false);
    ddvTaskType_caption.setSortable(true);
    MetadataBuilder ddvTaskType_code = ddvTaskTypeSchema.create("code").setType(MetadataValueType.STRING);
    ddvTaskType_code.setDefaultRequirement(true);
    ddvTaskType_code.setUndeletable(true);
    ddvTaskType_code.setSchemaAutocomplete(true);
    ddvTaskType_code.setSearchable(true);
    ddvTaskType_code.setUniqueValue(true);
    ddvTaskType_code.defineValidators().add(IllegalCharactersValidator.class);
    MetadataBuilder ddvTaskType_comments = ddvTaskTypeSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvTaskType_comments.setMultivalue(true);
    ddvTaskType_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvTaskType_createdBy = ddvTaskTypeSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvTaskType_createdBy.setSystemReserved(true);
    ddvTaskType_createdBy.setUndeletable(true);
    ddvTaskType_createdBy.setMultiLingual(false);
    ddvTaskType_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvTaskType_createdOn = ddvTaskTypeSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvTaskType_createdOn.setSystemReserved(true);
    ddvTaskType_createdOn.setUndeletable(true);
    ddvTaskType_createdOn.setMultiLingual(false);
    ddvTaskType_createdOn.setSortable(true);
    MetadataBuilder ddvTaskType_deleted = ddvTaskTypeSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_deleted.setSystemReserved(true);
    ddvTaskType_deleted.setUndeletable(true);
    ddvTaskType_deleted.setMultiLingual(false);
    MetadataBuilder ddvTaskType_denyTokens = ddvTaskTypeSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvTaskType_denyTokens.setMultivalue(true);
    ddvTaskType_denyTokens.setSystemReserved(true);
    ddvTaskType_denyTokens.setUndeletable(true);
    ddvTaskType_denyTokens.setMultiLingual(false);
    ddvTaskType_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskType_description = ddvTaskTypeSchema.create("description").setType(MetadataValueType.TEXT);
    ddvTaskType_description.setUndeletable(true);
    ddvTaskType_description.setMultiLingual(true);
    ddvTaskType_description.setSearchable(true);
    MetadataBuilder ddvTaskType_detachedPrincipalAncestorsIntIds = ddvTaskTypeSchema.create("detachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskType_detachedPrincipalAncestorsIntIds.setMultivalue(true);
    ddvTaskType_detachedPrincipalAncestorsIntIds.setSystemReserved(true);
    ddvTaskType_detachedPrincipalAncestorsIntIds.setUndeletable(true);
    ddvTaskType_detachedPrincipalAncestorsIntIds.setMultiLingual(false);
    ddvTaskType_detachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskType_detachedauthorizations = ddvTaskTypeSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_detachedauthorizations.setSystemReserved(true);
    ddvTaskType_detachedauthorizations.setUndeletable(true);
    ddvTaskType_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvTaskType_errorOnPhysicalDeletion = ddvTaskTypeSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvTaskType_errorOnPhysicalDeletion.setUndeletable(true);
    ddvTaskType_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder ddvTaskType_estimatedSize = ddvTaskTypeSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    ddvTaskType_estimatedSize.setSystemReserved(true);
    ddvTaskType_estimatedSize.setUndeletable(true);
    ddvTaskType_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvTaskType_hidden = ddvTaskTypeSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_hidden.setSystemReserved(true);
    ddvTaskType_hidden.setUndeletable(true);
    ddvTaskType_hidden.setMultiLingual(false);
    MetadataBuilder ddvTaskType_id = ddvTaskTypeSchema.create("id").setType(MetadataValueType.STRING);
    ddvTaskType_id.setDefaultRequirement(true);
    ddvTaskType_id.setSystemReserved(true);
    ddvTaskType_id.setUndeletable(true);
    ddvTaskType_id.setMultiLingual(false);
    ddvTaskType_id.setSearchable(true);
    ddvTaskType_id.setSortable(true);
    ddvTaskType_id.setUniqueValue(true);
    ddvTaskType_id.setUnmodifiable(true);
    MetadataBuilder ddvTaskType_legacyIdentifier = ddvTaskTypeSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvTaskType_legacyIdentifier.setDefaultRequirement(true);
    ddvTaskType_legacyIdentifier.setSystemReserved(true);
    ddvTaskType_legacyIdentifier.setUndeletable(true);
    ddvTaskType_legacyIdentifier.setMultiLingual(false);
    ddvTaskType_legacyIdentifier.setSearchable(true);
    ddvTaskType_legacyIdentifier.setUniqueValue(true);
    ddvTaskType_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvTaskType_linkedSchema = ddvTaskTypeSchema.create("linkedSchema").setType(MetadataValueType.STRING);
    MetadataBuilder ddvTaskType_logicallyDeletedOn = ddvTaskTypeSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvTaskType_logicallyDeletedOn.setSystemReserved(true);
    ddvTaskType_logicallyDeletedOn.setUndeletable(true);
    ddvTaskType_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvTaskType_manualTokens = ddvTaskTypeSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvTaskType_manualTokens.setMultivalue(true);
    ddvTaskType_manualTokens.setSystemReserved(true);
    ddvTaskType_manualTokens.setUndeletable(true);
    ddvTaskType_manualTokens.setMultiLingual(false);
    ddvTaskType_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskType_markedForParsing = ddvTaskTypeSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_markedForParsing.setSystemReserved(true);
    ddvTaskType_markedForParsing.setUndeletable(true);
    ddvTaskType_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvTaskType_markedForPreviewConversion = ddvTaskTypeSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_markedForPreviewConversion.setSystemReserved(true);
    ddvTaskType_markedForPreviewConversion.setUndeletable(true);
    ddvTaskType_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvTaskType_markedForReindexing = ddvTaskTypeSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_markedForReindexing.setSystemReserved(true);
    ddvTaskType_markedForReindexing.setUndeletable(true);
    ddvTaskType_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvTaskType_migrationDataVersion = ddvTaskTypeSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvTaskType_migrationDataVersion.setSystemReserved(true);
    ddvTaskType_migrationDataVersion.setUndeletable(true);
    ddvTaskType_migrationDataVersion.setMultiLingual(false);
    ddvTaskType_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvTaskType_modifiedBy = ddvTaskTypeSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvTaskType_modifiedBy.setSystemReserved(true);
    ddvTaskType_modifiedBy.setUndeletable(true);
    ddvTaskType_modifiedBy.setMultiLingual(false);
    ddvTaskType_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvTaskType_modifiedOn = ddvTaskTypeSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvTaskType_modifiedOn.setSystemReserved(true);
    ddvTaskType_modifiedOn.setUndeletable(true);
    ddvTaskType_modifiedOn.setMultiLingual(false);
    ddvTaskType_modifiedOn.setSortable(true);
    MetadataBuilder ddvTaskType_nestedAuthorizations = ddvTaskTypeSchema.create("nestedAuthorizations").setType(MetadataValueType.STRUCTURE);
    ddvTaskType_nestedAuthorizations.setSystemReserved(true);
    ddvTaskType_nestedAuthorizations.setUndeletable(true);
    ddvTaskType_nestedAuthorizations.setMultiLingual(false);
    ddvTaskType_nestedAuthorizations.setEssentialInSummary(true);
    ddvTaskType_nestedAuthorizations.defineStructureFactory(NestedRecordAuthorizationsStructureFactory.class);
    MetadataBuilder ddvTaskType_path = ddvTaskTypeSchema.create("path").setType(MetadataValueType.STRING);
    ddvTaskType_path.setMultivalue(true);
    ddvTaskType_path.setSystemReserved(true);
    ddvTaskType_path.setUndeletable(true);
    ddvTaskType_path.setMultiLingual(false);
    MetadataBuilder ddvTaskType_pathParts = ddvTaskTypeSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvTaskType_pathParts.setMultivalue(true);
    ddvTaskType_pathParts.setSystemReserved(true);
    ddvTaskType_pathParts.setUndeletable(true);
    ddvTaskType_pathParts.setMultiLingual(false);
    MetadataBuilder ddvTaskType_principalAncestorsIntIds = ddvTaskTypeSchema.create("principalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskType_principalAncestorsIntIds.setMultivalue(true);
    ddvTaskType_principalAncestorsIntIds.setSystemReserved(true);
    ddvTaskType_principalAncestorsIntIds.setUndeletable(true);
    ddvTaskType_principalAncestorsIntIds.setMultiLingual(false);
    ddvTaskType_principalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskType_principalConceptsIntIds = ddvTaskTypeSchema.create("principalConceptsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskType_principalConceptsIntIds.setMultivalue(true);
    ddvTaskType_principalConceptsIntIds.setSystemReserved(true);
    ddvTaskType_principalConceptsIntIds.setUndeletable(true);
    ddvTaskType_principalConceptsIntIds.setMultiLingual(false);
    ddvTaskType_principalConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskType_principalpath = ddvTaskTypeSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvTaskType_principalpath.setSystemReserved(true);
    ddvTaskType_principalpath.setUndeletable(true);
    ddvTaskType_principalpath.setMultiLingual(false);
    MetadataBuilder ddvTaskType_removedauthorizations = ddvTaskTypeSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvTaskType_removedauthorizations.setMultivalue(true);
    ddvTaskType_removedauthorizations.setSystemReserved(true);
    ddvTaskType_removedauthorizations.setUndeletable(true);
    ddvTaskType_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvTaskType_schema = ddvTaskTypeSchema.create("schema").setType(MetadataValueType.STRING);
    ddvTaskType_schema.setDefaultRequirement(true);
    ddvTaskType_schema.setSystemReserved(true);
    ddvTaskType_schema.setUndeletable(true);
    ddvTaskType_schema.setMultiLingual(false);
    MetadataBuilder ddvTaskType_secondaryConceptsIntIds = ddvTaskTypeSchema.create("secondaryConceptsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskType_secondaryConceptsIntIds.setMultivalue(true);
    ddvTaskType_secondaryConceptsIntIds.setSystemReserved(true);
    ddvTaskType_secondaryConceptsIntIds.setUndeletable(true);
    ddvTaskType_secondaryConceptsIntIds.setMultiLingual(false);
    ddvTaskType_secondaryConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskType_shareDenyTokens = ddvTaskTypeSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvTaskType_shareDenyTokens.setMultivalue(true);
    ddvTaskType_shareDenyTokens.setSystemReserved(true);
    ddvTaskType_shareDenyTokens.setUndeletable(true);
    ddvTaskType_shareDenyTokens.setMultiLingual(false);
    ddvTaskType_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskType_shareTokens = ddvTaskTypeSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvTaskType_shareTokens.setMultivalue(true);
    ddvTaskType_shareTokens.setSystemReserved(true);
    ddvTaskType_shareTokens.setUndeletable(true);
    ddvTaskType_shareTokens.setMultiLingual(false);
    ddvTaskType_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskType_title = ddvTaskTypeSchema.create("title").setType(MetadataValueType.STRING);
    ddvTaskType_title.setDefaultRequirement(true);
    ddvTaskType_title.setUndeletable(true);
    ddvTaskType_title.setMultiLingual(true);
    ddvTaskType_title.setSchemaAutocomplete(true);
    ddvTaskType_title.setSearchable(true);
    ddvTaskType_title.setUniqueValue(true);
    ddvTaskType_title.defineValidators().add(IllegalCharactersValidator.class);
    MetadataBuilder ddvTaskType_tokens = ddvTaskTypeSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvTaskType_tokens.setMultivalue(true);
    ddvTaskType_tokens.setSystemReserved(true);
    ddvTaskType_tokens.setUndeletable(true);
    ddvTaskType_tokens.setMultiLingual(false);
    MetadataBuilder ddvTaskType_tokensHierarchy = ddvTaskTypeSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvTaskType_tokensHierarchy.setMultivalue(true);
    ddvTaskType_tokensHierarchy.setSystemReserved(true);
    ddvTaskType_tokensHierarchy.setUndeletable(true);
    ddvTaskType_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvTaskType_visibleInTrees = ddvTaskTypeSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvTaskType_visibleInTrees.setSystemReserved(true);
    ddvTaskType_visibleInTrees.setUndeletable(true);
    ddvTaskType_visibleInTrees.setMultiLingual(false);
  }

  private void createSavedSearchSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder savedSearchSchemaType, MetadataSchemaBuilder savedSearchSchema) {
  }

  private void createUserDocumentSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userDocumentSchemaType, MetadataSchemaBuilder userDocumentSchema) {
  }

  private void createDdvCapsuleLanguageSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvCapsuleLanguageSchemaType, MetadataSchemaBuilder ddvCapsuleLanguageSchema) {
  }

  private void createEmailToSendSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder emailToSendSchemaType, MetadataSchemaBuilder emailToSendSchema) {
  }

  private void createEventSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder eventSchemaType, MetadataSchemaBuilder eventSchema) {
  }

  private void createConversationSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder conversationSchemaType, MetadataSchemaBuilder conversationSchema) {
  }

  private void createGroupSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder groupSchemaType, MetadataSchemaBuilder groupSchema) {
  }

  private void createWorkflowInstanceSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder workflowInstanceSchemaType, MetadataSchemaBuilder workflowInstanceSchema) {
    MetadataBuilder workflowInstance_allReferences = workflowInstanceSchema.create("allReferences").setType(MetadataValueType.STRING);
    workflowInstance_allReferences.setMultivalue(true);
    workflowInstance_allReferences.setSystemReserved(true);
    workflowInstance_allReferences.setUndeletable(true);
    workflowInstance_allReferences.setMultiLingual(false);
    MetadataBuilder workflowInstance_allRemovedAuths = workflowInstanceSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    workflowInstance_allRemovedAuths.setMultivalue(true);
    workflowInstance_allRemovedAuths.setSystemReserved(true);
    workflowInstance_allRemovedAuths.setUndeletable(true);
    workflowInstance_allRemovedAuths.setEssential(true);
    workflowInstance_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder workflowInstance_attachedAncestors = workflowInstanceSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    workflowInstance_attachedAncestors.setMultivalue(true);
    workflowInstance_attachedAncestors.setSystemReserved(true);
    workflowInstance_attachedAncestors.setUndeletable(true);
    workflowInstance_attachedAncestors.setEssential(true);
    workflowInstance_attachedAncestors.setMultiLingual(false);
    MetadataBuilder workflowInstance_attachedPrincipalAncestorsIntIds = workflowInstanceSchema.create("attachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    workflowInstance_attachedPrincipalAncestorsIntIds.setMultivalue(true);
    workflowInstance_attachedPrincipalAncestorsIntIds.setSystemReserved(true);
    workflowInstance_attachedPrincipalAncestorsIntIds.setUndeletable(true);
    workflowInstance_attachedPrincipalAncestorsIntIds.setMultiLingual(false);
    workflowInstance_attachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflowInstance_autocomplete = workflowInstanceSchema.create("autocomplete").setType(MetadataValueType.STRING);
    workflowInstance_autocomplete.setMultivalue(true);
    workflowInstance_autocomplete.setSystemReserved(true);
    workflowInstance_autocomplete.setUndeletable(true);
    workflowInstance_autocomplete.setEssential(true);
    workflowInstance_autocomplete.setMultiLingual(true);
    MetadataBuilder workflowInstance_caption = workflowInstanceSchema.create("caption").setType(MetadataValueType.STRING);
    workflowInstance_caption.setSystemReserved(true);
    workflowInstance_caption.setUndeletable(true);
    workflowInstance_caption.setMultiLingual(false);
    workflowInstance_caption.setSortable(true);
    MetadataBuilder workflowInstance_createdBy = workflowInstanceSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    workflowInstance_createdBy.setSystemReserved(true);
    workflowInstance_createdBy.setUndeletable(true);
    workflowInstance_createdBy.setMultiLingual(false);
    workflowInstance_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder workflowInstance_createdOn = workflowInstanceSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    workflowInstance_createdOn.setSystemReserved(true);
    workflowInstance_createdOn.setUndeletable(true);
    workflowInstance_createdOn.setMultiLingual(false);
    workflowInstance_createdOn.setSortable(true);
    MetadataBuilder workflowInstance_deleted = workflowInstanceSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    workflowInstance_deleted.setSystemReserved(true);
    workflowInstance_deleted.setUndeletable(true);
    workflowInstance_deleted.setMultiLingual(false);
    MetadataBuilder workflowInstance_denyTokens = workflowInstanceSchema.create("denyTokens").setType(MetadataValueType.STRING);
    workflowInstance_denyTokens.setMultivalue(true);
    workflowInstance_denyTokens.setSystemReserved(true);
    workflowInstance_denyTokens.setUndeletable(true);
    workflowInstance_denyTokens.setMultiLingual(false);
    workflowInstance_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflowInstance_detachedPrincipalAncestorsIntIds = workflowInstanceSchema.create("detachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    workflowInstance_detachedPrincipalAncestorsIntIds.setMultivalue(true);
    workflowInstance_detachedPrincipalAncestorsIntIds.setSystemReserved(true);
    workflowInstance_detachedPrincipalAncestorsIntIds.setUndeletable(true);
    workflowInstance_detachedPrincipalAncestorsIntIds.setMultiLingual(false);
    workflowInstance_detachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflowInstance_detachedauthorizations = workflowInstanceSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    workflowInstance_detachedauthorizations.setSystemReserved(true);
    workflowInstance_detachedauthorizations.setUndeletable(true);
    workflowInstance_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder workflowInstance_errorOnPhysicalDeletion = workflowInstanceSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    workflowInstance_errorOnPhysicalDeletion.setSystemReserved(true);
    workflowInstance_errorOnPhysicalDeletion.setUndeletable(true);
    workflowInstance_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder workflowInstance_estimatedSize = workflowInstanceSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    workflowInstance_estimatedSize.setSystemReserved(true);
    workflowInstance_estimatedSize.setUndeletable(true);
    workflowInstance_estimatedSize.setMultiLingual(false);
    MetadataBuilder workflowInstance_extraFields = workflowInstanceSchema.create("extraFields").setType(MetadataValueType.STRUCTURE);
    workflowInstance_extraFields.defineStructureFactory(MapStringListStringStructureFactory.class);
    MetadataBuilder workflowInstance_hidden = workflowInstanceSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    workflowInstance_hidden.setSystemReserved(true);
    workflowInstance_hidden.setUndeletable(true);
    workflowInstance_hidden.setMultiLingual(false);
    MetadataBuilder workflowInstance_id = workflowInstanceSchema.create("id").setType(MetadataValueType.STRING);
    workflowInstance_id.setDefaultRequirement(true);
    workflowInstance_id.setSystemReserved(true);
    workflowInstance_id.setUndeletable(true);
    workflowInstance_id.setMultiLingual(false);
    workflowInstance_id.setSearchable(true);
    workflowInstance_id.setSortable(true);
    workflowInstance_id.setUniqueValue(true);
    workflowInstance_id.setUnmodifiable(true);
    MetadataBuilder workflowInstance_legacyIdentifier = workflowInstanceSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    workflowInstance_legacyIdentifier.setDefaultRequirement(true);
    workflowInstance_legacyIdentifier.setSystemReserved(true);
    workflowInstance_legacyIdentifier.setUndeletable(true);
    workflowInstance_legacyIdentifier.setMultiLingual(false);
    workflowInstance_legacyIdentifier.setSearchable(true);
    workflowInstance_legacyIdentifier.setUniqueValue(true);
    workflowInstance_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder workflowInstance_logicallyDeletedOn = workflowInstanceSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    workflowInstance_logicallyDeletedOn.setSystemReserved(true);
    workflowInstance_logicallyDeletedOn.setUndeletable(true);
    workflowInstance_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder workflowInstance_manualTokens = workflowInstanceSchema.create("manualTokens").setType(MetadataValueType.STRING);
    workflowInstance_manualTokens.setMultivalue(true);
    workflowInstance_manualTokens.setSystemReserved(true);
    workflowInstance_manualTokens.setUndeletable(true);
    workflowInstance_manualTokens.setMultiLingual(false);
    workflowInstance_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflowInstance_markedForParsing = workflowInstanceSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    workflowInstance_markedForParsing.setSystemReserved(true);
    workflowInstance_markedForParsing.setUndeletable(true);
    workflowInstance_markedForParsing.setMultiLingual(false);
    MetadataBuilder workflowInstance_markedForPreviewConversion = workflowInstanceSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    workflowInstance_markedForPreviewConversion.setSystemReserved(true);
    workflowInstance_markedForPreviewConversion.setUndeletable(true);
    workflowInstance_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder workflowInstance_markedForReindexing = workflowInstanceSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    workflowInstance_markedForReindexing.setSystemReserved(true);
    workflowInstance_markedForReindexing.setUndeletable(true);
    workflowInstance_markedForReindexing.setMultiLingual(false);
    MetadataBuilder workflowInstance_migrationDataVersion = workflowInstanceSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    workflowInstance_migrationDataVersion.setSystemReserved(true);
    workflowInstance_migrationDataVersion.setUndeletable(true);
    workflowInstance_migrationDataVersion.setMultiLingual(false);
    workflowInstance_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder workflowInstance_modifiedBy = workflowInstanceSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    workflowInstance_modifiedBy.setSystemReserved(true);
    workflowInstance_modifiedBy.setUndeletable(true);
    workflowInstance_modifiedBy.setMultiLingual(false);
    workflowInstance_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder workflowInstance_modifiedOn = workflowInstanceSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    workflowInstance_modifiedOn.setSystemReserved(true);
    workflowInstance_modifiedOn.setUndeletable(true);
    workflowInstance_modifiedOn.setMultiLingual(false);
    workflowInstance_modifiedOn.setSortable(true);
    MetadataBuilder workflowInstance_nestedAuthorizations = workflowInstanceSchema.create("nestedAuthorizations").setType(MetadataValueType.STRUCTURE);
    workflowInstance_nestedAuthorizations.setSystemReserved(true);
    workflowInstance_nestedAuthorizations.setUndeletable(true);
    workflowInstance_nestedAuthorizations.setMultiLingual(false);
    workflowInstance_nestedAuthorizations.setEssentialInSummary(true);
    workflowInstance_nestedAuthorizations.defineStructureFactory(NestedRecordAuthorizationsStructureFactory.class);
    MetadataBuilder workflowInstance_path = workflowInstanceSchema.create("path").setType(MetadataValueType.STRING);
    workflowInstance_path.setMultivalue(true);
    workflowInstance_path.setSystemReserved(true);
    workflowInstance_path.setUndeletable(true);
    workflowInstance_path.setMultiLingual(false);
    MetadataBuilder workflowInstance_pathParts = workflowInstanceSchema.create("pathParts").setType(MetadataValueType.STRING);
    workflowInstance_pathParts.setMultivalue(true);
    workflowInstance_pathParts.setSystemReserved(true);
    workflowInstance_pathParts.setUndeletable(true);
    workflowInstance_pathParts.setMultiLingual(false);
    MetadataBuilder workflowInstance_principalAncestorsIntIds = workflowInstanceSchema.create("principalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    workflowInstance_principalAncestorsIntIds.setMultivalue(true);
    workflowInstance_principalAncestorsIntIds.setSystemReserved(true);
    workflowInstance_principalAncestorsIntIds.setUndeletable(true);
    workflowInstance_principalAncestorsIntIds.setMultiLingual(false);
    workflowInstance_principalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflowInstance_principalConceptsIntIds = workflowInstanceSchema.create("principalConceptsIntIds").setType(MetadataValueType.INTEGER);
    workflowInstance_principalConceptsIntIds.setMultivalue(true);
    workflowInstance_principalConceptsIntIds.setSystemReserved(true);
    workflowInstance_principalConceptsIntIds.setUndeletable(true);
    workflowInstance_principalConceptsIntIds.setMultiLingual(false);
    workflowInstance_principalConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflowInstance_principalpath = workflowInstanceSchema.create("principalpath").setType(MetadataValueType.STRING);
    workflowInstance_principalpath.setSystemReserved(true);
    workflowInstance_principalpath.setUndeletable(true);
    workflowInstance_principalpath.setMultiLingual(false);
    MetadataBuilder workflowInstance_removedauthorizations = workflowInstanceSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    workflowInstance_removedauthorizations.setMultivalue(true);
    workflowInstance_removedauthorizations.setSystemReserved(true);
    workflowInstance_removedauthorizations.setUndeletable(true);
    workflowInstance_removedauthorizations.setMultiLingual(false);
    MetadataBuilder workflowInstance_schema = workflowInstanceSchema.create("schema").setType(MetadataValueType.STRING);
    workflowInstance_schema.setDefaultRequirement(true);
    workflowInstance_schema.setSystemReserved(true);
    workflowInstance_schema.setUndeletable(true);
    workflowInstance_schema.setMultiLingual(false);
    MetadataBuilder workflowInstance_secondaryConceptsIntIds = workflowInstanceSchema.create("secondaryConceptsIntIds").setType(MetadataValueType.INTEGER);
    workflowInstance_secondaryConceptsIntIds.setMultivalue(true);
    workflowInstance_secondaryConceptsIntIds.setSystemReserved(true);
    workflowInstance_secondaryConceptsIntIds.setUndeletable(true);
    workflowInstance_secondaryConceptsIntIds.setMultiLingual(false);
    workflowInstance_secondaryConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflowInstance_shareDenyTokens = workflowInstanceSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    workflowInstance_shareDenyTokens.setMultivalue(true);
    workflowInstance_shareDenyTokens.setSystemReserved(true);
    workflowInstance_shareDenyTokens.setUndeletable(true);
    workflowInstance_shareDenyTokens.setMultiLingual(false);
    workflowInstance_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflowInstance_shareTokens = workflowInstanceSchema.create("shareTokens").setType(MetadataValueType.STRING);
    workflowInstance_shareTokens.setMultivalue(true);
    workflowInstance_shareTokens.setSystemReserved(true);
    workflowInstance_shareTokens.setUndeletable(true);
    workflowInstance_shareTokens.setMultiLingual(false);
    workflowInstance_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflowInstance_startedBy = workflowInstanceSchema.create("startedBy").setType(MetadataValueType.REFERENCE);
    workflowInstance_startedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder workflowInstance_startedOn = workflowInstanceSchema.create("startedOn").setType(MetadataValueType.DATE_TIME);
    MetadataBuilder workflowInstance_status = workflowInstanceSchema.create("status").setType(MetadataValueType.ENUM);
    workflowInstance_status.defineAsEnum(WorkflowInstanceStatus.class);
    MetadataBuilder workflowInstance_title = workflowInstanceSchema.create("title").setType(MetadataValueType.STRING);
    workflowInstance_title.setUndeletable(true);
    workflowInstance_title.setMultiLingual(false);
    workflowInstance_title.setSchemaAutocomplete(true);
    workflowInstance_title.setSearchable(true);
    MetadataBuilder workflowInstance_tokens = workflowInstanceSchema.create("tokens").setType(MetadataValueType.STRING);
    workflowInstance_tokens.setMultivalue(true);
    workflowInstance_tokens.setSystemReserved(true);
    workflowInstance_tokens.setUndeletable(true);
    workflowInstance_tokens.setMultiLingual(false);
    MetadataBuilder workflowInstance_tokensHierarchy = workflowInstanceSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    workflowInstance_tokensHierarchy.setMultivalue(true);
    workflowInstance_tokensHierarchy.setSystemReserved(true);
    workflowInstance_tokensHierarchy.setUndeletable(true);
    workflowInstance_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder workflowInstance_visibleInTrees = workflowInstanceSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    workflowInstance_visibleInTrees.setSystemReserved(true);
    workflowInstance_visibleInTrees.setUndeletable(true);
    workflowInstance_visibleInTrees.setMultiLingual(false);
    MetadataBuilder workflowInstance_workflow = workflowInstanceSchema.create("workflow").setType(MetadataValueType.REFERENCE);
    workflowInstance_workflow.defineReferencesTo(types.getSchemaType("workflow"));
  }

  private void createExternalAccessUrlSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder externalAccessUrlSchemaType, MetadataSchemaBuilder externalAccessUrlSchema) {
  }

  private void createWorkflowSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder workflowSchemaType, MetadataSchemaBuilder workflowSchema) {
    MetadataBuilder workflow_allReferences = workflowSchema.create("allReferences").setType(MetadataValueType.STRING);
    workflow_allReferences.setMultivalue(true);
    workflow_allReferences.setSystemReserved(true);
    workflow_allReferences.setUndeletable(true);
    workflow_allReferences.setMultiLingual(false);
    MetadataBuilder workflow_allRemovedAuths = workflowSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    workflow_allRemovedAuths.setMultivalue(true);
    workflow_allRemovedAuths.setSystemReserved(true);
    workflow_allRemovedAuths.setUndeletable(true);
    workflow_allRemovedAuths.setEssential(true);
    workflow_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder workflow_attachedAncestors = workflowSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    workflow_attachedAncestors.setMultivalue(true);
    workflow_attachedAncestors.setSystemReserved(true);
    workflow_attachedAncestors.setUndeletable(true);
    workflow_attachedAncestors.setEssential(true);
    workflow_attachedAncestors.setMultiLingual(false);
    MetadataBuilder workflow_attachedPrincipalAncestorsIntIds = workflowSchema.create("attachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    workflow_attachedPrincipalAncestorsIntIds.setMultivalue(true);
    workflow_attachedPrincipalAncestorsIntIds.setSystemReserved(true);
    workflow_attachedPrincipalAncestorsIntIds.setUndeletable(true);
    workflow_attachedPrincipalAncestorsIntIds.setMultiLingual(false);
    workflow_attachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflow_autocomplete = workflowSchema.create("autocomplete").setType(MetadataValueType.STRING);
    workflow_autocomplete.setMultivalue(true);
    workflow_autocomplete.setSystemReserved(true);
    workflow_autocomplete.setUndeletable(true);
    workflow_autocomplete.setEssential(true);
    workflow_autocomplete.setMultiLingual(true);
    MetadataBuilder workflow_caption = workflowSchema.create("caption").setType(MetadataValueType.STRING);
    workflow_caption.setSystemReserved(true);
    workflow_caption.setUndeletable(true);
    workflow_caption.setMultiLingual(false);
    workflow_caption.setSortable(true);
    MetadataBuilder workflow_code = workflowSchema.create("code").setType(MetadataValueType.STRING);
    workflow_code.setUniqueValue(true);
    MetadataBuilder workflow_createdBy = workflowSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    workflow_createdBy.setSystemReserved(true);
    workflow_createdBy.setUndeletable(true);
    workflow_createdBy.setMultiLingual(false);
    workflow_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder workflow_createdOn = workflowSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    workflow_createdOn.setSystemReserved(true);
    workflow_createdOn.setUndeletable(true);
    workflow_createdOn.setMultiLingual(false);
    workflow_createdOn.setSortable(true);
    MetadataBuilder workflow_deleted = workflowSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    workflow_deleted.setSystemReserved(true);
    workflow_deleted.setUndeletable(true);
    workflow_deleted.setMultiLingual(false);
    MetadataBuilder workflow_denyTokens = workflowSchema.create("denyTokens").setType(MetadataValueType.STRING);
    workflow_denyTokens.setMultivalue(true);
    workflow_denyTokens.setSystemReserved(true);
    workflow_denyTokens.setUndeletable(true);
    workflow_denyTokens.setMultiLingual(false);
    workflow_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflow_detachedPrincipalAncestorsIntIds = workflowSchema.create("detachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    workflow_detachedPrincipalAncestorsIntIds.setMultivalue(true);
    workflow_detachedPrincipalAncestorsIntIds.setSystemReserved(true);
    workflow_detachedPrincipalAncestorsIntIds.setUndeletable(true);
    workflow_detachedPrincipalAncestorsIntIds.setMultiLingual(false);
    workflow_detachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflow_detachedauthorizations = workflowSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    workflow_detachedauthorizations.setSystemReserved(true);
    workflow_detachedauthorizations.setUndeletable(true);
    workflow_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder workflow_errorOnPhysicalDeletion = workflowSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    workflow_errorOnPhysicalDeletion.setSystemReserved(true);
    workflow_errorOnPhysicalDeletion.setUndeletable(true);
    workflow_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder workflow_estimatedSize = workflowSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    workflow_estimatedSize.setSystemReserved(true);
    workflow_estimatedSize.setUndeletable(true);
    workflow_estimatedSize.setMultiLingual(false);
    MetadataBuilder workflow_hidden = workflowSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    workflow_hidden.setSystemReserved(true);
    workflow_hidden.setUndeletable(true);
    workflow_hidden.setMultiLingual(false);
    MetadataBuilder workflow_id = workflowSchema.create("id").setType(MetadataValueType.STRING);
    workflow_id.setDefaultRequirement(true);
    workflow_id.setSystemReserved(true);
    workflow_id.setUndeletable(true);
    workflow_id.setMultiLingual(false);
    workflow_id.setSearchable(true);
    workflow_id.setSortable(true);
    workflow_id.setUniqueValue(true);
    workflow_id.setUnmodifiable(true);
    MetadataBuilder workflow_legacyIdentifier = workflowSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    workflow_legacyIdentifier.setDefaultRequirement(true);
    workflow_legacyIdentifier.setSystemReserved(true);
    workflow_legacyIdentifier.setUndeletable(true);
    workflow_legacyIdentifier.setMultiLingual(false);
    workflow_legacyIdentifier.setSearchable(true);
    workflow_legacyIdentifier.setUniqueValue(true);
    workflow_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder workflow_logicallyDeletedOn = workflowSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    workflow_logicallyDeletedOn.setSystemReserved(true);
    workflow_logicallyDeletedOn.setUndeletable(true);
    workflow_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder workflow_manualTokens = workflowSchema.create("manualTokens").setType(MetadataValueType.STRING);
    workflow_manualTokens.setMultivalue(true);
    workflow_manualTokens.setSystemReserved(true);
    workflow_manualTokens.setUndeletable(true);
    workflow_manualTokens.setMultiLingual(false);
    workflow_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflow_markedForParsing = workflowSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    workflow_markedForParsing.setSystemReserved(true);
    workflow_markedForParsing.setUndeletable(true);
    workflow_markedForParsing.setMultiLingual(false);
    MetadataBuilder workflow_markedForPreviewConversion = workflowSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    workflow_markedForPreviewConversion.setSystemReserved(true);
    workflow_markedForPreviewConversion.setUndeletable(true);
    workflow_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder workflow_markedForReindexing = workflowSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    workflow_markedForReindexing.setSystemReserved(true);
    workflow_markedForReindexing.setUndeletable(true);
    workflow_markedForReindexing.setMultiLingual(false);
    MetadataBuilder workflow_migrationDataVersion = workflowSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    workflow_migrationDataVersion.setSystemReserved(true);
    workflow_migrationDataVersion.setUndeletable(true);
    workflow_migrationDataVersion.setMultiLingual(false);
    workflow_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder workflow_modifiedBy = workflowSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    workflow_modifiedBy.setSystemReserved(true);
    workflow_modifiedBy.setUndeletable(true);
    workflow_modifiedBy.setMultiLingual(false);
    workflow_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder workflow_modifiedOn = workflowSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    workflow_modifiedOn.setSystemReserved(true);
    workflow_modifiedOn.setUndeletable(true);
    workflow_modifiedOn.setMultiLingual(false);
    workflow_modifiedOn.setSortable(true);
    MetadataBuilder workflow_nestedAuthorizations = workflowSchema.create("nestedAuthorizations").setType(MetadataValueType.STRUCTURE);
    workflow_nestedAuthorizations.setSystemReserved(true);
    workflow_nestedAuthorizations.setUndeletable(true);
    workflow_nestedAuthorizations.setMultiLingual(false);
    workflow_nestedAuthorizations.setEssentialInSummary(true);
    workflow_nestedAuthorizations.defineStructureFactory(NestedRecordAuthorizationsStructureFactory.class);
    MetadataBuilder workflow_path = workflowSchema.create("path").setType(MetadataValueType.STRING);
    workflow_path.setMultivalue(true);
    workflow_path.setSystemReserved(true);
    workflow_path.setUndeletable(true);
    workflow_path.setMultiLingual(false);
    MetadataBuilder workflow_pathParts = workflowSchema.create("pathParts").setType(MetadataValueType.STRING);
    workflow_pathParts.setMultivalue(true);
    workflow_pathParts.setSystemReserved(true);
    workflow_pathParts.setUndeletable(true);
    workflow_pathParts.setMultiLingual(false);
    MetadataBuilder workflow_principalAncestorsIntIds = workflowSchema.create("principalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    workflow_principalAncestorsIntIds.setMultivalue(true);
    workflow_principalAncestorsIntIds.setSystemReserved(true);
    workflow_principalAncestorsIntIds.setUndeletable(true);
    workflow_principalAncestorsIntIds.setMultiLingual(false);
    workflow_principalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflow_principalConceptsIntIds = workflowSchema.create("principalConceptsIntIds").setType(MetadataValueType.INTEGER);
    workflow_principalConceptsIntIds.setMultivalue(true);
    workflow_principalConceptsIntIds.setSystemReserved(true);
    workflow_principalConceptsIntIds.setUndeletable(true);
    workflow_principalConceptsIntIds.setMultiLingual(false);
    workflow_principalConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflow_principalpath = workflowSchema.create("principalpath").setType(MetadataValueType.STRING);
    workflow_principalpath.setSystemReserved(true);
    workflow_principalpath.setUndeletable(true);
    workflow_principalpath.setMultiLingual(false);
    MetadataBuilder workflow_removedauthorizations = workflowSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    workflow_removedauthorizations.setMultivalue(true);
    workflow_removedauthorizations.setSystemReserved(true);
    workflow_removedauthorizations.setUndeletable(true);
    workflow_removedauthorizations.setMultiLingual(false);
    MetadataBuilder workflow_schema = workflowSchema.create("schema").setType(MetadataValueType.STRING);
    workflow_schema.setDefaultRequirement(true);
    workflow_schema.setSystemReserved(true);
    workflow_schema.setUndeletable(true);
    workflow_schema.setMultiLingual(false);
    MetadataBuilder workflow_secondaryConceptsIntIds = workflowSchema.create("secondaryConceptsIntIds").setType(MetadataValueType.INTEGER);
    workflow_secondaryConceptsIntIds.setMultivalue(true);
    workflow_secondaryConceptsIntIds.setSystemReserved(true);
    workflow_secondaryConceptsIntIds.setUndeletable(true);
    workflow_secondaryConceptsIntIds.setMultiLingual(false);
    workflow_secondaryConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder workflow_shareDenyTokens = workflowSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    workflow_shareDenyTokens.setMultivalue(true);
    workflow_shareDenyTokens.setSystemReserved(true);
    workflow_shareDenyTokens.setUndeletable(true);
    workflow_shareDenyTokens.setMultiLingual(false);
    workflow_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflow_shareTokens = workflowSchema.create("shareTokens").setType(MetadataValueType.STRING);
    workflow_shareTokens.setMultivalue(true);
    workflow_shareTokens.setSystemReserved(true);
    workflow_shareTokens.setUndeletable(true);
    workflow_shareTokens.setMultiLingual(false);
    workflow_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder workflow_title = workflowSchema.create("title").setType(MetadataValueType.STRING);
    workflow_title.setUndeletable(true);
    workflow_title.setMultiLingual(false);
    workflow_title.setSchemaAutocomplete(true);
    workflow_title.setSearchable(true);
    MetadataBuilder workflow_tokens = workflowSchema.create("tokens").setType(MetadataValueType.STRING);
    workflow_tokens.setMultivalue(true);
    workflow_tokens.setSystemReserved(true);
    workflow_tokens.setUndeletable(true);
    workflow_tokens.setMultiLingual(false);
    MetadataBuilder workflow_tokensHierarchy = workflowSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    workflow_tokensHierarchy.setMultivalue(true);
    workflow_tokensHierarchy.setSystemReserved(true);
    workflow_tokensHierarchy.setUndeletable(true);
    workflow_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder workflow_visibleInTrees = workflowSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    workflow_visibleInTrees.setSystemReserved(true);
    workflow_visibleInTrees.setUndeletable(true);
    workflow_visibleInTrees.setMultiLingual(false);
  }

  private void createCollectionSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder collectionSchemaType, MetadataSchemaBuilder collectionSchema) {
  }

  private void createMessageSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder messageSchemaType, MetadataSchemaBuilder messageSchema) {
  }

  private void createPrintableSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder printableSchemaType, MetadataSchemaBuilder printableSchema) {
  }

  private void createThesaurusConfigSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder thesaurusConfigSchemaType, MetadataSchemaBuilder thesaurusConfigSchema) {
  }

  private void createUserTaskSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userTaskSchemaType, MetadataSchemaBuilder userTaskSchema) {
    MetadataBuilder userTask_allReferences = userTaskSchema.create("allReferences").setType(MetadataValueType.STRING);
    userTask_allReferences.setMultivalue(true);
    userTask_allReferences.setSystemReserved(true);
    userTask_allReferences.setUndeletable(true);
    userTask_allReferences.setMultiLingual(false);
    MetadataBuilder userTask_allRemovedAuths = userTaskSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    userTask_allRemovedAuths.setMultivalue(true);
    userTask_allRemovedAuths.setSystemReserved(true);
    userTask_allRemovedAuths.setUndeletable(true);
    userTask_allRemovedAuths.setEssential(true);
    userTask_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder userTask_assignedOn = userTaskSchema.create("assignedOn").setType(MetadataValueType.DATE);
    userTask_assignedOn.setUndeletable(true);
    MetadataBuilder userTask_assignee = userTaskSchema.create("assignee").setType(MetadataValueType.REFERENCE);
    userTask_assignee.setUndeletable(true);
    userTask_assignee.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_assigneeGroupsCandidates = userTaskSchema.create("assigneeGroupsCandidates").setType(MetadataValueType.REFERENCE);
    userTask_assigneeGroupsCandidates.setMultivalue(true);
    userTask_assigneeGroupsCandidates.setUndeletable(true);
    userTask_assigneeGroupsCandidates.defineReferencesTo(asList(types.getSchema("group_default")));
    MetadataBuilder userTask_assigneeUsersCandidates = userTaskSchema.create("assigneeUsersCandidates").setType(MetadataValueType.REFERENCE);
    userTask_assigneeUsersCandidates.setMultivalue(true);
    userTask_assigneeUsersCandidates.setUndeletable(true);
    userTask_assigneeUsersCandidates.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_assigner = userTaskSchema.create("assigner").setType(MetadataValueType.REFERENCE);
    userTask_assigner.setUndeletable(true);
    userTask_assigner.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_attachedAncestors = userTaskSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    userTask_attachedAncestors.setMultivalue(true);
    userTask_attachedAncestors.setSystemReserved(true);
    userTask_attachedAncestors.setUndeletable(true);
    userTask_attachedAncestors.setEssential(true);
    userTask_attachedAncestors.setMultiLingual(false);
    MetadataBuilder userTask_attachedPrincipalAncestorsIntIds = userTaskSchema.create("attachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    userTask_attachedPrincipalAncestorsIntIds.setMultivalue(true);
    userTask_attachedPrincipalAncestorsIntIds.setSystemReserved(true);
    userTask_attachedPrincipalAncestorsIntIds.setUndeletable(true);
    userTask_attachedPrincipalAncestorsIntIds.setMultiLingual(false);
    userTask_attachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder userTask_autocomplete = userTaskSchema.create("autocomplete").setType(MetadataValueType.STRING);
    userTask_autocomplete.setMultivalue(true);
    userTask_autocomplete.setSystemReserved(true);
    userTask_autocomplete.setUndeletable(true);
    userTask_autocomplete.setEssential(true);
    userTask_autocomplete.setMultiLingual(true);
    MetadataBuilder userTask_caption = userTaskSchema.create("caption").setType(MetadataValueType.STRING);
    userTask_caption.setSystemReserved(true);
    userTask_caption.setUndeletable(true);
    userTask_caption.setMultiLingual(false);
    userTask_caption.setSortable(true);
    MetadataBuilder userTask_comments = userTaskSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    userTask_comments.setMultivalue(true);
    userTask_comments.setUndeletable(true);
    userTask_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder userTask_contents = userTaskSchema.create("contents").setType(MetadataValueType.CONTENT);
    userTask_contents.setMultivalue(true);
    userTask_contents.setUndeletable(true);
    userTask_contents.setSearchable(true);
    userTask_contents.defineStructureFactory(ContentFactory.class);
    MetadataBuilder userTask_createdBy = userTaskSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    userTask_createdBy.setSystemReserved(true);
    userTask_createdBy.setUndeletable(true);
    userTask_createdBy.setMultiLingual(false);
    userTask_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder userTask_createdOn = userTaskSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    userTask_createdOn.setSystemReserved(true);
    userTask_createdOn.setUndeletable(true);
    userTask_createdOn.setMultiLingual(false);
    userTask_createdOn.setSortable(true);
    MetadataBuilder userTask_decision = userTaskSchema.create("decision").setType(MetadataValueType.STRING);
    MetadataBuilder userTask_deleted = userTaskSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    userTask_deleted.setSystemReserved(true);
    userTask_deleted.setUndeletable(true);
    userTask_deleted.setMultiLingual(false);
    userTask_deleted.setEssentialInSummary(true);
    MetadataBuilder userTask_denyTokens = userTaskSchema.create("denyTokens").setType(MetadataValueType.STRING);
    userTask_denyTokens.setMultivalue(true);
    userTask_denyTokens.setSystemReserved(true);
    userTask_denyTokens.setUndeletable(true);
    userTask_denyTokens.setMultiLingual(false);
    userTask_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder userTask_description = userTaskSchema.create("description").setType(MetadataValueType.TEXT);
    userTask_description.setUndeletable(true);
    userTask_description.setSearchable(true);
    MetadataBuilder userTask_detachedPrincipalAncestorsIntIds = userTaskSchema.create("detachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    userTask_detachedPrincipalAncestorsIntIds.setMultivalue(true);
    userTask_detachedPrincipalAncestorsIntIds.setSystemReserved(true);
    userTask_detachedPrincipalAncestorsIntIds.setUndeletable(true);
    userTask_detachedPrincipalAncestorsIntIds.setMultiLingual(false);
    userTask_detachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder userTask_detachedauthorizations = userTaskSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    userTask_detachedauthorizations.setSystemReserved(true);
    userTask_detachedauthorizations.setUndeletable(true);
    userTask_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder userTask_dueDate = userTaskSchema.create("dueDate").setType(MetadataValueType.DATE);
    userTask_dueDate.setUndeletable(true);
    MetadataBuilder userTask_endDate = userTaskSchema.create("endDate").setType(MetadataValueType.DATE);
    userTask_endDate.setUndeletable(true);
    MetadataBuilder userTask_errorOnPhysicalDeletion = userTaskSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    userTask_errorOnPhysicalDeletion.setSystemReserved(true);
    userTask_errorOnPhysicalDeletion.setUndeletable(true);
    userTask_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder userTask_escalationAssignee = userTaskSchema.create("escalationAssignee").setType(MetadataValueType.REFERENCE);
    userTask_escalationAssignee.setUndeletable(true);
    userTask_escalationAssignee.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder userTask_estimatedHours = userTaskSchema.create("estimatedHours").setType(MetadataValueType.NUMBER);
    userTask_estimatedHours.setUndeletable(true);
    MetadataBuilder userTask_estimatedSize = userTaskSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    userTask_estimatedSize.setSystemReserved(true);
    userTask_estimatedSize.setUndeletable(true);
    userTask_estimatedSize.setMultiLingual(false);
    MetadataBuilder userTask_hidden = userTaskSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    userTask_hidden.setSystemReserved(true);
    userTask_hidden.setUndeletable(true);
    userTask_hidden.setMultiLingual(false);
    MetadataBuilder userTask_id = userTaskSchema.create("id").setType(MetadataValueType.STRING);
    userTask_id.setDefaultRequirement(true);
    userTask_id.setSystemReserved(true);
    userTask_id.setUndeletable(true);
    userTask_id.setMultiLingual(false);
    userTask_id.setSearchable(true);
    userTask_id.setSortable(true);
    userTask_id.setUniqueValue(true);
    userTask_id.setUnmodifiable(true);
    MetadataBuilder userTask_isLate = userTaskSchema.create("isLate").setType(MetadataValueType.BOOLEAN);
    userTask_isLate.setUndeletable(true);
    MetadataBuilder userTask_isModel = userTaskSchema.create("isModel").setType(MetadataValueType.BOOLEAN);
    MetadataBuilder userTask_lastReminder = userTaskSchema.create("lastReminder").setType(MetadataValueType.DATE_TIME);
    userTask_lastReminder.setSystemReserved(true);
    userTask_lastReminder.setUndeletable(true);
    MetadataBuilder userTask_legacyIdentifier = userTaskSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    userTask_legacyIdentifier.setDefaultRequirement(true);
    userTask_legacyIdentifier.setSystemReserved(true);
    userTask_legacyIdentifier.setUndeletable(true);
    userTask_legacyIdentifier.setMultiLingual(false);
    userTask_legacyIdentifier.setSearchable(true);
    userTask_legacyIdentifier.setUniqueValue(true);
    userTask_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder userTask_logicallyDeletedOn = userTaskSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    userTask_logicallyDeletedOn.setSystemReserved(true);
    userTask_logicallyDeletedOn.setUndeletable(true);
    userTask_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder userTask_manualTokens = userTaskSchema.create("manualTokens").setType(MetadataValueType.STRING);
    userTask_manualTokens.setMultivalue(true);
    userTask_manualTokens.setSystemReserved(true);
    userTask_manualTokens.setUndeletable(true);
    userTask_manualTokens.setMultiLingual(false);
    userTask_manualTokens.setEssentialInSummary(true);
    userTask_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder userTask_markedForParsing = userTaskSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    userTask_markedForParsing.setSystemReserved(true);
    userTask_markedForParsing.setUndeletable(true);
    userTask_markedForParsing.setMultiLingual(false);
    MetadataBuilder userTask_markedForPreviewConversion = userTaskSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    userTask_markedForPreviewConversion.setSystemReserved(true);
    userTask_markedForPreviewConversion.setUndeletable(true);
    userTask_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder userTask_markedForReindexing = userTaskSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    userTask_markedForReindexing.setSystemReserved(true);
    userTask_markedForReindexing.setUndeletable(true);
    userTask_markedForReindexing.setMultiLingual(false);
    MetadataBuilder userTask_migrationDataVersion = userTaskSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    userTask_migrationDataVersion.setSystemReserved(true);
    userTask_migrationDataVersion.setUndeletable(true);
    userTask_migrationDataVersion.setMultiLingual(false);
    userTask_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder userTask_modelTask = userTaskSchema.create("modelTask").setType(MetadataValueType.REFERENCE);
    userTask_modelTask.defineReferencesTo(types.getSchemaType("userTask"));
    MetadataBuilder userTask_modifiedBy = userTaskSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    userTask_modifiedBy.setSystemReserved(true);
    userTask_modifiedBy.setUndeletable(true);
    userTask_modifiedBy.setMultiLingual(false);
    userTask_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder userTask_modifiedOn = userTaskSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    userTask_modifiedOn.setSystemReserved(true);
    userTask_modifiedOn.setUndeletable(true);
    userTask_modifiedOn.setMultiLingual(false);
    userTask_modifiedOn.setSortable(true);
    MetadataBuilder userTask_nestedAuthorizations = userTaskSchema.create("nestedAuthorizations").setType(MetadataValueType.STRUCTURE);
    userTask_nestedAuthorizations.setSystemReserved(true);
    userTask_nestedAuthorizations.setUndeletable(true);
    userTask_nestedAuthorizations.setMultiLingual(false);
    userTask_nestedAuthorizations.setEssentialInSummary(true);
    userTask_nestedAuthorizations.defineStructureFactory(NestedRecordAuthorizationsStructureFactory.class);
    MetadataBuilder userTask_nextReminderOn = userTaskSchema.create("nextReminderOn").setType(MetadataValueType.DATE);
    userTask_nextReminderOn.setUndeletable(true);
    MetadataBuilder userTask_nextTaskCreated = userTaskSchema.create("nextTaskCreated").setType(MetadataValueType.BOOLEAN);
    MetadataBuilder userTask_nextTasks = userTaskSchema.create("nextTasks").setType(MetadataValueType.REFERENCE);
    userTask_nextTasks.setMultivalue(true);
    userTask_nextTasks.defineReferencesTo(types.getSchemaType("userTask"));
    MetadataBuilder userTask_nextTasksDecisions = userTaskSchema.create("nextTasksDecisions").setType(MetadataValueType.STRUCTURE);
    userTask_nextTasksDecisions.defineStructureFactory(MapStringStringStructureFactory.class);
    MetadataBuilder userTask_numberOfReminders = userTaskSchema.create("numberOfReminders").setType(MetadataValueType.NUMBER);
    userTask_numberOfReminders.setSystemReserved(true);
    userTask_numberOfReminders.setUndeletable(true);
    userTask_numberOfReminders.setDefaultValue(0);
    MetadataBuilder userTask_parentTask = userTaskSchema.create("parentTask").setType(MetadataValueType.REFERENCE);
    userTask_parentTask.setCacheIndex(true);
    userTask_parentTask.setUndeletable(true);
    userTask_parentTask.defineChildOfRelationshipToType(types.getSchemaType("userTask"));
    MetadataBuilder userTask_parentTaskDueDate = userTaskSchema.create("parentTaskDueDate").setType(MetadataValueType.DATE);
    userTask_parentTaskDueDate.setUndeletable(true);
    MetadataBuilder userTask_path = userTaskSchema.create("path").setType(MetadataValueType.STRING);
    userTask_path.setMultivalue(true);
    userTask_path.setSystemReserved(true);
    userTask_path.setUndeletable(true);
    userTask_path.setMultiLingual(false);
    MetadataBuilder userTask_pathParts = userTaskSchema.create("pathParts").setType(MetadataValueType.STRING);
    userTask_pathParts.setMultivalue(true);
    userTask_pathParts.setSystemReserved(true);
    userTask_pathParts.setUndeletable(true);
    userTask_pathParts.setMultiLingual(false);
    MetadataBuilder userTask_principalAncestorsIntIds = userTaskSchema.create("principalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    userTask_principalAncestorsIntIds.setMultivalue(true);
    userTask_principalAncestorsIntIds.setSystemReserved(true);
    userTask_principalAncestorsIntIds.setUndeletable(true);
    userTask_principalAncestorsIntIds.setMultiLingual(false);
    userTask_principalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder userTask_principalConceptsIntIds = userTaskSchema.create("principalConceptsIntIds").setType(MetadataValueType.INTEGER);
    userTask_principalConceptsIntIds.setMultivalue(true);
    userTask_principalConceptsIntIds.setSystemReserved(true);
    userTask_principalConceptsIntIds.setUndeletable(true);
    userTask_principalConceptsIntIds.setMultiLingual(false);
    userTask_principalConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder userTask_principalpath = userTaskSchema.create("principalpath").setType(MetadataValueType.STRING);
    userTask_principalpath.setSystemReserved(true);
    userTask_principalpath.setUndeletable(true);
    userTask_principalpath.setMultiLingual(false);
    MetadataBuilder userTask_progressPercentage = userTaskSchema.create("progressPercentage").setType(MetadataValueType.NUMBER);
    userTask_progressPercentage.setUndeletable(true);
    userTask_progressPercentage.defineValidators().add(PercentageValidator.class);
    MetadataBuilder userTask_question = userTaskSchema.create("question").setType(MetadataValueType.STRING);
    userTask_question.setUndeletable(true);
    userTask_question.setEssentialInSummary(true);
    MetadataBuilder userTask_readByUser = userTaskSchema.create("readByUser").setType(MetadataValueType.BOOLEAN);
    userTask_readByUser.setUndeletable(true);
    userTask_readByUser.setDefaultValue(false);
    MetadataBuilder userTask_reason = userTaskSchema.create("reason").setType(MetadataValueType.TEXT);
    userTask_reason.setUndeletable(true);
    MetadataBuilder userTask_relativeDueDate = userTaskSchema.create("relativeDueDate").setType(MetadataValueType.NUMBER);
    MetadataBuilder userTask_reminderFrequency = userTaskSchema.create("reminderFrequency").setType(MetadataValueType.STRING);
    userTask_reminderFrequency.setUndeletable(true);
    MetadataBuilder userTask_reminders = userTaskSchema.create("reminders").setType(MetadataValueType.STRUCTURE);
    userTask_reminders.setMultivalue(true);
    userTask_reminders.setUndeletable(true);
    userTask_reminders.defineStructureFactory(TaskReminderFactory.class);
    MetadataBuilder userTask_removedauthorizations = userTaskSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    userTask_removedauthorizations.setMultivalue(true);
    userTask_removedauthorizations.setSystemReserved(true);
    userTask_removedauthorizations.setUndeletable(true);
    userTask_removedauthorizations.setMultiLingual(false);
    MetadataBuilder userTask_schema = userTaskSchema.create("schema").setType(MetadataValueType.STRING);
    userTask_schema.setDefaultRequirement(true);
    userTask_schema.setSystemReserved(true);
    userTask_schema.setUndeletable(true);
    userTask_schema.setMultiLingual(false);
    MetadataBuilder userTask_secondaryConceptsIntIds = userTaskSchema.create("secondaryConceptsIntIds").setType(MetadataValueType.INTEGER);
    userTask_secondaryConceptsIntIds.setMultivalue(true);
    userTask_secondaryConceptsIntIds.setSystemReserved(true);
    userTask_secondaryConceptsIntIds.setUndeletable(true);
    userTask_secondaryConceptsIntIds.setMultiLingual(false);
    userTask_secondaryConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder userTask_shareDenyTokens = userTaskSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    userTask_shareDenyTokens.setMultivalue(true);
    userTask_shareDenyTokens.setSystemReserved(true);
    userTask_shareDenyTokens.setUndeletable(true);
    userTask_shareDenyTokens.setMultiLingual(false);
    userTask_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder userTask_shareTokens = userTaskSchema.create("shareTokens").setType(MetadataValueType.STRING);
    userTask_shareTokens.setMultivalue(true);
    userTask_shareTokens.setSystemReserved(true);
    userTask_shareTokens.setUndeletable(true);
    userTask_shareTokens.setMultiLingual(false);
    userTask_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder userTask_starredByUsers = userTaskSchema.create("starredByUsers").setType(MetadataValueType.STRING);
    userTask_starredByUsers.setMultivalue(true);
    userTask_starredByUsers.setSystemReserved(true);
    userTask_starredByUsers.setUndeletable(true);
    MetadataBuilder userTask_startDate = userTaskSchema.create("startDate").setType(MetadataValueType.DATE);
    userTask_startDate.setUndeletable(true);
    MetadataBuilder userTask_status = userTaskSchema.create("status").setType(MetadataValueType.REFERENCE);
    userTask_status.setDefaultRequirement(true);
    userTask_status.setUndeletable(true);
    userTask_status.setDefaultValue("00000000008");
    userTask_status.defineReferencesTo(types.getSchemaType("ddvTaskStatus"));
    MetadataBuilder userTask_statusType = userTaskSchema.create("statusType").setType(MetadataValueType.ENUM);
    userTask_statusType.defineAsEnum(TaskStatusType.class);
    MetadataBuilder userTask_taskCollaborators = userTaskSchema.create("taskCollaborators").setType(MetadataValueType.REFERENCE);
    userTask_taskCollaborators.setMultivalue(true);
    userTask_taskCollaborators.setUndeletable(true);
    userTask_taskCollaborators.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder userTask_taskCollaboratorsGroups = userTaskSchema.create("taskCollaboratorsGroups").setType(MetadataValueType.REFERENCE);
    userTask_taskCollaboratorsGroups.setMultivalue(true);
    userTask_taskCollaboratorsGroups.setUndeletable(true);
    userTask_taskCollaboratorsGroups.defineReferencesTo(types.getSchemaType("group"));
    MetadataBuilder userTask_taskCollaboratorsGroupsWriteAuthorizations = userTaskSchema.create("taskCollaboratorsGroupsWriteAuthorizations").setType(MetadataValueType.BOOLEAN);
    userTask_taskCollaboratorsGroupsWriteAuthorizations.setMultivalue(true);
    userTask_taskCollaboratorsGroupsWriteAuthorizations.setUndeletable(true);
    MetadataBuilder userTask_taskCollaboratorsWriteAuthorizations = userTaskSchema.create("taskCollaboratorsWriteAuthorizations").setType(MetadataValueType.BOOLEAN);
    userTask_taskCollaboratorsWriteAuthorizations.setMultivalue(true);
    userTask_taskCollaboratorsWriteAuthorizations.setUndeletable(true);
    MetadataBuilder userTask_taskFollowers = userTaskSchema.create("taskFollowers").setType(MetadataValueType.STRUCTURE);
    userTask_taskFollowers.setMultivalue(true);
    userTask_taskFollowers.setUndeletable(true);
    userTask_taskFollowers.defineStructureFactory(TaskFollowerFactory.class);
    MetadataBuilder userTask_taskFollowersIds = userTaskSchema.create("taskFollowersIds").setType(MetadataValueType.REFERENCE);
    userTask_taskFollowersIds.setMultivalue(true);
    userTask_taskFollowersIds.setUndeletable(true);
    userTask_taskFollowersIds.defineReferencesTo(asList(types.getSchema("user_default")));
    MetadataBuilder userTask_title = userTaskSchema.create("title").setType(MetadataValueType.STRING);
    userTask_title.setDefaultRequirement(true);
    userTask_title.setUndeletable(true);
    userTask_title.setMultiLingual(false);
    userTask_title.setSchemaAutocomplete(true);
    userTask_title.setSearchable(true);
    MetadataBuilder userTask_tokens = userTaskSchema.create("tokens").setType(MetadataValueType.STRING);
    userTask_tokens.setMultivalue(true);
    userTask_tokens.setSystemReserved(true);
    userTask_tokens.setUndeletable(true);
    userTask_tokens.setMultiLingual(false);
    MetadataBuilder userTask_tokensHierarchy = userTaskSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    userTask_tokensHierarchy.setMultivalue(true);
    userTask_tokensHierarchy.setSystemReserved(true);
    userTask_tokensHierarchy.setUndeletable(true);
    userTask_tokensHierarchy.setMultiLingual(false);
    userTask_tokensHierarchy.setEssentialInSummary(true);
    MetadataBuilder userTask_type = userTaskSchema.create("type").setType(MetadataValueType.REFERENCE);
    userTask_type.setUndeletable(true);
    userTask_type.defineReferencesTo(asList(types.getSchema("ddvTaskType_default")));
    MetadataBuilder userTask_visibleInTrees = userTaskSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    userTask_visibleInTrees.setSystemReserved(true);
    userTask_visibleInTrees.setUndeletable(true);
    userTask_visibleInTrees.setMultiLingual(false);
    userTask_visibleInTrees.setDefaultValue(false);
    MetadataBuilder userTask_workHours = userTaskSchema.create("workHours").setType(MetadataValueType.NUMBER);
    userTask_workHours.setUndeletable(true);
    MetadataBuilder userTask_workflow = userTaskSchema.create("workflow").setType(MetadataValueType.REFERENCE);
    userTask_workflow.defineReferencesTo(types.getSchemaType("workflow"));
    MetadataBuilder userTask_workflowInstance = userTaskSchema.create("workflowInstance").setType(MetadataValueType.REFERENCE);
    userTask_workflowInstance.defineReferencesTo(types.getSchemaType("workflowInstance"));
  }

  private void createAuthorizationDetailsSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder authorizationDetailsSchemaType, MetadataSchemaBuilder authorizationDetailsSchema) {
  }

  private void createTaskSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder taskSchemaType, MetadataSchemaBuilder task_approvalSchema, MetadataSchemaBuilder taskSchema) {
    MetadataBuilder task_approval_allReferences = task_approvalSchema.get("allReferences");
    MetadataBuilder task_approval_allRemovedAuths = task_approvalSchema.get("allRemovedAuths");
    MetadataBuilder task_approval_assignCandidates = task_approvalSchema.get("assignCandidates");
    MetadataBuilder task_approval_assignedOn = task_approvalSchema.get("assignedOn");
    MetadataBuilder task_approval_assignedTo = task_approvalSchema.get("assignedTo");
    MetadataBuilder task_approval_attachedAncestors = task_approvalSchema.get("attachedAncestors");
    MetadataBuilder task_approval_attachedPrincipalAncestorsIntIds = task_approvalSchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder task_approval_autocomplete = task_approvalSchema.get("autocomplete");
    MetadataBuilder task_approval_caption = task_approvalSchema.get("caption");
    MetadataBuilder task_approval_createdBy = task_approvalSchema.get("createdBy");
    MetadataBuilder task_approval_createdOn = task_approvalSchema.get("createdOn");
    MetadataBuilder task_approval_deleted = task_approvalSchema.get("deleted");
    MetadataBuilder task_approval_denyTokens = task_approvalSchema.get("denyTokens");
    MetadataBuilder task_approval_detachedPrincipalAncestorsIntIds = task_approvalSchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder task_approval_detachedauthorizations = task_approvalSchema.get("detachedauthorizations");
    MetadataBuilder task_approval_dueDate = task_approvalSchema.get("dueDate");
    MetadataBuilder task_approval_errorOnPhysicalDeletion = task_approvalSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder task_approval_estimatedSize = task_approvalSchema.get("estimatedSize");
    MetadataBuilder task_approval_finishedBy = task_approvalSchema.get("finishedBy");
    MetadataBuilder task_approval_finishedOn = task_approvalSchema.get("finishedOn");
    MetadataBuilder task_approval_hidden = task_approvalSchema.get("hidden");
    MetadataBuilder task_approval_id = task_approvalSchema.get("id");
    MetadataBuilder task_approval_legacyIdentifier = task_approvalSchema.get("legacyIdentifier");
    MetadataBuilder task_approval_logicallyDeletedOn = task_approvalSchema.get("logicallyDeletedOn");
    MetadataBuilder task_approval_manualTokens = task_approvalSchema.get("manualTokens");
    MetadataBuilder task_approval_markedForParsing = task_approvalSchema.get("markedForParsing");
    MetadataBuilder task_approval_markedForPreviewConversion = task_approvalSchema.get("markedForPreviewConversion");
    MetadataBuilder task_approval_markedForReindexing = task_approvalSchema.get("markedForReindexing");
    MetadataBuilder task_approval_migrationDataVersion = task_approvalSchema.get("migrationDataVersion");
    MetadataBuilder task_approval_modifiedBy = task_approvalSchema.get("modifiedBy");
    MetadataBuilder task_approval_modifiedOn = task_approvalSchema.get("modifiedOn");
    MetadataBuilder task_approval_nestedAuthorizations = task_approvalSchema.get("nestedAuthorizations");
    MetadataBuilder task_approval_path = task_approvalSchema.get("path");
    MetadataBuilder task_approval_pathParts = task_approvalSchema.get("pathParts");
    MetadataBuilder task_approval_principalAncestorsIntIds = task_approvalSchema.get("principalAncestorsIntIds");
    MetadataBuilder task_approval_principalConceptsIntIds = task_approvalSchema.get("principalConceptsIntIds");
    MetadataBuilder task_approval_principalpath = task_approvalSchema.get("principalpath");
    MetadataBuilder task_approval_removedauthorizations = task_approvalSchema.get("removedauthorizations");
    MetadataBuilder task_approval_schema = task_approvalSchema.get("schema");
    MetadataBuilder task_approval_secondaryConceptsIntIds = task_approvalSchema.get("secondaryConceptsIntIds");
    MetadataBuilder task_approval_shareDenyTokens = task_approvalSchema.get("shareDenyTokens");
    MetadataBuilder task_approval_shareTokens = task_approvalSchema.get("shareTokens");
    MetadataBuilder task_approval_title = task_approvalSchema.get("title");
    MetadataBuilder task_approval_tokens = task_approvalSchema.get("tokens");
    MetadataBuilder task_approval_tokensHierarchy = task_approvalSchema.get("tokensHierarchy");
    MetadataBuilder task_approval_visibleInTrees = task_approvalSchema.get("visibleInTrees");
    MetadataBuilder task_approval_workflowIdentifier = task_approvalSchema.get("workflowIdentifier");
    MetadataBuilder task_approval_workflowRecordIdentifiers = task_approvalSchema.get("workflowRecordIdentifiers");
  }

  private void createDdvSourceSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvSourceSchemaType, MetadataSchemaBuilder ddvSourceSchema) {
  }

  private void createDdvTaskStatusSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder ddvTaskStatusSchemaType, MetadataSchemaBuilder ddvTaskStatusSchema) {
    MetadataBuilder ddvTaskStatus_abbreviation = ddvTaskStatusSchema.create("abbreviation").setType(MetadataValueType.STRING);
    ddvTaskStatus_abbreviation.setUndeletable(true);
    ddvTaskStatus_abbreviation.setMultiLingual(true);
    ddvTaskStatus_abbreviation.setSearchable(true);
    ddvTaskStatus_abbreviation.defineValidators().add(IllegalCharactersValidator.class);
    MetadataBuilder ddvTaskStatus_allReferences = ddvTaskStatusSchema.create("allReferences").setType(MetadataValueType.STRING);
    ddvTaskStatus_allReferences.setMultivalue(true);
    ddvTaskStatus_allReferences.setSystemReserved(true);
    ddvTaskStatus_allReferences.setUndeletable(true);
    ddvTaskStatus_allReferences.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_allRemovedAuths = ddvTaskStatusSchema.create("allRemovedAuths").setType(MetadataValueType.STRING);
    ddvTaskStatus_allRemovedAuths.setMultivalue(true);
    ddvTaskStatus_allRemovedAuths.setSystemReserved(true);
    ddvTaskStatus_allRemovedAuths.setUndeletable(true);
    ddvTaskStatus_allRemovedAuths.setEssential(true);
    ddvTaskStatus_allRemovedAuths.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_attachedAncestors = ddvTaskStatusSchema.create("attachedAncestors").setType(MetadataValueType.STRING);
    ddvTaskStatus_attachedAncestors.setMultivalue(true);
    ddvTaskStatus_attachedAncestors.setSystemReserved(true);
    ddvTaskStatus_attachedAncestors.setUndeletable(true);
    ddvTaskStatus_attachedAncestors.setEssential(true);
    ddvTaskStatus_attachedAncestors.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_attachedPrincipalAncestorsIntIds = ddvTaskStatusSchema.create("attachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskStatus_attachedPrincipalAncestorsIntIds.setMultivalue(true);
    ddvTaskStatus_attachedPrincipalAncestorsIntIds.setSystemReserved(true);
    ddvTaskStatus_attachedPrincipalAncestorsIntIds.setUndeletable(true);
    ddvTaskStatus_attachedPrincipalAncestorsIntIds.setMultiLingual(false);
    ddvTaskStatus_attachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskStatus_autocomplete = ddvTaskStatusSchema.create("autocomplete").setType(MetadataValueType.STRING);
    ddvTaskStatus_autocomplete.setMultivalue(true);
    ddvTaskStatus_autocomplete.setSystemReserved(true);
    ddvTaskStatus_autocomplete.setUndeletable(true);
    ddvTaskStatus_autocomplete.setEssential(true);
    ddvTaskStatus_autocomplete.setMultiLingual(true);
    MetadataBuilder ddvTaskStatus_caption = ddvTaskStatusSchema.create("caption").setType(MetadataValueType.STRING);
    ddvTaskStatus_caption.setSystemReserved(true);
    ddvTaskStatus_caption.setUndeletable(true);
    ddvTaskStatus_caption.setMultiLingual(false);
    ddvTaskStatus_caption.setSortable(true);
    MetadataBuilder ddvTaskStatus_code = ddvTaskStatusSchema.create("code").setType(MetadataValueType.STRING);
    ddvTaskStatus_code.setDefaultRequirement(true);
    ddvTaskStatus_code.setUndeletable(true);
    ddvTaskStatus_code.setSchemaAutocomplete(true);
    ddvTaskStatus_code.setSearchable(true);
    ddvTaskStatus_code.setUniqueValue(true);
    ddvTaskStatus_code.setUnmodifiable(true);
    ddvTaskStatus_code.defineValidators().add(IllegalCharactersValidator.class);
    MetadataBuilder ddvTaskStatus_comments = ddvTaskStatusSchema.create("comments").setType(MetadataValueType.STRUCTURE);
    ddvTaskStatus_comments.setMultivalue(true);
    ddvTaskStatus_comments.defineStructureFactory(CommentFactory.class);
    MetadataBuilder ddvTaskStatus_createdBy = ddvTaskStatusSchema.create("createdBy").setType(MetadataValueType.REFERENCE);
    ddvTaskStatus_createdBy.setSystemReserved(true);
    ddvTaskStatus_createdBy.setUndeletable(true);
    ddvTaskStatus_createdBy.setMultiLingual(false);
    ddvTaskStatus_createdBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvTaskStatus_createdOn = ddvTaskStatusSchema.create("createdOn").setType(MetadataValueType.DATE_TIME);
    ddvTaskStatus_createdOn.setSystemReserved(true);
    ddvTaskStatus_createdOn.setUndeletable(true);
    ddvTaskStatus_createdOn.setMultiLingual(false);
    ddvTaskStatus_createdOn.setSortable(true);
    MetadataBuilder ddvTaskStatus_deleted = ddvTaskStatusSchema.create("deleted").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_deleted.setSystemReserved(true);
    ddvTaskStatus_deleted.setUndeletable(true);
    ddvTaskStatus_deleted.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_denyTokens = ddvTaskStatusSchema.create("denyTokens").setType(MetadataValueType.STRING);
    ddvTaskStatus_denyTokens.setMultivalue(true);
    ddvTaskStatus_denyTokens.setSystemReserved(true);
    ddvTaskStatus_denyTokens.setUndeletable(true);
    ddvTaskStatus_denyTokens.setMultiLingual(false);
    ddvTaskStatus_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskStatus_description = ddvTaskStatusSchema.create("description").setType(MetadataValueType.TEXT);
    ddvTaskStatus_description.setUndeletable(true);
    ddvTaskStatus_description.setMultiLingual(true);
    ddvTaskStatus_description.setSearchable(true);
    MetadataBuilder ddvTaskStatus_detachedPrincipalAncestorsIntIds = ddvTaskStatusSchema.create("detachedPrincipalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskStatus_detachedPrincipalAncestorsIntIds.setMultivalue(true);
    ddvTaskStatus_detachedPrincipalAncestorsIntIds.setSystemReserved(true);
    ddvTaskStatus_detachedPrincipalAncestorsIntIds.setUndeletable(true);
    ddvTaskStatus_detachedPrincipalAncestorsIntIds.setMultiLingual(false);
    ddvTaskStatus_detachedPrincipalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskStatus_detachedauthorizations = ddvTaskStatusSchema.create("detachedauthorizations").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_detachedauthorizations.setSystemReserved(true);
    ddvTaskStatus_detachedauthorizations.setUndeletable(true);
    ddvTaskStatus_detachedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_errorOnPhysicalDeletion = ddvTaskStatusSchema.create("errorOnPhysicalDeletion").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_errorOnPhysicalDeletion.setSystemReserved(true);
    ddvTaskStatus_errorOnPhysicalDeletion.setUndeletable(true);
    ddvTaskStatus_errorOnPhysicalDeletion.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_estimatedSize = ddvTaskStatusSchema.create("estimatedSize").setType(MetadataValueType.INTEGER);
    ddvTaskStatus_estimatedSize.setSystemReserved(true);
    ddvTaskStatus_estimatedSize.setUndeletable(true);
    ddvTaskStatus_estimatedSize.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_hidden = ddvTaskStatusSchema.create("hidden").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_hidden.setSystemReserved(true);
    ddvTaskStatus_hidden.setUndeletable(true);
    ddvTaskStatus_hidden.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_id = ddvTaskStatusSchema.create("id").setType(MetadataValueType.STRING);
    ddvTaskStatus_id.setDefaultRequirement(true);
    ddvTaskStatus_id.setSystemReserved(true);
    ddvTaskStatus_id.setUndeletable(true);
    ddvTaskStatus_id.setMultiLingual(false);
    ddvTaskStatus_id.setSearchable(true);
    ddvTaskStatus_id.setSortable(true);
    ddvTaskStatus_id.setUniqueValue(true);
    ddvTaskStatus_id.setUnmodifiable(true);
    MetadataBuilder ddvTaskStatus_legacyIdentifier = ddvTaskStatusSchema.create("legacyIdentifier").setType(MetadataValueType.STRING);
    ddvTaskStatus_legacyIdentifier.setDefaultRequirement(true);
    ddvTaskStatus_legacyIdentifier.setSystemReserved(true);
    ddvTaskStatus_legacyIdentifier.setUndeletable(true);
    ddvTaskStatus_legacyIdentifier.setMultiLingual(false);
    ddvTaskStatus_legacyIdentifier.setSearchable(true);
    ddvTaskStatus_legacyIdentifier.setUniqueValue(true);
    ddvTaskStatus_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder ddvTaskStatus_logicallyDeletedOn = ddvTaskStatusSchema.create("logicallyDeletedOn").setType(MetadataValueType.DATE_TIME);
    ddvTaskStatus_logicallyDeletedOn.setSystemReserved(true);
    ddvTaskStatus_logicallyDeletedOn.setUndeletable(true);
    ddvTaskStatus_logicallyDeletedOn.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_manualTokens = ddvTaskStatusSchema.create("manualTokens").setType(MetadataValueType.STRING);
    ddvTaskStatus_manualTokens.setMultivalue(true);
    ddvTaskStatus_manualTokens.setSystemReserved(true);
    ddvTaskStatus_manualTokens.setUndeletable(true);
    ddvTaskStatus_manualTokens.setMultiLingual(false);
    ddvTaskStatus_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskStatus_markedForParsing = ddvTaskStatusSchema.create("markedForParsing").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_markedForParsing.setSystemReserved(true);
    ddvTaskStatus_markedForParsing.setUndeletable(true);
    ddvTaskStatus_markedForParsing.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_markedForPreviewConversion = ddvTaskStatusSchema.create("markedForPreviewConversion").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_markedForPreviewConversion.setSystemReserved(true);
    ddvTaskStatus_markedForPreviewConversion.setUndeletable(true);
    ddvTaskStatus_markedForPreviewConversion.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_markedForReindexing = ddvTaskStatusSchema.create("markedForReindexing").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_markedForReindexing.setSystemReserved(true);
    ddvTaskStatus_markedForReindexing.setUndeletable(true);
    ddvTaskStatus_markedForReindexing.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_migrationDataVersion = ddvTaskStatusSchema.create("migrationDataVersion").setType(MetadataValueType.NUMBER);
    ddvTaskStatus_migrationDataVersion.setSystemReserved(true);
    ddvTaskStatus_migrationDataVersion.setUndeletable(true);
    ddvTaskStatus_migrationDataVersion.setMultiLingual(false);
    ddvTaskStatus_migrationDataVersion.setEssentialInSummary(true);
    MetadataBuilder ddvTaskStatus_modifiedBy = ddvTaskStatusSchema.create("modifiedBy").setType(MetadataValueType.REFERENCE);
    ddvTaskStatus_modifiedBy.setSystemReserved(true);
    ddvTaskStatus_modifiedBy.setUndeletable(true);
    ddvTaskStatus_modifiedBy.setMultiLingual(false);
    ddvTaskStatus_modifiedBy.defineReferencesTo(types.getSchemaType("user"));
    MetadataBuilder ddvTaskStatus_modifiedOn = ddvTaskStatusSchema.create("modifiedOn").setType(MetadataValueType.DATE_TIME);
    ddvTaskStatus_modifiedOn.setSystemReserved(true);
    ddvTaskStatus_modifiedOn.setUndeletable(true);
    ddvTaskStatus_modifiedOn.setMultiLingual(false);
    ddvTaskStatus_modifiedOn.setSortable(true);
    MetadataBuilder ddvTaskStatus_nestedAuthorizations = ddvTaskStatusSchema.create("nestedAuthorizations").setType(MetadataValueType.STRUCTURE);
    ddvTaskStatus_nestedAuthorizations.setSystemReserved(true);
    ddvTaskStatus_nestedAuthorizations.setUndeletable(true);
    ddvTaskStatus_nestedAuthorizations.setMultiLingual(false);
    ddvTaskStatus_nestedAuthorizations.setEssentialInSummary(true);
    ddvTaskStatus_nestedAuthorizations.defineStructureFactory(NestedRecordAuthorizationsStructureFactory.class);
    MetadataBuilder ddvTaskStatus_path = ddvTaskStatusSchema.create("path").setType(MetadataValueType.STRING);
    ddvTaskStatus_path.setMultivalue(true);
    ddvTaskStatus_path.setSystemReserved(true);
    ddvTaskStatus_path.setUndeletable(true);
    ddvTaskStatus_path.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_pathParts = ddvTaskStatusSchema.create("pathParts").setType(MetadataValueType.STRING);
    ddvTaskStatus_pathParts.setMultivalue(true);
    ddvTaskStatus_pathParts.setSystemReserved(true);
    ddvTaskStatus_pathParts.setUndeletable(true);
    ddvTaskStatus_pathParts.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_principalAncestorsIntIds = ddvTaskStatusSchema.create("principalAncestorsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskStatus_principalAncestorsIntIds.setMultivalue(true);
    ddvTaskStatus_principalAncestorsIntIds.setSystemReserved(true);
    ddvTaskStatus_principalAncestorsIntIds.setUndeletable(true);
    ddvTaskStatus_principalAncestorsIntIds.setMultiLingual(false);
    ddvTaskStatus_principalAncestorsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskStatus_principalConceptsIntIds = ddvTaskStatusSchema.create("principalConceptsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskStatus_principalConceptsIntIds.setMultivalue(true);
    ddvTaskStatus_principalConceptsIntIds.setSystemReserved(true);
    ddvTaskStatus_principalConceptsIntIds.setUndeletable(true);
    ddvTaskStatus_principalConceptsIntIds.setMultiLingual(false);
    ddvTaskStatus_principalConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskStatus_principalpath = ddvTaskStatusSchema.create("principalpath").setType(MetadataValueType.STRING);
    ddvTaskStatus_principalpath.setSystemReserved(true);
    ddvTaskStatus_principalpath.setUndeletable(true);
    ddvTaskStatus_principalpath.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_removedauthorizations = ddvTaskStatusSchema.create("removedauthorizations").setType(MetadataValueType.STRING);
    ddvTaskStatus_removedauthorizations.setMultivalue(true);
    ddvTaskStatus_removedauthorizations.setSystemReserved(true);
    ddvTaskStatus_removedauthorizations.setUndeletable(true);
    ddvTaskStatus_removedauthorizations.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_schema = ddvTaskStatusSchema.create("schema").setType(MetadataValueType.STRING);
    ddvTaskStatus_schema.setDefaultRequirement(true);
    ddvTaskStatus_schema.setSystemReserved(true);
    ddvTaskStatus_schema.setUndeletable(true);
    ddvTaskStatus_schema.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_secondaryConceptsIntIds = ddvTaskStatusSchema.create("secondaryConceptsIntIds").setType(MetadataValueType.INTEGER);
    ddvTaskStatus_secondaryConceptsIntIds.setMultivalue(true);
    ddvTaskStatus_secondaryConceptsIntIds.setSystemReserved(true);
    ddvTaskStatus_secondaryConceptsIntIds.setUndeletable(true);
    ddvTaskStatus_secondaryConceptsIntIds.setMultiLingual(false);
    ddvTaskStatus_secondaryConceptsIntIds.setEssentialInSummary(true);
    MetadataBuilder ddvTaskStatus_shareDenyTokens = ddvTaskStatusSchema.create("shareDenyTokens").setType(MetadataValueType.STRING);
    ddvTaskStatus_shareDenyTokens.setMultivalue(true);
    ddvTaskStatus_shareDenyTokens.setSystemReserved(true);
    ddvTaskStatus_shareDenyTokens.setUndeletable(true);
    ddvTaskStatus_shareDenyTokens.setMultiLingual(false);
    ddvTaskStatus_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskStatus_shareTokens = ddvTaskStatusSchema.create("shareTokens").setType(MetadataValueType.STRING);
    ddvTaskStatus_shareTokens.setMultivalue(true);
    ddvTaskStatus_shareTokens.setSystemReserved(true);
    ddvTaskStatus_shareTokens.setUndeletable(true);
    ddvTaskStatus_shareTokens.setMultiLingual(false);
    ddvTaskStatus_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder ddvTaskStatus_statusType = ddvTaskStatusSchema.create("statusType").setType(MetadataValueType.ENUM);
    ddvTaskStatus_statusType.setDefaultRequirement(true);
    ddvTaskStatus_statusType.setUndeletable(true);
    ddvTaskStatus_statusType.defineAsEnum(TaskStatusType.class);
    MetadataBuilder ddvTaskStatus_title = ddvTaskStatusSchema.create("title").setType(MetadataValueType.STRING);
    ddvTaskStatus_title.setDefaultRequirement(true);
    ddvTaskStatus_title.setUndeletable(true);
    ddvTaskStatus_title.setMultiLingual(true);
    ddvTaskStatus_title.setSchemaAutocomplete(true);
    ddvTaskStatus_title.setSearchable(true);
    ddvTaskStatus_title.setUniqueValue(true);
    ddvTaskStatus_title.defineValidators().add(IllegalCharactersValidator.class);
    MetadataBuilder ddvTaskStatus_tokens = ddvTaskStatusSchema.create("tokens").setType(MetadataValueType.STRING);
    ddvTaskStatus_tokens.setMultivalue(true);
    ddvTaskStatus_tokens.setSystemReserved(true);
    ddvTaskStatus_tokens.setUndeletable(true);
    ddvTaskStatus_tokens.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_tokensHierarchy = ddvTaskStatusSchema.create("tokensHierarchy").setType(MetadataValueType.STRING);
    ddvTaskStatus_tokensHierarchy.setMultivalue(true);
    ddvTaskStatus_tokensHierarchy.setSystemReserved(true);
    ddvTaskStatus_tokensHierarchy.setUndeletable(true);
    ddvTaskStatus_tokensHierarchy.setMultiLingual(false);
    MetadataBuilder ddvTaskStatus_visibleInTrees = ddvTaskStatusSchema.create("visibleInTrees").setType(MetadataValueType.BOOLEAN);
    ddvTaskStatus_visibleInTrees.setSystemReserved(true);
    ddvTaskStatus_visibleInTrees.setUndeletable(true);
    ddvTaskStatus_visibleInTrees.setMultiLingual(false);
  }

  private void createUserFolderSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userFolderSchemaType, MetadataSchemaBuilder userFolderSchema) {
  }

  private void createReportSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder reportSchemaType, MetadataSchemaBuilder reportSchema) {
  }

  private void createSearchEventSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder searchEventSchemaType, MetadataSchemaBuilder searchEventSchema) {
  }

  private void createTemporaryRecordSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder temporaryRecordSchemaType, MetadataSchemaBuilder temporaryRecord_batchProcessReportSchema, MetadataSchemaBuilder temporaryRecord_exportAuditSchema, MetadataSchemaBuilder temporaryRecord_importAuditSchema, MetadataSchemaBuilder temporaryRecord_scriptReportSchema, MetadataSchemaBuilder temporaryRecord_vaultScanReportSchema, MetadataSchemaBuilder temporaryRecordSchema) {
    MetadataBuilder temporaryRecord_batchProcessReport_allReferences = temporaryRecord_batchProcessReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_batchProcessReport_allRemovedAuths = temporaryRecord_batchProcessReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_batchProcessReport_attachedAncestors = temporaryRecord_batchProcessReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_batchProcessReport_attachedPrincipalAncestorsIntIds = temporaryRecord_batchProcessReportSchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_batchProcessReport_autocomplete = temporaryRecord_batchProcessReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_batchProcessReport_caption = temporaryRecord_batchProcessReportSchema.get("caption");
    MetadataBuilder temporaryRecord_batchProcessReport_content = temporaryRecord_batchProcessReportSchema.get("content");
    MetadataBuilder temporaryRecord_batchProcessReport_createdBy = temporaryRecord_batchProcessReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_batchProcessReport_createdOn = temporaryRecord_batchProcessReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_batchProcessReport_daysBeforeDestruction = temporaryRecord_batchProcessReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_batchProcessReport_deleted = temporaryRecord_batchProcessReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_batchProcessReport_denyTokens = temporaryRecord_batchProcessReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_destructionDate = temporaryRecord_batchProcessReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_batchProcessReport_detachedPrincipalAncestorsIntIds = temporaryRecord_batchProcessReportSchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_batchProcessReport_detachedauthorizations = temporaryRecord_batchProcessReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_batchProcessReport_errorOnPhysicalDeletion = temporaryRecord_batchProcessReportSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_batchProcessReport_estimatedSize = temporaryRecord_batchProcessReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_batchProcessReport_hidden = temporaryRecord_batchProcessReportSchema.get("hidden");
    MetadataBuilder temporaryRecord_batchProcessReport_id = temporaryRecord_batchProcessReportSchema.get("id");
    MetadataBuilder temporaryRecord_batchProcessReport_legacyIdentifier = temporaryRecord_batchProcessReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_batchProcessReport_logicallyDeletedOn = temporaryRecord_batchProcessReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_batchProcessReport_manualTokens = temporaryRecord_batchProcessReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForParsing = temporaryRecord_batchProcessReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForPreviewConversion = temporaryRecord_batchProcessReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_batchProcessReport_markedForReindexing = temporaryRecord_batchProcessReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_batchProcessReport_migrationDataVersion = temporaryRecord_batchProcessReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_batchProcessReport_modifiedBy = temporaryRecord_batchProcessReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_batchProcessReport_modifiedOn = temporaryRecord_batchProcessReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_batchProcessReport_nestedAuthorizations = temporaryRecord_batchProcessReportSchema.get("nestedAuthorizations");
    MetadataBuilder temporaryRecord_batchProcessReport_path = temporaryRecord_batchProcessReportSchema.get("path");
    MetadataBuilder temporaryRecord_batchProcessReport_pathParts = temporaryRecord_batchProcessReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_batchProcessReport_principalAncestorsIntIds = temporaryRecord_batchProcessReportSchema.get("principalAncestorsIntIds");
    MetadataBuilder temporaryRecord_batchProcessReport_principalConceptsIntIds = temporaryRecord_batchProcessReportSchema.get("principalConceptsIntIds");
    MetadataBuilder temporaryRecord_batchProcessReport_principalpath = temporaryRecord_batchProcessReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_batchProcessReport_removedauthorizations = temporaryRecord_batchProcessReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_batchProcessReport_schema = temporaryRecord_batchProcessReportSchema.get("schema");
    MetadataBuilder temporaryRecord_batchProcessReport_secondaryConceptsIntIds = temporaryRecord_batchProcessReportSchema.get("secondaryConceptsIntIds");
    MetadataBuilder temporaryRecord_batchProcessReport_shareDenyTokens = temporaryRecord_batchProcessReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_shareTokens = temporaryRecord_batchProcessReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_batchProcessReport_title = temporaryRecord_batchProcessReportSchema.get("title");
    MetadataBuilder temporaryRecord_batchProcessReport_tokens = temporaryRecord_batchProcessReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_batchProcessReport_tokensHierarchy = temporaryRecord_batchProcessReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_batchProcessReport_visibleInTrees = temporaryRecord_batchProcessReportSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_exportAudit_allReferences = temporaryRecord_exportAuditSchema.get("allReferences");
    MetadataBuilder temporaryRecord_exportAudit_allRemovedAuths = temporaryRecord_exportAuditSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_exportAudit_attachedAncestors = temporaryRecord_exportAuditSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_exportAudit_attachedPrincipalAncestorsIntIds = temporaryRecord_exportAuditSchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_exportAudit_autocomplete = temporaryRecord_exportAuditSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_exportAudit_caption = temporaryRecord_exportAuditSchema.get("caption");
    MetadataBuilder temporaryRecord_exportAudit_content = temporaryRecord_exportAuditSchema.get("content");
    MetadataBuilder temporaryRecord_exportAudit_createdBy = temporaryRecord_exportAuditSchema.get("createdBy");
    MetadataBuilder temporaryRecord_exportAudit_createdOn = temporaryRecord_exportAuditSchema.get("createdOn");
    MetadataBuilder temporaryRecord_exportAudit_daysBeforeDestruction = temporaryRecord_exportAuditSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_exportAudit_deleted = temporaryRecord_exportAuditSchema.get("deleted");
    MetadataBuilder temporaryRecord_exportAudit_denyTokens = temporaryRecord_exportAuditSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_exportAudit_destructionDate = temporaryRecord_exportAuditSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_exportAudit_detachedPrincipalAncestorsIntIds = temporaryRecord_exportAuditSchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_exportAudit_detachedauthorizations = temporaryRecord_exportAuditSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_exportAudit_errorOnPhysicalDeletion = temporaryRecord_exportAuditSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_exportAudit_estimatedSize = temporaryRecord_exportAuditSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_exportAudit_hidden = temporaryRecord_exportAuditSchema.get("hidden");
    MetadataBuilder temporaryRecord_exportAudit_id = temporaryRecord_exportAuditSchema.get("id");
    MetadataBuilder temporaryRecord_exportAudit_legacyIdentifier = temporaryRecord_exportAuditSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_exportAudit_logicallyDeletedOn = temporaryRecord_exportAuditSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_exportAudit_manualTokens = temporaryRecord_exportAuditSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_exportAudit_markedForParsing = temporaryRecord_exportAuditSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_exportAudit_markedForPreviewConversion = temporaryRecord_exportAuditSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_exportAudit_markedForReindexing = temporaryRecord_exportAuditSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_exportAudit_migrationDataVersion = temporaryRecord_exportAuditSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_exportAudit_modifiedBy = temporaryRecord_exportAuditSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_exportAudit_modifiedOn = temporaryRecord_exportAuditSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_exportAudit_nestedAuthorizations = temporaryRecord_exportAuditSchema.get("nestedAuthorizations");
    MetadataBuilder temporaryRecord_exportAudit_path = temporaryRecord_exportAuditSchema.get("path");
    MetadataBuilder temporaryRecord_exportAudit_pathParts = temporaryRecord_exportAuditSchema.get("pathParts");
    MetadataBuilder temporaryRecord_exportAudit_principalAncestorsIntIds = temporaryRecord_exportAuditSchema.get("principalAncestorsIntIds");
    MetadataBuilder temporaryRecord_exportAudit_principalConceptsIntIds = temporaryRecord_exportAuditSchema.get("principalConceptsIntIds");
    MetadataBuilder temporaryRecord_exportAudit_principalpath = temporaryRecord_exportAuditSchema.get("principalpath");
    MetadataBuilder temporaryRecord_exportAudit_removedauthorizations = temporaryRecord_exportAuditSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_exportAudit_schema = temporaryRecord_exportAuditSchema.get("schema");
    MetadataBuilder temporaryRecord_exportAudit_secondaryConceptsIntIds = temporaryRecord_exportAuditSchema.get("secondaryConceptsIntIds");
    MetadataBuilder temporaryRecord_exportAudit_shareDenyTokens = temporaryRecord_exportAuditSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_exportAudit_shareTokens = temporaryRecord_exportAuditSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_exportAudit_title = temporaryRecord_exportAuditSchema.get("title");
    MetadataBuilder temporaryRecord_exportAudit_tokens = temporaryRecord_exportAuditSchema.get("tokens");
    MetadataBuilder temporaryRecord_exportAudit_tokensHierarchy = temporaryRecord_exportAuditSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_exportAudit_visibleInTrees = temporaryRecord_exportAuditSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_importAudit_allReferences = temporaryRecord_importAuditSchema.get("allReferences");
    MetadataBuilder temporaryRecord_importAudit_allRemovedAuths = temporaryRecord_importAuditSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_importAudit_attachedAncestors = temporaryRecord_importAuditSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_importAudit_attachedPrincipalAncestorsIntIds = temporaryRecord_importAuditSchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_importAudit_autocomplete = temporaryRecord_importAuditSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_importAudit_caption = temporaryRecord_importAuditSchema.get("caption");
    MetadataBuilder temporaryRecord_importAudit_content = temporaryRecord_importAuditSchema.get("content");
    MetadataBuilder temporaryRecord_importAudit_createdBy = temporaryRecord_importAuditSchema.get("createdBy");
    MetadataBuilder temporaryRecord_importAudit_createdOn = temporaryRecord_importAuditSchema.get("createdOn");
    MetadataBuilder temporaryRecord_importAudit_daysBeforeDestruction = temporaryRecord_importAuditSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_importAudit_deleted = temporaryRecord_importAuditSchema.get("deleted");
    MetadataBuilder temporaryRecord_importAudit_denyTokens = temporaryRecord_importAuditSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_importAudit_destructionDate = temporaryRecord_importAuditSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_importAudit_detachedPrincipalAncestorsIntIds = temporaryRecord_importAuditSchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_importAudit_detachedauthorizations = temporaryRecord_importAuditSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_importAudit_errorOnPhysicalDeletion = temporaryRecord_importAuditSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_importAudit_estimatedSize = temporaryRecord_importAuditSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_importAudit_hidden = temporaryRecord_importAuditSchema.get("hidden");
    MetadataBuilder temporaryRecord_importAudit_id = temporaryRecord_importAuditSchema.get("id");
    MetadataBuilder temporaryRecord_importAudit_legacyIdentifier = temporaryRecord_importAuditSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_importAudit_logicallyDeletedOn = temporaryRecord_importAuditSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_importAudit_manualTokens = temporaryRecord_importAuditSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_importAudit_markedForParsing = temporaryRecord_importAuditSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_importAudit_markedForPreviewConversion = temporaryRecord_importAuditSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_importAudit_markedForReindexing = temporaryRecord_importAuditSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_importAudit_migrationDataVersion = temporaryRecord_importAuditSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_importAudit_modifiedBy = temporaryRecord_importAuditSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_importAudit_modifiedOn = temporaryRecord_importAuditSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_importAudit_nestedAuthorizations = temporaryRecord_importAuditSchema.get("nestedAuthorizations");
    MetadataBuilder temporaryRecord_importAudit_path = temporaryRecord_importAuditSchema.get("path");
    MetadataBuilder temporaryRecord_importAudit_pathParts = temporaryRecord_importAuditSchema.get("pathParts");
    MetadataBuilder temporaryRecord_importAudit_principalAncestorsIntIds = temporaryRecord_importAuditSchema.get("principalAncestorsIntIds");
    MetadataBuilder temporaryRecord_importAudit_principalConceptsIntIds = temporaryRecord_importAuditSchema.get("principalConceptsIntIds");
    MetadataBuilder temporaryRecord_importAudit_principalpath = temporaryRecord_importAuditSchema.get("principalpath");
    MetadataBuilder temporaryRecord_importAudit_removedauthorizations = temporaryRecord_importAuditSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_importAudit_schema = temporaryRecord_importAuditSchema.get("schema");
    MetadataBuilder temporaryRecord_importAudit_secondaryConceptsIntIds = temporaryRecord_importAuditSchema.get("secondaryConceptsIntIds");
    MetadataBuilder temporaryRecord_importAudit_shareDenyTokens = temporaryRecord_importAuditSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_importAudit_shareTokens = temporaryRecord_importAuditSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_importAudit_title = temporaryRecord_importAuditSchema.get("title");
    MetadataBuilder temporaryRecord_importAudit_tokens = temporaryRecord_importAuditSchema.get("tokens");
    MetadataBuilder temporaryRecord_importAudit_tokensHierarchy = temporaryRecord_importAuditSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_importAudit_visibleInTrees = temporaryRecord_importAuditSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_scriptReport_allReferences = temporaryRecord_scriptReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_scriptReport_allRemovedAuths = temporaryRecord_scriptReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_scriptReport_attachedAncestors = temporaryRecord_scriptReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_scriptReport_attachedPrincipalAncestorsIntIds = temporaryRecord_scriptReportSchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_scriptReport_autocomplete = temporaryRecord_scriptReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_scriptReport_caption = temporaryRecord_scriptReportSchema.get("caption");
    MetadataBuilder temporaryRecord_scriptReport_content = temporaryRecord_scriptReportSchema.get("content");
    MetadataBuilder temporaryRecord_scriptReport_createdBy = temporaryRecord_scriptReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_scriptReport_createdOn = temporaryRecord_scriptReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_scriptReport_daysBeforeDestruction = temporaryRecord_scriptReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_scriptReport_deleted = temporaryRecord_scriptReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_scriptReport_denyTokens = temporaryRecord_scriptReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_scriptReport_destructionDate = temporaryRecord_scriptReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_scriptReport_detachedPrincipalAncestorsIntIds = temporaryRecord_scriptReportSchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_scriptReport_detachedauthorizations = temporaryRecord_scriptReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_scriptReport_errorOnPhysicalDeletion = temporaryRecord_scriptReportSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_scriptReport_estimatedSize = temporaryRecord_scriptReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_scriptReport_hidden = temporaryRecord_scriptReportSchema.get("hidden");
    MetadataBuilder temporaryRecord_scriptReport_id = temporaryRecord_scriptReportSchema.get("id");
    MetadataBuilder temporaryRecord_scriptReport_legacyIdentifier = temporaryRecord_scriptReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_scriptReport_logicallyDeletedOn = temporaryRecord_scriptReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_scriptReport_manualTokens = temporaryRecord_scriptReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_scriptReport_markedForParsing = temporaryRecord_scriptReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_scriptReport_markedForPreviewConversion = temporaryRecord_scriptReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_scriptReport_markedForReindexing = temporaryRecord_scriptReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_scriptReport_migrationDataVersion = temporaryRecord_scriptReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_scriptReport_modifiedBy = temporaryRecord_scriptReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_scriptReport_modifiedOn = temporaryRecord_scriptReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_scriptReport_nestedAuthorizations = temporaryRecord_scriptReportSchema.get("nestedAuthorizations");
    MetadataBuilder temporaryRecord_scriptReport_path = temporaryRecord_scriptReportSchema.get("path");
    MetadataBuilder temporaryRecord_scriptReport_pathParts = temporaryRecord_scriptReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_scriptReport_principalAncestorsIntIds = temporaryRecord_scriptReportSchema.get("principalAncestorsIntIds");
    MetadataBuilder temporaryRecord_scriptReport_principalConceptsIntIds = temporaryRecord_scriptReportSchema.get("principalConceptsIntIds");
    MetadataBuilder temporaryRecord_scriptReport_principalpath = temporaryRecord_scriptReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_scriptReport_removedauthorizations = temporaryRecord_scriptReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_scriptReport_schema = temporaryRecord_scriptReportSchema.get("schema");
    MetadataBuilder temporaryRecord_scriptReport_secondaryConceptsIntIds = temporaryRecord_scriptReportSchema.get("secondaryConceptsIntIds");
    MetadataBuilder temporaryRecord_scriptReport_shareDenyTokens = temporaryRecord_scriptReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_scriptReport_shareTokens = temporaryRecord_scriptReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_scriptReport_title = temporaryRecord_scriptReportSchema.get("title");
    MetadataBuilder temporaryRecord_scriptReport_tokens = temporaryRecord_scriptReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_scriptReport_tokensHierarchy = temporaryRecord_scriptReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_scriptReport_visibleInTrees = temporaryRecord_scriptReportSchema.get("visibleInTrees");
    MetadataBuilder temporaryRecord_vaultScanReport_allReferences = temporaryRecord_vaultScanReportSchema.get("allReferences");
    MetadataBuilder temporaryRecord_vaultScanReport_allRemovedAuths = temporaryRecord_vaultScanReportSchema.get("allRemovedAuths");
    MetadataBuilder temporaryRecord_vaultScanReport_attachedAncestors = temporaryRecord_vaultScanReportSchema.get("attachedAncestors");
    MetadataBuilder temporaryRecord_vaultScanReport_attachedPrincipalAncestorsIntIds = temporaryRecord_vaultScanReportSchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_vaultScanReport_autocomplete = temporaryRecord_vaultScanReportSchema.get("autocomplete");
    MetadataBuilder temporaryRecord_vaultScanReport_caption = temporaryRecord_vaultScanReportSchema.get("caption");
    MetadataBuilder temporaryRecord_vaultScanReport_content = temporaryRecord_vaultScanReportSchema.get("content");
    MetadataBuilder temporaryRecord_vaultScanReport_createdBy = temporaryRecord_vaultScanReportSchema.get("createdBy");
    MetadataBuilder temporaryRecord_vaultScanReport_createdOn = temporaryRecord_vaultScanReportSchema.get("createdOn");
    MetadataBuilder temporaryRecord_vaultScanReport_daysBeforeDestruction = temporaryRecord_vaultScanReportSchema.get("daysBeforeDestruction");
    MetadataBuilder temporaryRecord_vaultScanReport_deleted = temporaryRecord_vaultScanReportSchema.get("deleted");
    MetadataBuilder temporaryRecord_vaultScanReport_denyTokens = temporaryRecord_vaultScanReportSchema.get("denyTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_destructionDate = temporaryRecord_vaultScanReportSchema.get("destructionDate");
    MetadataBuilder temporaryRecord_vaultScanReport_detachedPrincipalAncestorsIntIds = temporaryRecord_vaultScanReportSchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder temporaryRecord_vaultScanReport_detachedauthorizations = temporaryRecord_vaultScanReportSchema.get("detachedauthorizations");
    MetadataBuilder temporaryRecord_vaultScanReport_errorOnPhysicalDeletion = temporaryRecord_vaultScanReportSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder temporaryRecord_vaultScanReport_estimatedSize = temporaryRecord_vaultScanReportSchema.get("estimatedSize");
    MetadataBuilder temporaryRecord_vaultScanReport_hidden = temporaryRecord_vaultScanReportSchema.get("hidden");
    MetadataBuilder temporaryRecord_vaultScanReport_id = temporaryRecord_vaultScanReportSchema.get("id");
    MetadataBuilder temporaryRecord_vaultScanReport_legacyIdentifier = temporaryRecord_vaultScanReportSchema.get("legacyIdentifier");
    MetadataBuilder temporaryRecord_vaultScanReport_logicallyDeletedOn = temporaryRecord_vaultScanReportSchema.get("logicallyDeletedOn");
    MetadataBuilder temporaryRecord_vaultScanReport_manualTokens = temporaryRecord_vaultScanReportSchema.get("manualTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForParsing = temporaryRecord_vaultScanReportSchema.get("markedForParsing");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForPreviewConversion = temporaryRecord_vaultScanReportSchema.get("markedForPreviewConversion");
    MetadataBuilder temporaryRecord_vaultScanReport_markedForReindexing = temporaryRecord_vaultScanReportSchema.get("markedForReindexing");
    MetadataBuilder temporaryRecord_vaultScanReport_migrationDataVersion = temporaryRecord_vaultScanReportSchema.get("migrationDataVersion");
    MetadataBuilder temporaryRecord_vaultScanReport_modifiedBy = temporaryRecord_vaultScanReportSchema.get("modifiedBy");
    MetadataBuilder temporaryRecord_vaultScanReport_modifiedOn = temporaryRecord_vaultScanReportSchema.get("modifiedOn");
    MetadataBuilder temporaryRecord_vaultScanReport_nestedAuthorizations = temporaryRecord_vaultScanReportSchema.get("nestedAuthorizations");
    MetadataBuilder temporaryRecord_vaultScanReport_path = temporaryRecord_vaultScanReportSchema.get("path");
    MetadataBuilder temporaryRecord_vaultScanReport_pathParts = temporaryRecord_vaultScanReportSchema.get("pathParts");
    MetadataBuilder temporaryRecord_vaultScanReport_principalAncestorsIntIds = temporaryRecord_vaultScanReportSchema.get("principalAncestorsIntIds");
    MetadataBuilder temporaryRecord_vaultScanReport_principalConceptsIntIds = temporaryRecord_vaultScanReportSchema.get("principalConceptsIntIds");
    MetadataBuilder temporaryRecord_vaultScanReport_principalpath = temporaryRecord_vaultScanReportSchema.get("principalpath");
    MetadataBuilder temporaryRecord_vaultScanReport_removedauthorizations = temporaryRecord_vaultScanReportSchema.get("removedauthorizations");
    MetadataBuilder temporaryRecord_vaultScanReport_schema = temporaryRecord_vaultScanReportSchema.get("schema");
    MetadataBuilder temporaryRecord_vaultScanReport_secondaryConceptsIntIds = temporaryRecord_vaultScanReportSchema.get("secondaryConceptsIntIds");
    MetadataBuilder temporaryRecord_vaultScanReport_shareDenyTokens = temporaryRecord_vaultScanReportSchema.get("shareDenyTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_shareTokens = temporaryRecord_vaultScanReportSchema.get("shareTokens");
    MetadataBuilder temporaryRecord_vaultScanReport_title = temporaryRecord_vaultScanReportSchema.get("title");
    MetadataBuilder temporaryRecord_vaultScanReport_tokens = temporaryRecord_vaultScanReportSchema.get("tokens");
    MetadataBuilder temporaryRecord_vaultScanReport_tokensHierarchy = temporaryRecord_vaultScanReportSchema.get("tokensHierarchy");
    MetadataBuilder temporaryRecord_vaultScanReport_visibleInTrees = temporaryRecord_vaultScanReportSchema.get("visibleInTrees");
  }

  private void createUserSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder userSchemaType, MetadataSchemaBuilder userSchema) {
    MetadataBuilder user_assignTaskAutomatically = userSchema.create("assignTaskAutomatically").setType(MetadataValueType.BOOLEAN);
    user_assignTaskAutomatically.setUndeletable(true);
    MetadataBuilder user_assignationEmailReceptionDisabled = userSchema.create("assignationEmailReceptionDisabled").setType(MetadataValueType.BOOLEAN);
    user_assignationEmailReceptionDisabled.setSystemReserved(true);
    user_assignationEmailReceptionDisabled.setUndeletable(true);
    MetadataBuilder user_defaultFollowerWhenCreatingTask = userSchema.create("defaultFollowerWhenCreatingTask").setType(MetadataValueType.STRUCTURE);
    user_defaultFollowerWhenCreatingTask.setUndeletable(true);
    user_defaultFollowerWhenCreatingTask.defineStructureFactory(TaskFollowerFactory.class);
    MetadataBuilder user_delegationTaskUser = userSchema.create("delegationTaskUser").setType(MetadataValueType.REFERENCE);
    user_delegationTaskUser.setUndeletable(true);
    user_delegationTaskUser.defineReferencesTo(asList(types.getSchema("user_default")));
  }

  private void createFacetSchemaTypeMetadatas(MetadataSchemaTypesBuilder types, MetadataSchemaTypeBuilder facetSchemaType, MetadataSchemaBuilder facet_fieldSchema, MetadataSchemaBuilder facet_querySchema, MetadataSchemaBuilder facetSchema) {
    MetadataBuilder facet_field_active = facet_fieldSchema.get("active");
    MetadataBuilder facet_field_allReferences = facet_fieldSchema.get("allReferences");
    MetadataBuilder facet_field_allRemovedAuths = facet_fieldSchema.get("allRemovedAuths");
    MetadataBuilder facet_field_attachedAncestors = facet_fieldSchema.get("attachedAncestors");
    MetadataBuilder facet_field_attachedPrincipalAncestorsIntIds = facet_fieldSchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder facet_field_autocomplete = facet_fieldSchema.get("autocomplete");
    MetadataBuilder facet_field_caption = facet_fieldSchema.get("caption");
    MetadataBuilder facet_field_createdBy = facet_fieldSchema.get("createdBy");
    MetadataBuilder facet_field_createdOn = facet_fieldSchema.get("createdOn");
    MetadataBuilder facet_field_deleted = facet_fieldSchema.get("deleted");
    MetadataBuilder facet_field_denyTokens = facet_fieldSchema.get("denyTokens");
    MetadataBuilder facet_field_detachedPrincipalAncestorsIntIds = facet_fieldSchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder facet_field_detachedauthorizations = facet_fieldSchema.get("detachedauthorizations");
    MetadataBuilder facet_field_elementPerPage = facet_fieldSchema.get("elementPerPage");
    MetadataBuilder facet_field_errorOnPhysicalDeletion = facet_fieldSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder facet_field_estimatedSize = facet_fieldSchema.get("estimatedSize");
    MetadataBuilder facet_field_facetType = facet_fieldSchema.get("facetType");
    MetadataBuilder facet_field_fieldDatastoreCode = facet_fieldSchema.get("fieldDatastoreCode");
    MetadataBuilder facet_field_hidden = facet_fieldSchema.get("hidden");
    MetadataBuilder facet_field_id = facet_fieldSchema.get("id");
    MetadataBuilder facet_field_legacyIdentifier = facet_fieldSchema.get("legacyIdentifier");
    MetadataBuilder facet_field_logicallyDeletedOn = facet_fieldSchema.get("logicallyDeletedOn");
    MetadataBuilder facet_field_manualTokens = facet_fieldSchema.get("manualTokens");
    MetadataBuilder facet_field_markedForParsing = facet_fieldSchema.get("markedForParsing");
    MetadataBuilder facet_field_markedForPreviewConversion = facet_fieldSchema.get("markedForPreviewConversion");
    MetadataBuilder facet_field_markedForReindexing = facet_fieldSchema.get("markedForReindexing");
    MetadataBuilder facet_field_migrationDataVersion = facet_fieldSchema.get("migrationDataVersion");
    MetadataBuilder facet_field_modifiedBy = facet_fieldSchema.get("modifiedBy");
    MetadataBuilder facet_field_modifiedOn = facet_fieldSchema.get("modifiedOn");
    MetadataBuilder facet_field_nestedAuthorizations = facet_fieldSchema.get("nestedAuthorizations");
    MetadataBuilder facet_field_openByDefault = facet_fieldSchema.get("openByDefault");
    MetadataBuilder facet_field_order = facet_fieldSchema.get("order");
    MetadataBuilder facet_field_orderResult = facet_fieldSchema.get("orderResult");
    MetadataBuilder facet_field_pages = facet_fieldSchema.get("pages");
    MetadataBuilder facet_field_path = facet_fieldSchema.get("path");
    MetadataBuilder facet_field_pathParts = facet_fieldSchema.get("pathParts");
    MetadataBuilder facet_field_principalAncestorsIntIds = facet_fieldSchema.get("principalAncestorsIntIds");
    MetadataBuilder facet_field_principalConceptsIntIds = facet_fieldSchema.get("principalConceptsIntIds");
    MetadataBuilder facet_field_principalpath = facet_fieldSchema.get("principalpath");
    MetadataBuilder facet_field_removedauthorizations = facet_fieldSchema.get("removedauthorizations");
    MetadataBuilder facet_field_schema = facet_fieldSchema.get("schema");
    MetadataBuilder facet_field_secondaryConceptsIntIds = facet_fieldSchema.get("secondaryConceptsIntIds");
    MetadataBuilder facet_field_shareDenyTokens = facet_fieldSchema.get("shareDenyTokens");
    MetadataBuilder facet_field_shareTokens = facet_fieldSchema.get("shareTokens");
    MetadataBuilder facet_field_title = facet_fieldSchema.get("title");
    MetadataBuilder facet_field_tokens = facet_fieldSchema.get("tokens");
    MetadataBuilder facet_field_tokensHierarchy = facet_fieldSchema.get("tokensHierarchy");
    MetadataBuilder facet_field_usedByModule = facet_fieldSchema.get("usedByModule");
    MetadataBuilder facet_field_visibleInTrees = facet_fieldSchema.get("visibleInTrees");
    MetadataBuilder facet_query_active = facet_querySchema.get("active");
    MetadataBuilder facet_query_allReferences = facet_querySchema.get("allReferences");
    MetadataBuilder facet_query_allRemovedAuths = facet_querySchema.get("allRemovedAuths");
    MetadataBuilder facet_query_attachedAncestors = facet_querySchema.get("attachedAncestors");
    MetadataBuilder facet_query_attachedPrincipalAncestorsIntIds = facet_querySchema.get("attachedPrincipalAncestorsIntIds");
    MetadataBuilder facet_query_autocomplete = facet_querySchema.get("autocomplete");
    MetadataBuilder facet_query_caption = facet_querySchema.get("caption");
    MetadataBuilder facet_query_createdBy = facet_querySchema.get("createdBy");
    MetadataBuilder facet_query_createdOn = facet_querySchema.get("createdOn");
    MetadataBuilder facet_query_deleted = facet_querySchema.get("deleted");
    MetadataBuilder facet_query_denyTokens = facet_querySchema.get("denyTokens");
    MetadataBuilder facet_query_detachedPrincipalAncestorsIntIds = facet_querySchema.get("detachedPrincipalAncestorsIntIds");
    MetadataBuilder facet_query_detachedauthorizations = facet_querySchema.get("detachedauthorizations");
    MetadataBuilder facet_query_elementPerPage = facet_querySchema.get("elementPerPage");
    MetadataBuilder facet_query_errorOnPhysicalDeletion = facet_querySchema.get("errorOnPhysicalDeletion");
    MetadataBuilder facet_query_estimatedSize = facet_querySchema.get("estimatedSize");
    MetadataBuilder facet_query_facetType = facet_querySchema.get("facetType");
    MetadataBuilder facet_query_fieldDatastoreCode = facet_querySchema.get("fieldDatastoreCode");
    MetadataBuilder facet_query_hidden = facet_querySchema.get("hidden");
    MetadataBuilder facet_query_id = facet_querySchema.get("id");
    MetadataBuilder facet_query_legacyIdentifier = facet_querySchema.get("legacyIdentifier");
    MetadataBuilder facet_query_logicallyDeletedOn = facet_querySchema.get("logicallyDeletedOn");
    MetadataBuilder facet_query_manualTokens = facet_querySchema.get("manualTokens");
    MetadataBuilder facet_query_markedForParsing = facet_querySchema.get("markedForParsing");
    MetadataBuilder facet_query_markedForPreviewConversion = facet_querySchema.get("markedForPreviewConversion");
    MetadataBuilder facet_query_markedForReindexing = facet_querySchema.get("markedForReindexing");
    MetadataBuilder facet_query_migrationDataVersion = facet_querySchema.get("migrationDataVersion");
    MetadataBuilder facet_query_modifiedBy = facet_querySchema.get("modifiedBy");
    MetadataBuilder facet_query_modifiedOn = facet_querySchema.get("modifiedOn");
    MetadataBuilder facet_query_nestedAuthorizations = facet_querySchema.get("nestedAuthorizations");
    MetadataBuilder facet_query_openByDefault = facet_querySchema.get("openByDefault");
    MetadataBuilder facet_query_order = facet_querySchema.get("order");
    MetadataBuilder facet_query_orderResult = facet_querySchema.get("orderResult");
    MetadataBuilder facet_query_pages = facet_querySchema.get("pages");
    MetadataBuilder facet_query_path = facet_querySchema.get("path");
    MetadataBuilder facet_query_pathParts = facet_querySchema.get("pathParts");
    MetadataBuilder facet_query_principalAncestorsIntIds = facet_querySchema.get("principalAncestorsIntIds");
    MetadataBuilder facet_query_principalConceptsIntIds = facet_querySchema.get("principalConceptsIntIds");
    MetadataBuilder facet_query_principalpath = facet_querySchema.get("principalpath");
    MetadataBuilder facet_query_removedauthorizations = facet_querySchema.get("removedauthorizations");
    MetadataBuilder facet_query_schema = facet_querySchema.get("schema");
    MetadataBuilder facet_query_secondaryConceptsIntIds = facet_querySchema.get("secondaryConceptsIntIds");
    MetadataBuilder facet_query_shareDenyTokens = facet_querySchema.get("shareDenyTokens");
    MetadataBuilder facet_query_shareTokens = facet_querySchema.get("shareTokens");
    MetadataBuilder facet_query_title = facet_querySchema.get("title");
    MetadataBuilder facet_query_tokens = facet_querySchema.get("tokens");
    MetadataBuilder facet_query_tokensHierarchy = facet_querySchema.get("tokensHierarchy");
    MetadataBuilder facet_query_usedByModule = facet_querySchema.get("usedByModule");
    MetadataBuilder facet_query_visibleInTrees = facet_querySchema.get("visibleInTrees");
  }

  public void applySchemasDisplay(SchemasDisplayManager manager) {
    SchemaTypesDisplayTransactionBuilder transaction = manager.newTransactionBuilderFor(collection);
    SchemaTypesDisplayConfig typesConfig = manager.getTypes(collection);
    transaction.add(manager.getType(collection, "userTask").withSimpleSearchStatus(true).withAdvancedSearchStatus(true).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("default:init.userTask.definition", "init.userTask.assignment", "init.userTask.details", "init.userTask.followersTab", "init.userTask.remindersTab"))));
    transaction.add(manager.getSchema(collection, "userTask_default").withFormMetadataCodes(asList("userTask_default_title", "userTask_default_type", "userTask_default_assignee", "userTask_default_assigneeGroupsCandidates", "userTask_default_assigneeUsersCandidates", "userTask_default_assigner", "userTask_default_parentTask", "userTask_default_progressPercentage", "userTask_default_status", "userTask_default_assignedOn", "userTask_default_dueDate", "userTask_default_endDate", "userTask_default_startDate", "userTask_default_contents", "userTask_default_description", "userTask_default_reminders", "userTask_default_taskFollowers", "userTask_default_question", "userTask_default_decision", "userTask_default_relativeDueDate", "userTask_default_reminderFrequency", "userTask_default_escalationAssignee", "userTask_default_taskCollaborators", "userTask_default_taskCollaboratorsGroups")).withDisplayMetadataCodes(asList("userTask_default_title", "userTask_default_type", "userTask_default_createdOn", "userTask_default_modifiedOn", "userTask_default_assignedOn", "userTask_default_assignee", "userTask_default_assigneeGroupsCandidates", "userTask_default_assigneeUsersCandidates", "userTask_default_assigner", "userTask_default_dueDate", "userTask_default_endDate", "userTask_default_nextReminderOn", "userTask_default_parentTask", "userTask_default_parentTaskDueDate", "userTask_default_progressPercentage", "userTask_default_startDate", "userTask_default_status", "userTask_default_taskFollowersIds", "userTask_default_contents", "userTask_default_description", "userTask_default_comments", "userTask_default_question", "userTask_default_decision", "userTask_default_workflow", "userTask_default_workflowInstance", "userTask_default_relativeDueDate", "userTask_default_reminderFrequency", "userTask_default_escalationAssignee", "userTask_default_isLate", "userTask_default_taskCollaborators", "userTask_default_taskCollaboratorsGroups")).withSearchResultsMetadataCodes(asList("userTask_default_title", "userTask_default_status", "userTask_default_dueDate", "userTask_default_assignee")).withTableMetadataCodes(asList("userTask_default_title", "userTask_default_status", "userTask_default_dueDate", "userTask_default_assignee", "userTask_default_starredByUsers")));
    transaction.add(manager.getMetadata(collection, "userTask_default_assignedOn").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_assignee").withMetadataGroup("init.userTask.assignment").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_assigneeGroupsCandidates").withMetadataGroup("init.userTask.assignment").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_assigneeUsersCandidates").withMetadataGroup("init.userTask.assignment").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_assigner").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_contents").withMetadataGroup("init.userTask.details").withInputType(MetadataInputType.CONTENT).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_description").withMetadataGroup("").withInputType(MetadataInputType.RICHTEXT).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_dueDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_endDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_escalationAssignee").withMetadataGroup("init.userTask.remindersTab").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_parentTask").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_parentTaskDueDate").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_progressPercentage").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_readByUser").withMetadataGroup("default:init.userTask.definition").withInputType(MetadataInputType.CHECKBOXES).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_reminderFrequency").withMetadataGroup("init.userTask.remindersTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_reminders").withMetadataGroup("init.userTask.remindersTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_startDate").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_status").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_taskCollaborators").withMetadataGroup("init.userTask.assignment").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_taskCollaboratorsGroups").withMetadataGroup("init.userTask.assignment").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_taskCollaboratorsGroupsWriteAuthorizations").withMetadataGroup("init.userTask.assignment").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_taskCollaboratorsWriteAuthorizations").withMetadataGroup("init.userTask.assignment").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_taskFollowers").withMetadataGroup("init.userTask.followersTab").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "userTask_default_taskFollowersIds").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_title").withMetadataGroup("").withInputType(MetadataInputType.FIELD).withHighlightStatus(true).withVisibleInAdvancedSearchStatus(true));
    transaction.add(manager.getMetadata(collection, "userTask_default_type").withMetadataGroup("").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(true));
    manager.execute(transaction.build());
  }

  public void applyGeneratedRoles() {
    RolesManager rolesManager = appLayerFactory.getModelLayerFactory().getRolesManager();;
    rolesManager.updateRole(rolesManager.getRole(collection, "ADM").withNewPermissions(asList("core.accessDeleteAllTemporaryRecords", "core.batchProcess", "core.deleteContentVersion", "core.deletePublicSavedSearch", "core.editAllAnnotation", "core.ldapConfigurationManagement", "core.manageConnectors", "core.manageEmailServer", "core.manageExcelReport", "core.manageFacets", "core.manageGlobalLinks", "core.manageLabels", "core.manageMetadataExtractor", "core.manageMetadataSchemas", "core.managePrintableReport", "core.manageSearchBoost", "core.manageSecurity", "core.manageSystemCollections", "core.manageSystemConfiguration", "core.manageSystemDataImports", "core.manageSystemGroups", "core.manageSystemGroupsActivation", "core.manageSystemUpdates", "core.manageSystemUsers", "core.manageTaxonomies", "core.manageTrash", "core.manageValueList", "core.managerTemporaryRecords", "core.modifyPublicSavedSearch", "core.seeAllTemporaryRecords", "core.unlimitedBatchProcess", "core.useExternalAPIS", "core.viewEvents", "core.viewLoginNotificationAlert", "core.viewSystemBatchProcesses", "core.viewSystemState", "tasks.manageWorkflows", "tasks.startWorkflows")));
  }
}