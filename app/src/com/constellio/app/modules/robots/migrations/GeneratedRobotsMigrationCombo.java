package com.constellio.app.modules.robots.migrations;

import com.constellio.app.services.schemasDisplay.SchemaTypesDisplayTransactionBuilder;
import com.constellio.app.entities.schemasDisplay.SchemaTypesDisplayConfig;
import com.constellio.model.entities.schemas.MetadataTransiency;
import com.constellio.model.entities.schemas.MetadataValueType;
import com.constellio.model.services.security.roles.RolesManager;
import java.util.ArrayList;
import static com.constellio.data.utils.HashMapBuilder.stringObjectMap;
import static java.util.Arrays.asList;

import com.constellio.app.entities.modules.MigrationResourcesProvider;
import com.constellio.app.entities.schemasDisplay.enums.MetadataInputType;
import com.constellio.app.services.factories.AppLayerFactory;
import com.constellio.app.services.schemasDisplay.SchemasDisplayManager;
import com.constellio.app.ui.pages.search.criteria.CriterionFactory;
import com.constellio.model.services.schemas.builders.MetadataBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypeBuilder;
import com.constellio.model.services.schemas.builders.MetadataSchemaTypesBuilder;
import com.constellio.model.services.schemas.calculators.AllAuthorizationsCalculator;
import com.constellio.model.services.schemas.calculators.AllReferencesCalculator;
import com.constellio.model.services.schemas.calculators.AllRemovedAuthsCalculator;
import com.constellio.model.services.schemas.calculators.AttachedAncestorsCalculator;
import com.constellio.model.services.schemas.calculators.InheritedAuthorizationsCalculator;
import com.constellio.model.services.schemas.calculators.ParentPathCalculator;
import com.constellio.model.services.schemas.calculators.PathCalculator;
import com.constellio.model.services.schemas.calculators.PathPartsCalculator;
import com.constellio.model.services.schemas.calculators.PrincipalPathCalculator;
import com.constellio.model.services.schemas.calculators.TokensCalculator2;
import com.constellio.model.services.schemas.validators.ManualTokenValidator;
import java.lang.String;

public final class GeneratedRobotsMigrationCombo {
  String collection;

  AppLayerFactory appLayerFactory;

  MigrationResourcesProvider resourcesProvider;

  GeneratedRobotsMigrationCombo(String collection, AppLayerFactory appLayerFactory, MigrationResourcesProvider resourcesProvider) {
    this.collection = collection;
    this.appLayerFactory = appLayerFactory;
    this.resourcesProvider = resourcesProvider;
  }

  public void applyGeneratedSchemaAlteration(MetadataSchemaTypesBuilder typesBuilder) {
    MetadataSchemaTypeBuilder collectionSchemaType = typesBuilder.getSchemaType("collection");
    MetadataSchemaBuilder collectionSchema = collectionSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder groupSchemaType = typesBuilder.getSchemaType("group");
    MetadataSchemaBuilder groupSchema = groupSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userSchemaType = typesBuilder.getSchemaType("user");
    MetadataSchemaBuilder userSchema = userSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder authorizationDetailsSchemaType = typesBuilder.getSchemaType("authorizationDetails");
    MetadataSchemaBuilder authorizationDetailsSchema = authorizationDetailsSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder emailToSendSchemaType = typesBuilder.getSchemaType("emailToSend");
    MetadataSchemaBuilder emailToSendSchema = emailToSendSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder eventSchemaType = typesBuilder.getSchemaType("event");
    MetadataSchemaBuilder eventSchema = eventSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder facetSchemaType = typesBuilder.getSchemaType("facet");
    MetadataSchemaBuilder facet_fieldSchema = facetSchemaType.getCustomSchema("field");
    MetadataSchemaBuilder facet_querySchema = facetSchemaType.getCustomSchema("query");
    MetadataSchemaBuilder facetSchema = facetSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder printableSchemaType = typesBuilder.getSchemaType("printable");
    MetadataSchemaBuilder printableSchema = printableSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder reportSchemaType = typesBuilder.getSchemaType("report");
    MetadataSchemaBuilder reportSchema = reportSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder savedSearchSchemaType = typesBuilder.getSchemaType("savedSearch");
    MetadataSchemaBuilder savedSearchSchema = savedSearchSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder taskSchemaType = typesBuilder.getSchemaType("task");
    MetadataSchemaBuilder task_approvalSchema = taskSchemaType.getCustomSchema("approval");
    MetadataSchemaBuilder taskSchema = taskSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder userDocumentSchemaType = typesBuilder.getSchemaType("userDocument");
    MetadataSchemaBuilder userDocumentSchema = userDocumentSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder actionParametersSchemaType = typesBuilder.createNewSchemaType("actionParameters");
    MetadataSchemaBuilder actionParametersSchema = actionParametersSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder robotSchemaType = typesBuilder.createNewSchemaType("robot");
    MetadataSchemaBuilder robotSchema = robotSchemaType.getDefaultSchema();
    MetadataSchemaTypeBuilder robotLogSchemaType = typesBuilder.createNewSchemaType("robotLog");
    MetadataSchemaBuilder robotLogSchema = robotLogSchemaType.getDefaultSchema();
    MetadataBuilder actionParameters_allReferences = actionParametersSchema.get("allReferences");
    actionParameters_allReferences.setMultivalue(true);
    actionParameters_allReferences.setSystemReserved(true);
    actionParameters_allReferences.setUndeletable(true);
    MetadataBuilder actionParameters_allRemovedAuths = actionParametersSchema.get("allRemovedAuths");
    actionParameters_allRemovedAuths.setMultivalue(true);
    actionParameters_allRemovedAuths.setSystemReserved(true);
    actionParameters_allRemovedAuths.setUndeletable(true);
    actionParameters_allRemovedAuths.setEssential(true);
    MetadataBuilder actionParameters_allauthorizations = actionParametersSchema.get("allauthorizations");
    actionParameters_allauthorizations.setMultivalue(true);
    actionParameters_allauthorizations.setSystemReserved(true);
    actionParameters_allauthorizations.setUndeletable(true);
    MetadataBuilder actionParameters_attachedAncestors = actionParametersSchema.get("attachedAncestors");
    actionParameters_attachedAncestors.setMultivalue(true);
    actionParameters_attachedAncestors.setSystemReserved(true);
    actionParameters_attachedAncestors.setUndeletable(true);
    actionParameters_attachedAncestors.setEssential(true);
    MetadataBuilder actionParameters_authorizations = actionParametersSchema.get("authorizations");
    actionParameters_authorizations.setMultivalue(true);
    actionParameters_authorizations.setSystemReserved(true);
    actionParameters_authorizations.setUndeletable(true);
    MetadataBuilder actionParameters_createdBy = actionParametersSchema.get("createdBy");
    actionParameters_createdBy.setSystemReserved(true);
    actionParameters_createdBy.setUndeletable(true);
    MetadataBuilder actionParameters_createdOn = actionParametersSchema.get("createdOn");
    actionParameters_createdOn.setSystemReserved(true);
    actionParameters_createdOn.setUndeletable(true);
    actionParameters_createdOn.setSortable(true);
    MetadataBuilder actionParameters_deleted = actionParametersSchema.get("deleted");
    actionParameters_deleted.setSystemReserved(true);
    actionParameters_deleted.setUndeletable(true);
    MetadataBuilder actionParameters_denyTokens = actionParametersSchema.get("denyTokens");
    actionParameters_denyTokens.setMultivalue(true);
    actionParameters_denyTokens.setSystemReserved(true);
    actionParameters_denyTokens.setUndeletable(true);
    actionParameters_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder actionParameters_detachedauthorizations = actionParametersSchema.get("detachedauthorizations");
    actionParameters_detachedauthorizations.setSystemReserved(true);
    actionParameters_detachedauthorizations.setUndeletable(true);
    MetadataBuilder actionParameters_errorOnPhysicalDeletion = actionParametersSchema.get("errorOnPhysicalDeletion");
    actionParameters_errorOnPhysicalDeletion.setSystemReserved(true);
    actionParameters_errorOnPhysicalDeletion.setUndeletable(true);
    MetadataBuilder actionParameters_followers = actionParametersSchema.get("followers");
    actionParameters_followers.setMultivalue(true);
    actionParameters_followers.setSystemReserved(true);
    actionParameters_followers.setUndeletable(true);
    actionParameters_followers.setSearchable(true);
    MetadataBuilder actionParameters_id = actionParametersSchema.get("id");
    actionParameters_id.setDefaultRequirement(true);
    actionParameters_id.setSystemReserved(true);
    actionParameters_id.setUndeletable(true);
    actionParameters_id.setSearchable(true);
    actionParameters_id.setSortable(true);
    actionParameters_id.setUniqueValue(true);
    actionParameters_id.setUnmodifiable(true);
    MetadataBuilder actionParameters_inheritedauthorizations = actionParametersSchema.get("inheritedauthorizations");
    actionParameters_inheritedauthorizations.setMultivalue(true);
    actionParameters_inheritedauthorizations.setSystemReserved(true);
    actionParameters_inheritedauthorizations.setUndeletable(true);
    MetadataBuilder actionParameters_legacyIdentifier = actionParametersSchema.get("legacyIdentifier");
    actionParameters_legacyIdentifier.setDefaultRequirement(true);
    actionParameters_legacyIdentifier.setSystemReserved(true);
    actionParameters_legacyIdentifier.setUndeletable(true);
    actionParameters_legacyIdentifier.setSearchable(true);
    actionParameters_legacyIdentifier.setUniqueValue(true);
    actionParameters_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder actionParameters_logicallyDeletedOn = actionParametersSchema.get("logicallyDeletedOn");
    actionParameters_logicallyDeletedOn.setSystemReserved(true);
    actionParameters_logicallyDeletedOn.setUndeletable(true);
    MetadataBuilder actionParameters_manualTokens = actionParametersSchema.get("manualTokens");
    actionParameters_manualTokens.setMultivalue(true);
    actionParameters_manualTokens.setSystemReserved(true);
    actionParameters_manualTokens.setUndeletable(true);
    actionParameters_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder actionParameters_markedForPreviewConversion = actionParametersSchema.get("markedForPreviewConversion");
    actionParameters_markedForPreviewConversion.setSystemReserved(true);
    actionParameters_markedForPreviewConversion.setUndeletable(true);
    MetadataBuilder actionParameters_markedForReindexing = actionParametersSchema.get("markedForReindexing");
    actionParameters_markedForReindexing.setSystemReserved(true);
    actionParameters_markedForReindexing.setUndeletable(true);
    MetadataBuilder actionParameters_modifiedBy = actionParametersSchema.get("modifiedBy");
    actionParameters_modifiedBy.setSystemReserved(true);
    actionParameters_modifiedBy.setUndeletable(true);
    MetadataBuilder actionParameters_modifiedOn = actionParametersSchema.get("modifiedOn");
    actionParameters_modifiedOn.setSystemReserved(true);
    actionParameters_modifiedOn.setUndeletable(true);
    actionParameters_modifiedOn.setSortable(true);
    MetadataBuilder actionParameters_parentpath = actionParametersSchema.get("parentpath");
    actionParameters_parentpath.setMultivalue(true);
    actionParameters_parentpath.setSystemReserved(true);
    actionParameters_parentpath.setUndeletable(true);
    MetadataBuilder actionParameters_path = actionParametersSchema.get("path");
    actionParameters_path.setMultivalue(true);
    actionParameters_path.setSystemReserved(true);
    actionParameters_path.setUndeletable(true);
    MetadataBuilder actionParameters_pathParts = actionParametersSchema.get("pathParts");
    actionParameters_pathParts.setMultivalue(true);
    actionParameters_pathParts.setSystemReserved(true);
    actionParameters_pathParts.setUndeletable(true);
    MetadataBuilder actionParameters_principalpath = actionParametersSchema.get("principalpath");
    actionParameters_principalpath.setSystemReserved(true);
    actionParameters_principalpath.setUndeletable(true);
    MetadataBuilder actionParameters_removedauthorizations = actionParametersSchema.get("removedauthorizations");
    actionParameters_removedauthorizations.setMultivalue(true);
    actionParameters_removedauthorizations.setSystemReserved(true);
    actionParameters_removedauthorizations.setUndeletable(true);
    MetadataBuilder actionParameters_schema = actionParametersSchema.get("schema");
    actionParameters_schema.setDefaultRequirement(true);
    actionParameters_schema.setSystemReserved(true);
    actionParameters_schema.setUndeletable(true);
    MetadataBuilder actionParameters_searchable = actionParametersSchema.get("searchable");
    actionParameters_searchable.setSystemReserved(true);
    actionParameters_searchable.setUndeletable(true);
    MetadataBuilder actionParameters_shareDenyTokens = actionParametersSchema.get("shareDenyTokens");
    actionParameters_shareDenyTokens.setMultivalue(true);
    actionParameters_shareDenyTokens.setSystemReserved(true);
    actionParameters_shareDenyTokens.setUndeletable(true);
    actionParameters_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder actionParameters_shareTokens = actionParametersSchema.get("shareTokens");
    actionParameters_shareTokens.setMultivalue(true);
    actionParameters_shareTokens.setSystemReserved(true);
    actionParameters_shareTokens.setUndeletable(true);
    actionParameters_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder actionParameters_title = actionParametersSchema.get("title");
    actionParameters_title.setUndeletable(true);
    actionParameters_title.setEnabled(false);
    actionParameters_title.setSchemaAutocomplete(true);
    actionParameters_title.setSearchable(true);
    MetadataBuilder actionParameters_tokens = actionParametersSchema.get("tokens");
    actionParameters_tokens.setMultivalue(true);
    actionParameters_tokens.setSystemReserved(true);
    actionParameters_tokens.setUndeletable(true);
    MetadataBuilder actionParameters_visibleInTrees = actionParametersSchema.get("visibleInTrees");
    actionParameters_visibleInTrees.setSystemReserved(true);
    actionParameters_visibleInTrees.setUndeletable(true);
    MetadataBuilder robot_action = robotSchema.create("action").setType(MetadataValueType.STRING);
    robot_action.setUndeletable(true);
    robot_action.setEssential(true);
    MetadataBuilder robot_actionParameters = robotSchema.create("actionParameters").setType(MetadataValueType.REFERENCE);
    robot_actionParameters.setUndeletable(true);
    robot_actionParameters.setEssential(true);
    robot_actionParameters.defineReferencesTo(actionParametersSchemaType);
    MetadataBuilder robot_allReferences = robotSchema.get("allReferences");
    robot_allReferences.setMultivalue(true);
    robot_allReferences.setSystemReserved(true);
    robot_allReferences.setUndeletable(true);
    MetadataBuilder robot_allRemovedAuths = robotSchema.get("allRemovedAuths");
    robot_allRemovedAuths.setMultivalue(true);
    robot_allRemovedAuths.setSystemReserved(true);
    robot_allRemovedAuths.setUndeletable(true);
    robot_allRemovedAuths.setEssential(true);
    MetadataBuilder robot_allauthorizations = robotSchema.get("allauthorizations");
    robot_allauthorizations.setMultivalue(true);
    robot_allauthorizations.setSystemReserved(true);
    robot_allauthorizations.setUndeletable(true);
    MetadataBuilder robot_attachedAncestors = robotSchema.get("attachedAncestors");
    robot_attachedAncestors.setMultivalue(true);
    robot_attachedAncestors.setSystemReserved(true);
    robot_attachedAncestors.setUndeletable(true);
    robot_attachedAncestors.setEssential(true);
    MetadataBuilder robot_authorizations = robotSchema.get("authorizations");
    robot_authorizations.setMultivalue(true);
    robot_authorizations.setSystemReserved(true);
    robot_authorizations.setUndeletable(true);
    MetadataBuilder robot_autoExecute = robotSchema.create("autoExecute").setType(MetadataValueType.BOOLEAN);
    robot_autoExecute.setDefaultRequirement(true);
    robot_autoExecute.setUndeletable(true);
    robot_autoExecute.setDefaultValue(false);
    MetadataBuilder robot_code = robotSchema.create("code").setType(MetadataValueType.STRING);
    robot_code.setDefaultRequirement(true);
    robot_code.setUndeletable(true);
    robot_code.setEssential(true);
    robot_code.setUniqueValue(true);
    MetadataBuilder robot_createdBy = robotSchema.get("createdBy");
    robot_createdBy.setSystemReserved(true);
    robot_createdBy.setUndeletable(true);
    MetadataBuilder robot_createdOn = robotSchema.get("createdOn");
    robot_createdOn.setSystemReserved(true);
    robot_createdOn.setUndeletable(true);
    robot_createdOn.setSortable(true);
    MetadataBuilder robot_deleted = robotSchema.get("deleted");
    robot_deleted.setSystemReserved(true);
    robot_deleted.setUndeletable(true);
    MetadataBuilder robot_denyTokens = robotSchema.get("denyTokens");
    robot_denyTokens.setMultivalue(true);
    robot_denyTokens.setSystemReserved(true);
    robot_denyTokens.setUndeletable(true);
    robot_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robot_description = robotSchema.create("description").setType(MetadataValueType.TEXT);
    MetadataBuilder robot_detachedauthorizations = robotSchema.get("detachedauthorizations");
    robot_detachedauthorizations.setSystemReserved(true);
    robot_detachedauthorizations.setUndeletable(true);
    MetadataBuilder robot_errorOnPhysicalDeletion = robotSchema.get("errorOnPhysicalDeletion");
    robot_errorOnPhysicalDeletion.setSystemReserved(true);
    robot_errorOnPhysicalDeletion.setUndeletable(true);
    MetadataBuilder robot_excludeProcessedByChildren = robotSchema.create("excludeProcessedByChildren").setType(MetadataValueType.BOOLEAN);
    robot_excludeProcessedByChildren.setDefaultRequirement(true);
    robot_excludeProcessedByChildren.setUndeletable(true);
    robot_excludeProcessedByChildren.setEssential(true);
    robot_excludeProcessedByChildren.setDefaultValue(false);
    MetadataBuilder robot_followers = robotSchema.get("followers");
    robot_followers.setMultivalue(true);
    robot_followers.setSystemReserved(true);
    robot_followers.setUndeletable(true);
    robot_followers.setSearchable(true);
    MetadataBuilder robot_id = robotSchema.get("id");
    robot_id.setDefaultRequirement(true);
    robot_id.setSystemReserved(true);
    robot_id.setUndeletable(true);
    robot_id.setSearchable(true);
    robot_id.setSortable(true);
    robot_id.setUniqueValue(true);
    robot_id.setUnmodifiable(true);
    MetadataBuilder robot_inheritedauthorizations = robotSchema.get("inheritedauthorizations");
    robot_inheritedauthorizations.setMultivalue(true);
    robot_inheritedauthorizations.setSystemReserved(true);
    robot_inheritedauthorizations.setUndeletable(true);
    MetadataBuilder robot_legacyIdentifier = robotSchema.get("legacyIdentifier");
    robot_legacyIdentifier.setDefaultRequirement(true);
    robot_legacyIdentifier.setSystemReserved(true);
    robot_legacyIdentifier.setUndeletable(true);
    robot_legacyIdentifier.setSearchable(true);
    robot_legacyIdentifier.setUniqueValue(true);
    robot_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder robot_logicallyDeletedOn = robotSchema.get("logicallyDeletedOn");
    robot_logicallyDeletedOn.setSystemReserved(true);
    robot_logicallyDeletedOn.setUndeletable(true);
    MetadataBuilder robot_manualTokens = robotSchema.get("manualTokens");
    robot_manualTokens.setMultivalue(true);
    robot_manualTokens.setSystemReserved(true);
    robot_manualTokens.setUndeletable(true);
    robot_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robot_markedForPreviewConversion = robotSchema.get("markedForPreviewConversion");
    robot_markedForPreviewConversion.setSystemReserved(true);
    robot_markedForPreviewConversion.setUndeletable(true);
    MetadataBuilder robot_markedForReindexing = robotSchema.get("markedForReindexing");
    robot_markedForReindexing.setSystemReserved(true);
    robot_markedForReindexing.setUndeletable(true);
    MetadataBuilder robot_modifiedBy = robotSchema.get("modifiedBy");
    robot_modifiedBy.setSystemReserved(true);
    robot_modifiedBy.setUndeletable(true);
    MetadataBuilder robot_modifiedOn = robotSchema.get("modifiedOn");
    robot_modifiedOn.setSystemReserved(true);
    robot_modifiedOn.setUndeletable(true);
    robot_modifiedOn.setSortable(true);
    MetadataBuilder robot_parent = robotSchema.create("parent").setType(MetadataValueType.REFERENCE);
    robot_parent.setUndeletable(true);
    robot_parent.setEssential(true);
    robot_parent.defineChildOfRelationshipToType(robotSchemaType);
    MetadataBuilder robot_parentpath = robotSchema.get("parentpath");
    robot_parentpath.setMultivalue(true);
    robot_parentpath.setSystemReserved(true);
    robot_parentpath.setUndeletable(true);
    MetadataBuilder robot_path = robotSchema.get("path");
    robot_path.setMultivalue(true);
    robot_path.setSystemReserved(true);
    robot_path.setUndeletable(true);
    MetadataBuilder robot_pathParts = robotSchema.get("pathParts");
    robot_pathParts.setMultivalue(true);
    robot_pathParts.setSystemReserved(true);
    robot_pathParts.setUndeletable(true);
    MetadataBuilder robot_principalpath = robotSchema.get("principalpath");
    robot_principalpath.setSystemReserved(true);
    robot_principalpath.setUndeletable(true);
    MetadataBuilder robot_removedauthorizations = robotSchema.get("removedauthorizations");
    robot_removedauthorizations.setMultivalue(true);
    robot_removedauthorizations.setSystemReserved(true);
    robot_removedauthorizations.setUndeletable(true);
    MetadataBuilder robot_schema = robotSchema.get("schema");
    robot_schema.setDefaultRequirement(true);
    robot_schema.setSystemReserved(true);
    robot_schema.setUndeletable(true);
    MetadataBuilder robot_schemaFilter = robotSchema.create("schemaFilter").setType(MetadataValueType.STRING);
    robot_schemaFilter.setDefaultRequirement(true);
    robot_schemaFilter.setUndeletable(true);
    robot_schemaFilter.setEssential(true);
    MetadataBuilder robot_searchCriteria = robotSchema.create("searchCriteria").setType(MetadataValueType.STRUCTURE);
    robot_searchCriteria.setMultivalue(true);
    robot_searchCriteria.setDefaultRequirement(true);
    robot_searchCriteria.setUndeletable(true);
    robot_searchCriteria.setEssential(true);
    robot_searchCriteria.defineStructureFactory(CriterionFactory.class);
    MetadataBuilder robot_searchable = robotSchema.get("searchable");
    robot_searchable.setSystemReserved(true);
    robot_searchable.setUndeletable(true);
    MetadataBuilder robot_shareDenyTokens = robotSchema.get("shareDenyTokens");
    robot_shareDenyTokens.setMultivalue(true);
    robot_shareDenyTokens.setSystemReserved(true);
    robot_shareDenyTokens.setUndeletable(true);
    robot_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robot_shareTokens = robotSchema.get("shareTokens");
    robot_shareTokens.setMultivalue(true);
    robot_shareTokens.setSystemReserved(true);
    robot_shareTokens.setUndeletable(true);
    robot_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robot_title = robotSchema.get("title");
    robot_title.setDefaultRequirement(true);
    robot_title.setUndeletable(true);
    robot_title.setSchemaAutocomplete(true);
    robot_title.setSearchable(true);
    MetadataBuilder robot_tokens = robotSchema.get("tokens");
    robot_tokens.setMultivalue(true);
    robot_tokens.setSystemReserved(true);
    robot_tokens.setUndeletable(true);
    MetadataBuilder robot_visibleInTrees = robotSchema.get("visibleInTrees");
    robot_visibleInTrees.setSystemReserved(true);
    robot_visibleInTrees.setUndeletable(true);
    MetadataBuilder robotLog_allReferences = robotLogSchema.get("allReferences");
    robotLog_allReferences.setMultivalue(true);
    robotLog_allReferences.setSystemReserved(true);
    robotLog_allReferences.setUndeletable(true);
    MetadataBuilder robotLog_allRemovedAuths = robotLogSchema.get("allRemovedAuths");
    robotLog_allRemovedAuths.setMultivalue(true);
    robotLog_allRemovedAuths.setSystemReserved(true);
    robotLog_allRemovedAuths.setUndeletable(true);
    robotLog_allRemovedAuths.setEssential(true);
    MetadataBuilder robotLog_allauthorizations = robotLogSchema.get("allauthorizations");
    robotLog_allauthorizations.setMultivalue(true);
    robotLog_allauthorizations.setSystemReserved(true);
    robotLog_allauthorizations.setUndeletable(true);
    MetadataBuilder robotLog_attachedAncestors = robotLogSchema.get("attachedAncestors");
    robotLog_attachedAncestors.setMultivalue(true);
    robotLog_attachedAncestors.setSystemReserved(true);
    robotLog_attachedAncestors.setUndeletable(true);
    robotLog_attachedAncestors.setEssential(true);
    MetadataBuilder robotLog_authorizations = robotLogSchema.get("authorizations");
    robotLog_authorizations.setMultivalue(true);
    robotLog_authorizations.setSystemReserved(true);
    robotLog_authorizations.setUndeletable(true);
    MetadataBuilder robotLog_count = robotLogSchema.create("count").setType(MetadataValueType.NUMBER);
    robotLog_count.setUndeletable(true);
    MetadataBuilder robotLog_createdBy = robotLogSchema.get("createdBy");
    robotLog_createdBy.setSystemReserved(true);
    robotLog_createdBy.setUndeletable(true);
    MetadataBuilder robotLog_createdOn = robotLogSchema.get("createdOn");
    robotLog_createdOn.setSystemReserved(true);
    robotLog_createdOn.setUndeletable(true);
    robotLog_createdOn.setSortable(true);
    MetadataBuilder robotLog_deleted = robotLogSchema.get("deleted");
    robotLog_deleted.setSystemReserved(true);
    robotLog_deleted.setUndeletable(true);
    MetadataBuilder robotLog_denyTokens = robotLogSchema.get("denyTokens");
    robotLog_denyTokens.setMultivalue(true);
    robotLog_denyTokens.setSystemReserved(true);
    robotLog_denyTokens.setUndeletable(true);
    robotLog_denyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robotLog_detachedauthorizations = robotLogSchema.get("detachedauthorizations");
    robotLog_detachedauthorizations.setSystemReserved(true);
    robotLog_detachedauthorizations.setUndeletable(true);
    MetadataBuilder robotLog_errorOnPhysicalDeletion = robotLogSchema.get("errorOnPhysicalDeletion");
    robotLog_errorOnPhysicalDeletion.setSystemReserved(true);
    robotLog_errorOnPhysicalDeletion.setUndeletable(true);
    MetadataBuilder robotLog_followers = robotLogSchema.get("followers");
    robotLog_followers.setMultivalue(true);
    robotLog_followers.setSystemReserved(true);
    robotLog_followers.setUndeletable(true);
    robotLog_followers.setSearchable(true);
    MetadataBuilder robotLog_id = robotLogSchema.get("id");
    robotLog_id.setDefaultRequirement(true);
    robotLog_id.setSystemReserved(true);
    robotLog_id.setUndeletable(true);
    robotLog_id.setSearchable(true);
    robotLog_id.setSortable(true);
    robotLog_id.setUniqueValue(true);
    robotLog_id.setUnmodifiable(true);
    MetadataBuilder robotLog_inheritedauthorizations = robotLogSchema.get("inheritedauthorizations");
    robotLog_inheritedauthorizations.setMultivalue(true);
    robotLog_inheritedauthorizations.setSystemReserved(true);
    robotLog_inheritedauthorizations.setUndeletable(true);
    MetadataBuilder robotLog_legacyIdentifier = robotLogSchema.get("legacyIdentifier");
    robotLog_legacyIdentifier.setDefaultRequirement(true);
    robotLog_legacyIdentifier.setSystemReserved(true);
    robotLog_legacyIdentifier.setUndeletable(true);
    robotLog_legacyIdentifier.setSearchable(true);
    robotLog_legacyIdentifier.setUniqueValue(true);
    robotLog_legacyIdentifier.setUnmodifiable(true);
    MetadataBuilder robotLog_logicallyDeletedOn = robotLogSchema.get("logicallyDeletedOn");
    robotLog_logicallyDeletedOn.setSystemReserved(true);
    robotLog_logicallyDeletedOn.setUndeletable(true);
    MetadataBuilder robotLog_manualTokens = robotLogSchema.get("manualTokens");
    robotLog_manualTokens.setMultivalue(true);
    robotLog_manualTokens.setSystemReserved(true);
    robotLog_manualTokens.setUndeletable(true);
    robotLog_manualTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robotLog_markedForPreviewConversion = robotLogSchema.get("markedForPreviewConversion");
    robotLog_markedForPreviewConversion.setSystemReserved(true);
    robotLog_markedForPreviewConversion.setUndeletable(true);
    MetadataBuilder robotLog_markedForReindexing = robotLogSchema.get("markedForReindexing");
    robotLog_markedForReindexing.setSystemReserved(true);
    robotLog_markedForReindexing.setUndeletable(true);
    MetadataBuilder robotLog_modifiedBy = robotLogSchema.get("modifiedBy");
    robotLog_modifiedBy.setSystemReserved(true);
    robotLog_modifiedBy.setUndeletable(true);
    MetadataBuilder robotLog_modifiedOn = robotLogSchema.get("modifiedOn");
    robotLog_modifiedOn.setSystemReserved(true);
    robotLog_modifiedOn.setUndeletable(true);
    robotLog_modifiedOn.setSortable(true);
    MetadataBuilder robotLog_parentpath = robotLogSchema.get("parentpath");
    robotLog_parentpath.setMultivalue(true);
    robotLog_parentpath.setSystemReserved(true);
    robotLog_parentpath.setUndeletable(true);
    MetadataBuilder robotLog_path = robotLogSchema.get("path");
    robotLog_path.setMultivalue(true);
    robotLog_path.setSystemReserved(true);
    robotLog_path.setUndeletable(true);
    MetadataBuilder robotLog_pathParts = robotLogSchema.get("pathParts");
    robotLog_pathParts.setMultivalue(true);
    robotLog_pathParts.setSystemReserved(true);
    robotLog_pathParts.setUndeletable(true);
    MetadataBuilder robotLog_principalpath = robotLogSchema.get("principalpath");
    robotLog_principalpath.setSystemReserved(true);
    robotLog_principalpath.setUndeletable(true);
    MetadataBuilder robotLog_removedauthorizations = robotLogSchema.get("removedauthorizations");
    robotLog_removedauthorizations.setMultivalue(true);
    robotLog_removedauthorizations.setSystemReserved(true);
    robotLog_removedauthorizations.setUndeletable(true);
    MetadataBuilder robotLog_robot = robotLogSchema.create("robot").setType(MetadataValueType.REFERENCE);
    robotLog_robot.setDefaultRequirement(true);
    robotLog_robot.setUndeletable(true);
    robotLog_robot.setEssential(true);
    robotLog_robot.defineReferencesTo(robotSchemaType);
    MetadataBuilder robotLog_schema = robotLogSchema.get("schema");
    robotLog_schema.setDefaultRequirement(true);
    robotLog_schema.setSystemReserved(true);
    robotLog_schema.setUndeletable(true);
    MetadataBuilder robotLog_searchable = robotLogSchema.get("searchable");
    robotLog_searchable.setSystemReserved(true);
    robotLog_searchable.setUndeletable(true);
    MetadataBuilder robotLog_shareDenyTokens = robotLogSchema.get("shareDenyTokens");
    robotLog_shareDenyTokens.setMultivalue(true);
    robotLog_shareDenyTokens.setSystemReserved(true);
    robotLog_shareDenyTokens.setUndeletable(true);
    robotLog_shareDenyTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robotLog_shareTokens = robotLogSchema.get("shareTokens");
    robotLog_shareTokens.setMultivalue(true);
    robotLog_shareTokens.setSystemReserved(true);
    robotLog_shareTokens.setUndeletable(true);
    robotLog_shareTokens.defineValidators().add(ManualTokenValidator.class);
    MetadataBuilder robotLog_title = robotLogSchema.get("title");
    robotLog_title.setUndeletable(true);
    robotLog_title.setSchemaAutocomplete(true);
    robotLog_title.setSearchable(true);
    MetadataBuilder robotLog_tokens = robotLogSchema.get("tokens");
    robotLog_tokens.setMultivalue(true);
    robotLog_tokens.setSystemReserved(true);
    robotLog_tokens.setUndeletable(true);
    MetadataBuilder robotLog_visibleInTrees = robotLogSchema.get("visibleInTrees");
    robotLog_visibleInTrees.setSystemReserved(true);
    robotLog_visibleInTrees.setUndeletable(true);
    MetadataBuilder facet_field_active = facet_fieldSchema.get("active");
    MetadataBuilder facet_field_allReferences = facet_fieldSchema.get("allReferences");
    MetadataBuilder facet_field_allRemovedAuths = facet_fieldSchema.get("allRemovedAuths");
    MetadataBuilder facet_field_allauthorizations = facet_fieldSchema.get("allauthorizations");
    MetadataBuilder facet_field_attachedAncestors = facet_fieldSchema.get("attachedAncestors");
    MetadataBuilder facet_field_authorizations = facet_fieldSchema.get("authorizations");
    MetadataBuilder facet_field_createdBy = facet_fieldSchema.get("createdBy");
    MetadataBuilder facet_field_createdOn = facet_fieldSchema.get("createdOn");
    MetadataBuilder facet_field_deleted = facet_fieldSchema.get("deleted");
    MetadataBuilder facet_field_denyTokens = facet_fieldSchema.get("denyTokens");
    MetadataBuilder facet_field_detachedauthorizations = facet_fieldSchema.get("detachedauthorizations");
    MetadataBuilder facet_field_elementPerPage = facet_fieldSchema.get("elementPerPage");
    MetadataBuilder facet_field_errorOnPhysicalDeletion = facet_fieldSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder facet_field_facetType = facet_fieldSchema.get("facetType");
    MetadataBuilder facet_field_fieldDatastoreCode = facet_fieldSchema.get("fieldDatastoreCode");
    MetadataBuilder facet_field_followers = facet_fieldSchema.get("followers");
    MetadataBuilder facet_field_id = facet_fieldSchema.get("id");
    MetadataBuilder facet_field_inheritedauthorizations = facet_fieldSchema.get("inheritedauthorizations");
    MetadataBuilder facet_field_legacyIdentifier = facet_fieldSchema.get("legacyIdentifier");
    MetadataBuilder facet_field_logicallyDeletedOn = facet_fieldSchema.get("logicallyDeletedOn");
    MetadataBuilder facet_field_manualTokens = facet_fieldSchema.get("manualTokens");
    MetadataBuilder facet_field_markedForPreviewConversion = facet_fieldSchema.get("markedForPreviewConversion");
    MetadataBuilder facet_field_markedForReindexing = facet_fieldSchema.get("markedForReindexing");
    MetadataBuilder facet_field_modifiedBy = facet_fieldSchema.get("modifiedBy");
    MetadataBuilder facet_field_modifiedOn = facet_fieldSchema.get("modifiedOn");
    MetadataBuilder facet_field_openByDefault = facet_fieldSchema.get("openByDefault");
    MetadataBuilder facet_field_order = facet_fieldSchema.get("order");
    MetadataBuilder facet_field_orderResult = facet_fieldSchema.get("orderResult");
    MetadataBuilder facet_field_pages = facet_fieldSchema.get("pages");
    MetadataBuilder facet_field_parentpath = facet_fieldSchema.get("parentpath");
    MetadataBuilder facet_field_path = facet_fieldSchema.get("path");
    MetadataBuilder facet_field_pathParts = facet_fieldSchema.get("pathParts");
    MetadataBuilder facet_field_principalpath = facet_fieldSchema.get("principalpath");
    MetadataBuilder facet_field_removedauthorizations = facet_fieldSchema.get("removedauthorizations");
    MetadataBuilder facet_field_schema = facet_fieldSchema.get("schema");
    MetadataBuilder facet_field_searchable = facet_fieldSchema.get("searchable");
    MetadataBuilder facet_field_shareDenyTokens = facet_fieldSchema.get("shareDenyTokens");
    MetadataBuilder facet_field_shareTokens = facet_fieldSchema.get("shareTokens");
    MetadataBuilder facet_field_title = facet_fieldSchema.get("title");
    MetadataBuilder facet_field_tokens = facet_fieldSchema.get("tokens");
    MetadataBuilder facet_field_usedByModule = facet_fieldSchema.get("usedByModule");
    MetadataBuilder facet_field_visibleInTrees = facet_fieldSchema.get("visibleInTrees");
    MetadataBuilder facet_query_active = facet_querySchema.get("active");
    MetadataBuilder facet_query_allReferences = facet_querySchema.get("allReferences");
    MetadataBuilder facet_query_allRemovedAuths = facet_querySchema.get("allRemovedAuths");
    MetadataBuilder facet_query_allauthorizations = facet_querySchema.get("allauthorizations");
    MetadataBuilder facet_query_attachedAncestors = facet_querySchema.get("attachedAncestors");
    MetadataBuilder facet_query_authorizations = facet_querySchema.get("authorizations");
    MetadataBuilder facet_query_createdBy = facet_querySchema.get("createdBy");
    MetadataBuilder facet_query_createdOn = facet_querySchema.get("createdOn");
    MetadataBuilder facet_query_deleted = facet_querySchema.get("deleted");
    MetadataBuilder facet_query_denyTokens = facet_querySchema.get("denyTokens");
    MetadataBuilder facet_query_detachedauthorizations = facet_querySchema.get("detachedauthorizations");
    MetadataBuilder facet_query_elementPerPage = facet_querySchema.get("elementPerPage");
    MetadataBuilder facet_query_errorOnPhysicalDeletion = facet_querySchema.get("errorOnPhysicalDeletion");
    MetadataBuilder facet_query_facetType = facet_querySchema.get("facetType");
    MetadataBuilder facet_query_fieldDatastoreCode = facet_querySchema.get("fieldDatastoreCode");
    MetadataBuilder facet_query_followers = facet_querySchema.get("followers");
    MetadataBuilder facet_query_id = facet_querySchema.get("id");
    MetadataBuilder facet_query_inheritedauthorizations = facet_querySchema.get("inheritedauthorizations");
    MetadataBuilder facet_query_legacyIdentifier = facet_querySchema.get("legacyIdentifier");
    MetadataBuilder facet_query_logicallyDeletedOn = facet_querySchema.get("logicallyDeletedOn");
    MetadataBuilder facet_query_manualTokens = facet_querySchema.get("manualTokens");
    MetadataBuilder facet_query_markedForPreviewConversion = facet_querySchema.get("markedForPreviewConversion");
    MetadataBuilder facet_query_markedForReindexing = facet_querySchema.get("markedForReindexing");
    MetadataBuilder facet_query_modifiedBy = facet_querySchema.get("modifiedBy");
    MetadataBuilder facet_query_modifiedOn = facet_querySchema.get("modifiedOn");
    MetadataBuilder facet_query_openByDefault = facet_querySchema.get("openByDefault");
    MetadataBuilder facet_query_order = facet_querySchema.get("order");
    MetadataBuilder facet_query_orderResult = facet_querySchema.get("orderResult");
    MetadataBuilder facet_query_pages = facet_querySchema.get("pages");
    MetadataBuilder facet_query_parentpath = facet_querySchema.get("parentpath");
    MetadataBuilder facet_query_path = facet_querySchema.get("path");
    MetadataBuilder facet_query_pathParts = facet_querySchema.get("pathParts");
    MetadataBuilder facet_query_principalpath = facet_querySchema.get("principalpath");
    MetadataBuilder facet_query_removedauthorizations = facet_querySchema.get("removedauthorizations");
    MetadataBuilder facet_query_schema = facet_querySchema.get("schema");
    MetadataBuilder facet_query_searchable = facet_querySchema.get("searchable");
    MetadataBuilder facet_query_shareDenyTokens = facet_querySchema.get("shareDenyTokens");
    MetadataBuilder facet_query_shareTokens = facet_querySchema.get("shareTokens");
    MetadataBuilder facet_query_title = facet_querySchema.get("title");
    MetadataBuilder facet_query_tokens = facet_querySchema.get("tokens");
    MetadataBuilder facet_query_usedByModule = facet_querySchema.get("usedByModule");
    MetadataBuilder facet_query_visibleInTrees = facet_querySchema.get("visibleInTrees");
    MetadataBuilder task_approval_allReferences = task_approvalSchema.get("allReferences");
    MetadataBuilder task_approval_allRemovedAuths = task_approvalSchema.get("allRemovedAuths");
    MetadataBuilder task_approval_allauthorizations = task_approvalSchema.get("allauthorizations");
    MetadataBuilder task_approval_assignCandidates = task_approvalSchema.get("assignCandidates");
    MetadataBuilder task_approval_assignedOn = task_approvalSchema.get("assignedOn");
    MetadataBuilder task_approval_assignedTo = task_approvalSchema.get("assignedTo");
    MetadataBuilder task_approval_attachedAncestors = task_approvalSchema.get("attachedAncestors");
    MetadataBuilder task_approval_authorizations = task_approvalSchema.get("authorizations");
    MetadataBuilder task_approval_createdBy = task_approvalSchema.get("createdBy");
    MetadataBuilder task_approval_createdOn = task_approvalSchema.get("createdOn");
    MetadataBuilder task_approval_deleted = task_approvalSchema.get("deleted");
    MetadataBuilder task_approval_denyTokens = task_approvalSchema.get("denyTokens");
    MetadataBuilder task_approval_detachedauthorizations = task_approvalSchema.get("detachedauthorizations");
    MetadataBuilder task_approval_dueDate = task_approvalSchema.get("dueDate");
    MetadataBuilder task_approval_errorOnPhysicalDeletion = task_approvalSchema.get("errorOnPhysicalDeletion");
    MetadataBuilder task_approval_finishedBy = task_approvalSchema.get("finishedBy");
    MetadataBuilder task_approval_finishedOn = task_approvalSchema.get("finishedOn");
    MetadataBuilder task_approval_followers = task_approvalSchema.get("followers");
    MetadataBuilder task_approval_id = task_approvalSchema.get("id");
    MetadataBuilder task_approval_inheritedauthorizations = task_approvalSchema.get("inheritedauthorizations");
    MetadataBuilder task_approval_legacyIdentifier = task_approvalSchema.get("legacyIdentifier");
    MetadataBuilder task_approval_logicallyDeletedOn = task_approvalSchema.get("logicallyDeletedOn");
    MetadataBuilder task_approval_manualTokens = task_approvalSchema.get("manualTokens");
    MetadataBuilder task_approval_markedForPreviewConversion = task_approvalSchema.get("markedForPreviewConversion");
    MetadataBuilder task_approval_markedForReindexing = task_approvalSchema.get("markedForReindexing");
    MetadataBuilder task_approval_modifiedBy = task_approvalSchema.get("modifiedBy");
    MetadataBuilder task_approval_modifiedOn = task_approvalSchema.get("modifiedOn");
    MetadataBuilder task_approval_parentpath = task_approvalSchema.get("parentpath");
    MetadataBuilder task_approval_path = task_approvalSchema.get("path");
    MetadataBuilder task_approval_pathParts = task_approvalSchema.get("pathParts");
    MetadataBuilder task_approval_principalpath = task_approvalSchema.get("principalpath");
    MetadataBuilder task_approval_removedauthorizations = task_approvalSchema.get("removedauthorizations");
    MetadataBuilder task_approval_schema = task_approvalSchema.get("schema");
    MetadataBuilder task_approval_searchable = task_approvalSchema.get("searchable");
    MetadataBuilder task_approval_shareDenyTokens = task_approvalSchema.get("shareDenyTokens");
    MetadataBuilder task_approval_shareTokens = task_approvalSchema.get("shareTokens");
    MetadataBuilder task_approval_title = task_approvalSchema.get("title");
    MetadataBuilder task_approval_tokens = task_approvalSchema.get("tokens");
    MetadataBuilder task_approval_visibleInTrees = task_approvalSchema.get("visibleInTrees");
    MetadataBuilder task_approval_workflowIdentifier = task_approvalSchema.get("workflowIdentifier");
    MetadataBuilder task_approval_workflowRecordIdentifiers = task_approvalSchema.get("workflowRecordIdentifiers");
    actionParameters_allReferences.defineDataEntry().asCalculated(AllReferencesCalculator.class);
    actionParameters_allRemovedAuths.defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    actionParameters_allauthorizations.defineDataEntry().asCalculated(AllAuthorizationsCalculator.class);
    actionParameters_attachedAncestors.defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    actionParameters_inheritedauthorizations.defineDataEntry().asCalculated(InheritedAuthorizationsCalculator.class);
    actionParameters_parentpath.defineDataEntry().asCalculated(ParentPathCalculator.class);
    actionParameters_path.defineDataEntry().asCalculated(PathCalculator.class);
    actionParameters_pathParts.defineDataEntry().asCalculated(PathPartsCalculator.class);
    actionParameters_principalpath.defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    actionParameters_tokens.defineDataEntry().asCalculated(TokensCalculator2.class);
    robot_allReferences.defineDataEntry().asCalculated(AllReferencesCalculator.class);
    robot_allRemovedAuths.defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    robot_allauthorizations.defineDataEntry().asCalculated(AllAuthorizationsCalculator.class);
    robot_attachedAncestors.defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    robot_inheritedauthorizations.defineDataEntry().asCalculated(InheritedAuthorizationsCalculator.class);
    robot_parentpath.defineDataEntry().asCalculated(ParentPathCalculator.class);
    robot_path.defineDataEntry().asCalculated(PathCalculator.class);
    robot_pathParts.defineDataEntry().asCalculated(PathPartsCalculator.class);
    robot_principalpath.defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    robot_tokens.defineDataEntry().asCalculated(TokensCalculator2.class);
    robotLog_allReferences.defineDataEntry().asCalculated(AllReferencesCalculator.class);
    robotLog_allRemovedAuths.defineDataEntry().asCalculated(AllRemovedAuthsCalculator.class);
    robotLog_allauthorizations.defineDataEntry().asCalculated(AllAuthorizationsCalculator.class);
    robotLog_attachedAncestors.defineDataEntry().asCalculated(AttachedAncestorsCalculator.class);
    robotLog_inheritedauthorizations.defineDataEntry().asCalculated(InheritedAuthorizationsCalculator.class);
    robotLog_parentpath.defineDataEntry().asCalculated(ParentPathCalculator.class);
    robotLog_path.defineDataEntry().asCalculated(PathCalculator.class);
    robotLog_pathParts.defineDataEntry().asCalculated(PathPartsCalculator.class);
    robotLog_principalpath.defineDataEntry().asCalculated(PrincipalPathCalculator.class);
    robotLog_tokens.defineDataEntry().asCalculated(TokensCalculator2.class);
  }

  public void applySchemasDisplay(SchemasDisplayManager manager) {
    SchemaTypesDisplayTransactionBuilder transaction = manager.newTransactionBuilderFor(collection);
    SchemaTypesDisplayConfig typesConfig = manager.getTypes(collection);
    transaction.add(manager.getSchema(collection, "actionParameters_default").withFormMetadataCodes(new ArrayList<String>()).withDisplayMetadataCodes(asList("actionParameters_default_title")).withSearchResultsMetadataCodes(asList("actionParameters_default_title", "actionParameters_default_modifiedOn")).withTableMetadataCodes(asList("actionParameters_default_title", "actionParameters_default_modifiedOn")));
    transaction.add(manager.getType(collection, "robot").withSimpleSearchStatus(false).withAdvancedSearchStatus(false).withManageableStatus(false).withMetadataGroup(resourcesProvider.getLanguageMap(asList("init.robot.tabs.criteria", "default:init.robot.tabs.definition", "init.robot.tabs.action"))));
    transaction.add(manager.getSchema(collection, "robot_default").withFormMetadataCodes(asList("robot_default_code", "robot_default_title", "robot_default_parent", "robot_default_schemaFilter", "robot_default_description", "robot_default_searchCriteria", "robot_default_action", "robot_default_actionParameters", "robot_default_excludeProcessedByChildren", "robot_default_autoExecute")).withDisplayMetadataCodes(asList("robot_default_code", "robot_default_title", "robot_default_createdBy", "robot_default_createdOn", "robot_default_modifiedBy", "robot_default_modifiedOn", "robot_default_action", "robot_default_actionParameters", "robot_default_excludeProcessedByChildren", "robot_default_parent", "robot_default_schemaFilter", "robot_default_description")).withSearchResultsMetadataCodes(asList("robot_default_title", "robot_default_modifiedOn")).withTableMetadataCodes(asList("robot_default_title", "robot_default_modifiedOn")));
    transaction.add(manager.getMetadata(collection, "robot_default_action").withMetadataGroup("init.robot.tabs.action").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "robot_default_actionParameters").withMetadataGroup("init.robot.tabs.action").withInputType(MetadataInputType.LOOKUP).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "robot_default_excludeProcessedByChildren").withMetadataGroup("init.robot.tabs.action").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "robot_default_parent").withMetadataGroup("").withInputType(MetadataInputType.HIDDEN).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "robot_default_schemaFilter").withMetadataGroup("init.robot.tabs.criteria").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getMetadata(collection, "robot_default_searchCriteria").withMetadataGroup("init.robot.tabs.criteria").withInputType(MetadataInputType.FIELD).withHighlightStatus(false).withVisibleInAdvancedSearchStatus(false));
    transaction.add(manager.getSchema(collection, "robotLog_default").withFormMetadataCodes(asList("robotLog_default_title", "robotLog_default_count", "robotLog_default_robot")).withDisplayMetadataCodes(asList("robotLog_default_title", "robotLog_default_createdBy", "robotLog_default_createdOn", "robotLog_default_modifiedBy", "robotLog_default_modifiedOn", "robotLog_default_count", "robotLog_default_robot")).withSearchResultsMetadataCodes(asList("robotLog_default_title", "robotLog_default_modifiedOn")).withTableMetadataCodes(asList("robotLog_default_title", "robotLog_default_modifiedOn", "robotLog_default_count")));
    manager.execute(transaction.build());
  }

  public void applyGeneratedRoles() {
    RolesManager rolesManager = appLayerFactory.getModelLayerFactory().getRolesManager();;
    rolesManager.updateRole(rolesManager.getRole(collection, "ADM").withNewPermissions(asList("core.deleteContentVersion", "core.ldapConfigurationManagement", "core.manageConnectors", "core.manageEmailServer", "core.manageFacets", "core.manageLabels", "core.manageMetadataExtractor", "core.manageMetadataSchemas", "core.manageSearchEngine", "core.manageSearchReports", "core.manageSecurity", "core.manageSystemCollections", "core.manageSystemConfiguration", "core.manageSystemDataImports", "core.manageSystemGroups", "core.manageSystemModules", "core.manageSystemServers", "core.manageSystemUpdates", "core.manageSystemUsers", "core.manageTaxonomies", "core.manageTrash", "core.manageValueList", "core.useExternalAPIS", "core.viewEvents", "robots.manageRobots")));
  }
}