plugins {
    id "org.sonarqube" version "2.6.2"
}

dependencies {
    compile project(":constellio:data")
    compile project(":constellio:model")
    compile project(":constellio:app")

    compile "org.eclipse.jetty.aggregate:jetty-all:9.4.12.v20180830"
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.5'
    compile 'org.seleniumhq.selenium:selenium-firefox-driver:2.39.0'
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile "com.carrotsearch:junit-benchmarks:0.7.2"
    compile 'junit:junit:4.12'
    compile 'org.assertj:assertj-core:1.6.0'
    compile 'com.github.detro.ghostdriver:phantomjsdriver:1.1.0'
    compile 'org.apache.chemistry.opencmis:chemistry-opencmis-client-impl:1.1.0'
    compile "com.squareup:javapoet:1.7.0"
    compile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '7.4.1.jre8'
    runtime 'org.projectlombok:lombok:1.18.2'
}

configurations.all {
    resolutionStrategy {
        def seleniumVersion = '3.141.59'
        force 'org.seleniumhq.selenium:selenium-api:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-chrome-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-edge-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-firefox-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-firefox-xpi-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-ie-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-java:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-opera-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-remote-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-safari-driver:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-server:' + seleniumVersion
        force 'org.seleniumhq.selenium:selenium-support:' + seleniumVersion
    }
}

task printClasspath {
    doLast {
        configurations.testRuntime.each { println it }
    }
}

eclipse {
    project {
        name = 'SDK'
    }
}

sourceSets {
    test {
        java {
            srcDir "src/"
        }
        resources {
            srcDir "sdk-resources"
        }
    }
}

task jarTest(type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

configurations {
    testArtifacts
}

artifacts {
    testArtifacts jarTest
}


project.tasks["sonarqube"].dependsOn "build"

sonarqube {
    properties {
        property "sonar.jacoco.reportPath", "$projectDir/build/jacoco/jacocoTest.exec"
        property "sonar.junit.reportsPath", "$projectDir/build/reports/"
        property "sonar.tests", "$projectDir/src/"
        property "sonar.sourceEncoding", "UTF-8"
        properties["sonar.sources"] = sourceSets.sonar.allJava
        property "sonar.projectBaseDir", project(":constellio").projectDir.getAbsolutePath()
        property "sonar.java.binaries", sourceSets.sonar.output.getDirs()
    }
}


sourceSets {
    sonar {
        java {
        }
    }
}

/*
task buildSonarSourceset() {
    List projectsList = [":constellio:app", ":constellio:model", ":constellio:data"]

    projectsList.each {
        project(it).sourceSets.main.allSource.srcDirs.each {
            sourceSets.sonar.allJava.srcDirs += it
        }
        project(it).sourceSets.main.output.classesDirs.each {
            sourceSets.sonar.output.dir(it)
        }
    }
}
*/