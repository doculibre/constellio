plugins {
    id "fi.jasoft.plugin.vaadin" version '1.1.6' apply false
    id "org.sonarqube" version "2.2" apply false
}

apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'

defaultTasks 'clean', 'compileJava'

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.fork = true
        options.incremental = true
    }

    tasks.withType(Javadoc) {
        task ->
            enabled = false;
            options.encoding = 'UTF-8'
    }

    ext {
        version_mime = "0.7.2"
    }

    configurations.all {
        resolutionStrategy {
            force "javax.validation:validation-api:1.0.0.GA"
            force "org.apache.james:apache-mime4j:${version_mime}"
        }
    }

    dependencies {
        testCompile 'nl.jqno.equalsverifier:equalsverifier:1.4.1'
        testCompile 'org.jacoco:org.jacoco.agent:0.7.5+'
        testCompile 'org.jacoco:org.jacoco.ant:0.7.5+'

        compile "com.cybozu.labs:langdetect:1.1-20120112"
        compile "com.eaio.uuid:uuid:3.2"
        compile "org.jdom:jdom:2.0.2"
        compile "org.apache.poi:poi-ooxml:3.12"
        compile "org.apache.poi:poi:3.12"
        compile "org.eclipse.jetty.aggregate:jetty-all-server:8.2.0.v20160908"
        compile "org.slf4j:slf4j-log4j12:1.7.7"
        compile "org.slf4j:slf4j-api:1.7.7"
        compile "jspf:jspf.core:1.0.0"
        compile "commons-io:commons-io:2.4"
        compile "org.apache.solr:solr-solrj:5.0.0"
        compile "org.apache.solr:solr-core:5.0.0"
        compile "org.apache.commons:commons-lang3:3.4"
        compile "org.jboss.spec.javax.servlet:jboss-servlet-api_3.0_spec:1.0.2.Final"
        compile "commons-logging:commons-logging:1.1.3"
        compile "org.apache.tika:tika-core:1.11"
        compile "org.apache.tika:tika-parsers:1.11"
        compile "org.databene:contiperf:2.2.0"
        compile "commons-httpclient:commons-httpclient:3.1"
        compile "org.seleniumhq.selenium.fluent:fluent-selenium:1.14.5"
        compile "org.apache.curator:curator-framework:2.7.0"
        compile "org.apache.curator:curator-recipes:2.7.0"
        compile "org.apache.curator:curator-client:2.7.0"
        compile "org.apache.curator:curator-test:2.7.0"
        compile "commons-beanutils:commons-beanutils:1.9.2"
        compile "javax.servlet.jsp:jsp-api:2.2"
        compile "com.auxilii.msgparser:msgparser-1.12"
        compile "com.sun.messaging.mq:jaxm-api:4.4.1"

/*
        compile files("${rootDir}/libs/commons-beanutils-1.8.2.jar")
        compile files("${rootDir}/libs/commons-collections-3.2.1.jar")
        compile files("${rootDir}/libs/commons-dbcp-1.2.2.jar")
        compile files("${rootDir}/libs/commons-digester-2.1.jar")
        compile files("${rootDir}/libs/groovy-all-2.0.1.jar")
        compile files("${rootDir}/libs/jasperreports-6.3.0.jar")
        compile files("${rootDir}/libs/com.lowagie.text-2.1.7.jar")
        compile files("${rootDir}/libs/barbecue-1.5-beta1.jar")
        */
    }

    configurations {
        compile.exclude module: "asm-debug-all"
        compile.exclude module: "org.objectweb.asm"
    }

    jar {
        version = '7.0.9.2'
    }
}

war {
    baseName = "constellio"
    version = "7.0.9.2"

    webInf {

        from("resources_i18n/") {
            into("resources_i18n")
        }
        from("reportsRecource/") {
            into("resources/reports")
        }
    }

    if (new File(rootDir, "../constellio-plugins").exists()) {
        def updatePlugins = [":plugins:plugin001", ":plugins:plugin002", ":plugins:plugin003", ":plugins:plugin004",
                             ":plugins:plugin005", ":plugins:plugin006", ":plugins:plugin007", ":plugins:plugin008",
                             ":plugins:plugin009", ":plugins:plugin010", ":plugins:plugin012", ":plugins:plugin015",
                             ":plugins:plugin016", ":plugins:plugin017", ":plugins:plugin018", ":plugins:plugin019",
                             ":plugins:plugin020"]
        def installPlugins = [":plugins:plugin023"]

        from(files(updatePlugins.collect { project(it).jar.outputs.files })) {
            into "plugins-to-update"
        }

        from(files(installPlugins.collect { project(it).jar.outputs.files })) {
            into "plugins-to-install"
        }
    }

    webAppDirName = "app/WebContent"
}

dependencies {
    compile project(":constellio:data")
    compile project(":constellio:model")
    compile project(":constellio:app")
}

task compilePlugin() {
    if (new File("./jarProject").exists()) {
        String projectName = new File("./jarProject").text.trim()
        dependsOn project(projectName).build
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}

eclipse {
    project {
        name = 'Constellio'
        buildCommand 'compileJava'
    }
}

jacocoTestReport {
    group = "reporting"
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

mainClassName = 'com.constellio.app.start.MainConstellio'
